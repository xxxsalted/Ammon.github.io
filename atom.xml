<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咸鱼运维杂谈</title>
  
  
  <link href="https://xxxsalted.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxxsalted.github.io/"/>
  <updated>2024-04-28T07:08:57.844Z</updated>
  <id>https://xxxsalted.github.io/</id>
  
  <author>
    <name>Ammon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器遭受攻击之后的常见思路及处理</title>
    <link href="https://xxxsalted.github.io/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%AD%E5%8F%97%E6%94%BB%E5%87%BB%E4%B9%8B%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%81%E6%80%9D%E8%B7%AF%E5%8F%8A%E5%A4%84%E7%90%86/"/>
    <id>https://xxxsalted.github.io/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%AD%E5%8F%97%E6%94%BB%E5%87%BB%E4%B9%8B%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%81%E6%80%9D%E8%B7%AF%E5%8F%8A%E5%A4%84%E7%90%86/</id>
    <published>2024-04-28T07:08:26.000Z</published>
    <updated>2024-04-28T07:08:57.844Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>不知道大家有没有看过这么一部电影：</p><img src="/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%AD%E5%8F%97%E6%94%BB%E5%87%BB%E4%B9%8B%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%81%E6%80%9D%E8%B7%AF%E5%8F%8A%E5%A4%84%E7%90%86/image-20230419154559523.png" class="" title="image-20230419154559523"><p>这部电影讲述了男主是一个电脑极客，在计算机方面有着不可思议的天赋，男主所在的黑客组织凭借着超高的黑客技术去入侵各种国家机构的系统，并引起了德国秘密警察组织、欧洲刑警组织的重视</p><p>刚开始看的时候以为是一部讲述黑客的电影，到后面才发现其实是讲“社会工程学”</p><p>好了开始今天的正题——跟大家聊聊服务器安全相关的问题</p><p>我们需要知道，安全总是相对的，再安全的服务器也有可能遭受到攻击，所以我们需要尽量地做好系统安全防护、及时修复一些已知的漏洞；当服务器收到攻击的时候能够迅速有效地处理攻击行为，最大限度地降低攻击对系统产生的影响</p><p>服务器遭受攻击不是最可怕的，最可怕的是面对攻击时自己束手无策无从下手，今天咸鱼就来介绍一下服务器遭受攻击之后我们需要做些什么，让大家在遇到这种情况的时候能有个大概参考</p><h2 id="常见思路"><a href="#常见思路" class="headerlink" title="常见思路"></a>常见思路</h2><ul><li>切断网络</li></ul><p><strong>常见的攻击来自网络</strong></p><p>对于一些对外提供服务的服务器，在得知系统遭受到黑客的攻击之后，首先要做的就是断开服务器的网络连接，这样除了能切断攻击源之外，也能够保护服务器所在网络的其他主机不受攻击</p><ul><li>查找攻击源</li></ul><p>首先我们可以分析系统日志或者登录日志文件，去查看可疑信息</p><p>其次查看系统开启了哪些端口，运行了哪些进程（服务），在这个过程中去分析一下哪些是可疑的进程（系统平时运行什么进程心里多多少少都会有个大概）</p><ul><li>分析入侵途径和原因</li></ul><p>系统受到入侵，肯定是有多方原因的（可能是系统漏洞、可能是程序漏洞）</p><p>所以我们需要查清楚是哪个原因导致的，并且还要查清楚攻击的途径，找到攻击源</p><ul><li>备份重要数据</li></ul><p>在系统遭受攻击之后，需要立即备份服务器上的重要数据（例如用户数据），同时也要查看这些数据中是否隐藏着攻击源</p><p>如果攻击源在数据中，一定要彻底删除然后将数据备份到一个安全的地方</p><ul><li>重装系统</li></ul><p>不要抱有自己能够彻底清除攻击源的幻想，因为没有人能比黑客更了解攻击程序</p><p>在服务器遭受到攻击后，最安全也最简单的方法就是重装系统，因为大部分攻击程序都会依附在系统文件或者内核中</p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><p>下面咸鱼将跟大家分享一些关于服务器遭受攻击后的常见处理流程</p><ul><li>检查可疑用户</li></ul><p>在发现服务器遭受到攻击之后，首先要切断网络连接，但是有些情况下（无法马上切断网络连接），就必须上系统查看是否有可疑用户在登录</p><p>如果发现有可疑用户登录了系统，首先要将这个用户锁定，然后中断可疑用户的远程连接</p><p>首先查看可疑用户，执行 <code>w</code> 命令列出所有登陆过系统的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># w</span></span><br><span class="line"> 14:42:01 up 3 days,  6:03,  3 <span class="built_in">users</span>,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    192.168.149.129    14:39    1.00s  0.01s  0.00s w</span><br><span class="line">root     pts/1    192.168.149.6    14:41    9.00s  0.01s  0.01s -bash</span><br><span class="line">root     pts/2    192.168.149.20    14:41    9.00s  0.01s  0.00s top</span><br><span class="line">nobody   pts/3    122.21.149.129    14:39    1.00s  0.01s  0.00s -bash</span><br></pre></td></tr></table></figure><p>通过输出的内容可以检查出是否有可疑或者不熟悉的用户登录，同时还可以根据用户名（USER 字段）以及用户登录的源地址(FROM 字段)又或者它们正在运行的进程、执行的命令（WHAT 字段）来判断</p><ul><li>锁定可疑用户</li></ul><p>一旦发现可疑用户，就要马上将其锁定</p><p>例如通过上面的输出发现 nobody 用户应该是可疑用户（因为 nobody 用户默认情况下是没有登录权限的，不可能说执行 bash）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#锁定 nobody 用户</span></span><br><span class="line"><span class="comment">#-l 参数含义：锁定指名帐户的密码(仅限 root 用户操作)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># passwd -l nobody</span></span><br></pre></td></tr></table></figure><p>锁定之后，这个用户有可能还处于登录状态，我们需要把它踢下线，根据上面 <code>w</code> 的输出，即可获得该用户登录进行的 pid 值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -ef | grep [@]pts/3</span></span><br><span class="line">root       6633    975  0 14:41 ?        00:00:00 sshd: nobody@pts/3</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># kill -9 6633</span></span><br></pre></td></tr></table></figure><ul><li>查看用户登录日志</li></ul><p>last 命令记录了所有用户登录系统的命令，可以通过 last 命令来查找非法用户的登录事件</p><p>last 命令的输出结果来源于 <code>/var/log/wtmp</code> 文件中，稍微有点经验的黑客都会删掉这个文件以便清除自己的行踪</p><ul><li>查看系统日志</li></ul><p>查看系统日志是查找攻击源最好的办法</p><p>可以查看的系统日志有 <code>/var/log/messages</code> 和 <code>/var//log/secure</code> ，这两个日志文件可以记录系统的运行状态以及远程用户的登录状态</p><p>还可以查看每个用户目录下的 <code>.bash_history</code> 文件，尤其是 <code>/root</code> 目录下的，这个文件记录着用户执行的所有历史命令</p><ul><li>检查并关闭系统可疑进程</li></ul><p>检查可疑进程可以通过 <code>top</code>、<code>ps</code> 命令</p><p>但是在有些情况下我们只知道进程的名称不知道执行路径，可以通过  <code>pidof</code> 命令找到对应的 PID 号，知道了 PID 号我们再去对应路径去查看进程完整的执行路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取 PID 号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pidof &lt;可疑进程名字&gt;</span></span><br><span class="line">100</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看对应 PID 目录下的 exe 文件信息找到完整执行路径</span></span><br><span class="line">[root@localhost ~]<span class="comment">#ll /proc/100/exe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还能查看对应 PID 目录下的文件句柄</span></span><br><span class="line">[root@localhost ~]<span class="comment">#ll /proc/100/fd</span></span><br></pre></td></tr></table></figure><p>除此之外，我们还可以通过指定端口来找到进程的 PID，从而找到相关进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># netstat -an | grep &lt;端口号&gt;</span></span><br></pre></td></tr></table></figure><ul><li>检查文件系统的完整性</li></ul><p>检查文件属性是否发生变化是验证文件系统完好性完整性最简单最直接方法</p><p>例如可以比较被攻击服务器上 <code>/bin/ls</code> 文件的大小与正常服务器大小是否相同（或者比较 MD5 值）</p><p>，以此来验证文件是否被动过</p><p>但是这种方法比较耗时耗力，我们可以借助 Linux 上 RPM 工具来完成验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -Va</span></span><br><span class="line">S.5....T.  c /etc/bashrc</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config</span><br><span class="line">S.5....T.  c /etc/sysconfig/authconfig</span><br><span class="line">S.5....T.  c /etc/sysconfig/iptables</span><br><span class="line">SM5....T.  c /etc/rc.d/rc.local</span><br><span class="line">....L....  c /etc/pam.d/fingerprint-auth</span><br><span class="line">....L....  c /etc/pam.d/password-auth</span><br><span class="line">....L....  c /etc/pam.d/postlogin</span><br><span class="line">....L....  c /etc/pam.d/smartcard-auth</span><br><span class="line">....L....  c /etc/pam.d/system-auth</span><br><span class="line">S.5....T.  c /etc/security/limits.conf</span><br><span class="line">S.5....T.  c /etc/security/limits.d/20-nproc.conf</span><br><span class="line">.M.......    /usr/bin/pkexec</span><br><span class="line">S.5....T.  c /etc/sysctl.conf</span><br></pre></td></tr></table></figure><ul><li>S 表示文件长度发生了变化</li><li>M 表示文件的访问权限或文件类型发生了变化</li><li>5 表示文件的 MD5 校验值发生了变化</li><li>D 表示设备节点属性发生了变化</li><li>L 表示文件的符号链接发生了变化</li><li>U 表示文件子目录下的设备节点的 owner 发生了变化</li><li>G 表示文件子目录下的设备节点 group 发生了变化</li><li>T 表示文件最后一次的修改时间发生了变化</li></ul><p>一般来讲，如果输出结果中有 ‘M’ 标记出现，那么对应文件可能已经遭受到篡改或替换（注意！不一定是遭受攻击，只是说要你侧重在这些文件上排查）</p><p>不过这个命令有局限性，那就是只能检查通过 RPM 包方式安装的文件；而且如果 RPM 工具遭受攻击，那就不能用这种方法了，这时候你可以从正常的系统上去复制一个 RPM 工具来进行检测</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;不知道大家有没有看过这么一部电影：&lt;/p&gt;
&lt;img src=&quot;/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%AD%E5%8F%97%E6%94%BB%E5%87%BB%E4%B9%8B%E5</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>为什么有了 HTTP 还要 RPC</title>
    <link href="https://xxxsalted.github.io/2024/04/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%86-HTTP-%E8%BF%98%E8%A6%81-RPC/"/>
    <id>https://xxxsalted.github.io/2024/04/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%86-HTTP-%E8%BF%98%E8%A6%81-RPC/</id>
    <published>2024-04-28T07:00:51.000Z</published>
    <updated>2024-04-28T07:06:04.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么有了-HTTP-还要-RPC"><a href="#为什么有了-HTTP-还要-RPC" class="headerlink" title="为什么有了 HTTP 还要 RPC"></a>为什么有了 HTTP 还要 RPC</h1><p>哈喽大家好，我是咸鱼</p><p>随着互联网技术的发展，分布式架构越来越被人们所采用。在分布式架构下，<strong>为了实现复杂的业务逻辑，应用程序需要分布式通信实现远程调用</strong></p><p>而这时候就需要一种协议来支持远程过程调用，以便实现不同应用程序之间的数据交换和信息传递。其中常用的协议包括 HTTP 协议和 RPC 协议</p><p>HTTP 协议和 RPC 协议都是用于计算机之间进行通信的协议。那么小伙伴们有没有想过<strong>它们之间有什么区别呢？有了HTTP为什么还要RPC呢？</strong></p><p>为了解答上面的疑问，我们先从这两个协议的介绍开始</p><h2 id="HTTP-和-RPC"><a href="#HTTP-和-RPC" class="headerlink" title="HTTP 和 RPC"></a>HTTP 和 RPC</h2><ul><li>HTTP</li></ul><p>学过计算机网络的小伙伴们相信对下面这段话再熟悉不过了：</p><p><strong>HTTP（HyperText Transfer Protocol，超文本传输协议）协议</strong>，主要用于在 Web 浏览器和 Web 服务器（B&#x2F;S架构）之间传输超文本标记语言（HTML）文件，支持客户端和服务器之间的通信</p><p>HTTP 协议是网络传输协议中应用最为广泛的一种，HTTP 协议基于请求&#x2F;响应模型，通过在客户端和服务器之间交换请求和响应来传输数据。</p><p>它简单、灵活、可扩展，而且最重要的是——它是一种无状态协议，也就是说，每次客户端和服务器之间交换请求和响应时，HTTP协议都是一张白纸，不会记住之前的任何信息</p><p>而无状态协议重要的一点优势是可靠，即使某个请求失败或者丢失，也不会影响到其他请求的处理</p><p>HTTP 协议使用文本格式进行传输，方便开发人员去阅读和调试，又因具有可跨平台、可扩展、可缓存、可重用等优点被广泛应用于 Web 开发中，常用于网页访问、图片加载等场景</p><p>看到这里，小伙伴可能会想，<strong>HTTP 这么神，它真的就一点缺点没有吗？</strong>当然肯定是有的</p><p>前面我们说到 HTTP 协议是无状态的，也就是说每次请求和响应之间是没有关联的，服务器不会记住之前的任何信息，所以会导致每次请求都要重新建立连接</p><p>在处理一些长连接或高并发的场景时，每次请求都需要重新建立连接，而这个过程不但会增加了网络开销和延迟，还会消耗服务器的资源，从而降低了效率。如果使用有状态的协议，服务器可以记住之前的信息，避免了重复建立连接的过程</p><p>除此之外，因为 HTTP 协议最初设计的目的是为了在客户端和服务器之间传输 HTML 文档，即数据传输格式是基于文本的</p><p>所以说 HTTP 协议不支持类型化的数据传输和自定义协议扩展，请求和响应的格式是固定的，这就导致了它不能很好地支持自定义数据结构和复杂逻辑</p><p>简单来说，HTTP 协议有点“死板”</p><ul><li>RPC</li></ul><p><strong>RPC（Remote Procedure Call，远程过程调用）协议是一种进程间通信协议</strong>，用于实现分布式应用程序之间的远程调用，使得不同的应用程序可以像调用本地程序一样调用远程程序</p><p><strong>RPC 协议基于函数调用模型</strong>。在 RPC 协议中，客户端调用远程服务器上的函数时，会将参数打包成消息并发送给服务器，服务器接收到消息后，解包参数并执行相应的函数，最后将结果打包成消息并发送回客户端、</p><p>这这个过程对于客户端来说是透明的，就像调用本地函数一样，即 RPC 可以实现在不同的进程或不同的机器之间进行函数调用</p><p>它具有网络传输速度快、协议扩展性好等优点（因为采用了二进制数据传输格式，相对于HTTP等基于文本的协议，二进制格式传输数据更加高效）。不但如此，RPC 的设计初衷就是支持多种数据格式和传输协议，这使得它可以很好地支持复杂的数据结构和逻辑</p><p>此外，RPC 协议可以使用更高效的编码和传输协议，还可以使用异步调用来提高响应速度</p><p>我们常说，<strong>世上没有完美的东西，HTTP 如此，RPC 也是如此</strong></p><p>与 HTTP 相比，RPC 更加复杂。为了实现 RPC 协议的设计目标（高效、灵活和可扩展），它需要定义更多的接口和协议，同时需要更多的配置和管理。当然这会提高开发和运维的难度</p><p>为了支持跨语言、跨平台的远程调用，RPC 通常不包含安全机制。如果不采取额外的安全措施，就有可能存在身份伪造、数据篡改、拒绝服务等安全问题</p><p>为了保护网络安全，我们可以在 RPC 中实现额外的安全措施：</p><ol><li>例如使用SSL&#x2F;TLS协议进行加密通信</li><li>使用数字证书进行身份验证</li><li>使用访问控制列表进行授权</li><li>进行安全审计和漏洞扫描</li></ol><p>前面我们说到，RPC 通常采用二进制数据传输格式，而不是基于文本的格式。二进制格式虽然传输效率高，但是需要额外的计算资源来序列化和反序列化参数和返回值</p><blockquote><p> 在 RPC 中，客户端和服务器之间需要将参数和返回值打包成二进制数据，并在网络上传输。这个过程需要将参数和返回值转换为二进制格式，并进行压缩和编码，以减少数据传输量</p><p> 对于接收方，需要将接收到的二进制数据解码并转换为原始数据格式。这个过程需要消耗额外的计算资源</p><p> 因此，RPC需要额外的网络带宽和计算资源来序列化和反序列化参数和返回值</p></blockquote><h2 id="HTTP-和-RPC-的区别"><a href="#HTTP-和-RPC-的区别" class="headerlink" title="HTTP 和 RPC 的区别"></a>HTTP 和 RPC 的区别</h2><ol><li>目的不同</li></ol><p>HTTP 是一种无状态的协议，它的主要目的在客户端和服务器之间交换请求和响应来传输文本内容</p><p>RPC 是一种有状态的协议，它的主要目的是在客户端和服务器之间传递信息并调用远程函数</p><ol start="2"><li>传输方式不同</li></ol><p>HTTP 使用文本（如 HTML、XML、JSON等）作为载体，并且使用明文传输</p><p>RPC可以使用多种格式传输（例如二进制格式），并且可以使用额外的安全加密技术保证传输安全性</p><ol start="3"><li>通信方式不同</li></ol><p>HTTP 使用的是请求&#x2F;响应模型，客户端向服务器发送请求并等待响应。客户端发送一个请求，服务器返回一个响应</p><p>RPC 使用的是调用&#x2F;返回模型，客户端调用服务器上的远程函数并等待返回结果。RPC 支持多种不同的调用方式，如同步调用、异步调用、流式调用等</p><h2 id="有了-HTTP-为什么还要-RPC？"><a href="#有了-HTTP-为什么还要-RPC？" class="headerlink" title="有了 HTTP 为什么还要 RPC？"></a>有了 HTTP 为什么还要 RPC？</h2><p>虽然 HTTP 已经成为了网络通信的重要标准之一而且被广泛应用于互联网上的各种场景，但是在某些情况下，它并不能满足用户的需求</p><p>例如在一些复杂的分布式应用场景下（分布式系统中的服务调用、微服务架构中的服务间通信等），RPC 协议要比 HTTP 协议更适合</p><p>咸鱼将从以下几点来阐述一下 RPC 为什么更适合复杂的分布式应用场景</p><p><strong>从时效性度来看</strong></p><ul><li>HTTP 协议的数据格式有一定的局限性，比如只能传输文本，传输效率低下</li><li>HTTP协议是基于请求&#x2F;响应模型，每次请求都需要建立一个新的连接，这样会增加网络开销</li><li>相比于 HTTP 协议，RPC 协议通常使用二进制数据格式进行传输，通常<strong>具有更高的传输效率和更低的网络延迟</strong></li><li>相比于 HTTP 协议，RRPC协议还支持异步调用和批量调用等高级特性，可以提高系统的性能和吞吐量</li></ul><p><strong>从安全性来看</strong></p><ul><li>HTTP 是一种文本协议，数据传输使用的是明文，这样就容易被中间人窃听或者篡改数据（不过可以使用SSL&#x2F;TLS 协议对数据进行加密和认证）</li><li>相比于 HTTP 协议，RPC 支持传输各种类型的数据（比如二进制），<strong>可以更快灵活地传输大量数据</strong>，并且也可以加密传输以保证安全性</li></ul><p><strong>从场景复杂度来看</strong></p><ul><li>在复杂的业务逻辑和数据结构场景下，通常需要进行多次请求和响应操作，而 HTTP 作为无状态协议无法保持会话状态，每次请求和响应都需要重新建立连接和传输数据，这会导致网络延迟和性能下降</li><li>HTTP协议的请求和响应通常是基于文本或二进制数据格式，无法直接支持复杂的数据结构，例如对象、数组、枚举等</li><li>相比于 HTTP 协议，RPC 是一种有状态协议，而且 RPC 可以通过定义接口和方法来封装业务逻辑，使得客户端可以通过简单的调用来完成复杂的操作</li><li>相比于 HTTP 协议，RPC协议是一种面向对象的协议，它可以直接支持复杂的数据结构，例如对象、数组、枚举等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么有了-HTTP-还要-RPC&quot;&gt;&lt;a href=&quot;#为什么有了-HTTP-还要-RPC&quot; class=&quot;headerlink&quot; title=&quot;为什么有了 HTTP 还要 RPC&quot;&gt;&lt;/a&gt;为什么有了 HTTP 还要 RPC&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>socket 到底是个啥</title>
    <link href="https://xxxsalted.github.io/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/"/>
    <id>https://xxxsalted.github.io/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</id>
    <published>2024-04-28T06:52:25.000Z</published>
    <updated>2024-04-28T06:58:49.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket-到底是个啥"><a href="#socket-到底是个啥" class="headerlink" title="socket 到底是个啥"></a>socket 到底是个啥</h1><p>哈喽大家好，我是咸鱼</p><p>我相信大家在面试过程中或多或少都会被问到这样一个问题：<strong>你能解释一下什么是 socket 吗</strong></p><p>我记得我当初的回答很是浅显：socket 也叫套接字，用来负责不同主机程序之间的网络通信连接，socket 的表现方式由四元组（ip地址：端口）组成</p><p>那么今天，咸鱼将跟大家打开 socket 的神秘大门，不但要搞清楚 socket 的概念，最好还能够了解它的底层实现</p><p>我们首先查看一下 socket 的翻译</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411094900903.png" class="" title="image-20230411094900903"><p>我们看到，socket 可以翻译成插座、插头，那现在请想象这么一个场景：<strong>给手机充电时，你将充电插头插入电源插座里面，是不是意味着插座与充电插头连接起来了</strong></p><p>在计算机世界中，socket 翻译成套接字，通过 socket 我们可以与某台服务器进行连接，而建立连接的过程，你可以脑补成将充电插头插进插座的过程</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411100858598.png" class="" title="image-20230411100858598"><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411131125668.png" class="" title="image-20230411131125668"><h2 id="socket-使用场景"><a href="#socket-使用场景" class="headerlink" title="socket 使用场景"></a>socket 使用场景</h2><p>假设我们想要将数据从 A 电脑的某个进程传送到 B 电脑的某个进程（比如咸鱼用微信发信息给冰冰）</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411102834038.png" class="" title="image-20230411102834038"><p>那么在与对方聊天的过程中，其实就是这两台电脑中的微信进程相互传输数据的过程</p><p>在这个过程中，两台电脑各自调用 socket 方法，然后会得到一个 fd 句柄（socket_fd），这个 fd 句柄就相当于 socket 的身份证号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket_fd = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure><p>得到 fd 句柄之后：</p><ol><li>服务端执行 bind()、listen()、accept() 方法等待客户端建立连接的请求</li><li>客户端执行 connect() 方法向服务端发起连接</li><li>连接建立起来之后，两端都可以执行 send()、recv() 方法来互相传递数据</li></ol><p>PS：对于不同的传输层协议，上面这个过程是不一样的，详情可以查看我之前的文章《python 网络编程》</p><p><strong>TCP 协议</strong></p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230216084702695.png" class="" title="image-20230216084702695"><p><strong>UDP 协议</strong></p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230216090008989.png" class="" title="image-20230216090008989"><h2 id="socket-设计"><a href="#socket-设计" class="headerlink" title="socket 设计"></a>socket 设计</h2><p>我们知道了 socket 是用来实现网络传输功能的，它负责不同主机进程之间的网络通信连接</p><p>我将上面的问题改一下，把 <strong>”socket 是什么“</strong> 改成 <strong>”如果让你来实现一个网络传输功能，你会怎么设计“</strong></p><p>网络传输功能，简单点来讲就是两端服务器之间进行网络通信并互相收发数据，收发数据也就是读写数据</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411105543022.png" class="" title="image-20230411105543022"><p>首先我们会遇到第一个问题：<strong>茫茫互联网中你怎么能找到那台梦中情机</strong></p><p>聪明的你肯定会想到——ip地址！我们用 ip 地址来定位电脑</p><p>找到了你的梦中情机之后，你会发现，<strong>一台电脑上面这么多进程，我怎么才能找到与我通信的那个进程（比如说微信）</strong></p><p>聪明的你很快就想到了用端口号（port）</p><p>可以这么理解，ip 地址是用来定位街区的，而端口号 port 对应这个街区中的门牌号，通过 ip +port 的组合，你可以在茫茫互联网中找到属于你的梦中情机并且与之通信</p><p>所以<strong>你在设计网络传输功能初期，定义了一个数据结构 sock，sock 里面包含了 ip 和 port 字段（假设用 C 语言实现）</strong></p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411110520452.png" class="" title="image-20230411110520452"><p>在 Linux 中（以 CentOS 7举例），在头文件<code>/usr/include/netinet/in.h</code>可以看到负责套接字地址的 sock 结构体</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230412153930775.png" class="" title="image-20230412153930775"><blockquote><p><code>sin_family</code> 字段为 AF_INET，<code>sin_port</code> 表示端口号，<code>sin_addr</code> 表示 IPv4 地址，是一个 <code>struct in_addr</code> 类型的结构体</p><p><code>sin6_family</code> 字段为 AF_INET6，<code>sin6_port</code> 表示端口号，<code>sin6_addr</code> 表示 IPv6 地址，是一个 <code>struct in6_addr</code> 类型的结构体</p></blockquote><p>解决了定位问题之后，我们知道在计算机网络中有很多协议，这些协议规定了计算机之间的通信方式</p><p>比如你是选用可靠的 TCP 协议去进行网络通信，还是相对不可靠的 UDP 协议</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411111356888.png" class="" title="image-20230411111356888"><p>不同的网络协议还对应着不同的网络通信场景，如果你选择了 TCP协议，你还得考虑例如滑动窗口、超时重传这些场景</p><p>所以有了 ip 和 port 还不行，你还<strong>需要定义新的数据结构用来维护网络协议以及对应的网络场景</strong>。</p><p>又因为不同的网络协议中有一些功能相似的方法（例如收发数据），于是你决定将不同协议中的公共的部分提取出来，通过”继承“的方式来实现功能复用</p><p>所以可以先定义一个名为 sock 的数据结构，然后定义”继承“ sock 的各类 sock </p><p>**PS：Linux 内核是用 C 语言实现的，在 C 语言中没有继承这个概念，你可以简单将这个继承理解成 xx_sock 基于 sock 进行了扩展，xx_sock 是 sock 的进阶版 **</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411135249425.png" class="" title="image-20230411135249425"><ul><li><code>sock</code>：最基础的结构，用来维护任何网络协议都会用到的<strong>收发数据缓冲区</strong>（公用部分）</li><li><code>inet_sock</code>：负责网络传输功能的 sock，在 sock 基础上加了 TTL（网络生存时间）、ip 地址和端口号这些跟网络传输相关的字段信息</li><li><code>inet_connection_sock</code>：面向连接的 sock，在 <code>inet_sock</code> 基础上添加了面向连接的协议里相关字段，比如 accept 队列，数据包分片大小，握手失败，重试次数等；虽然我们现在提到面向连接的协议就是指 TCP，但从设计上 Linux 需要支持扩展其他面向连接的新协议，比如 SCTP 协议，所以说 <code>tcp_sock</code> 则是在这个基础上实现的真正的 TCP 协议专用 sock 结构</li></ul><p>上面例子中的这些 sock 都可以在系统上直接找到，以 CentOS 7 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#inet_sock</span></span><br><span class="line">/usr/src/kernels/内核版本.debug/include/net/inet_sock.h</span><br><span class="line"></span><br><span class="line"><span class="comment">#inet_connection_sock</span></span><br><span class="line">/usr/src/kernels/内核版本.debug/include/net/inet_connection_sock.h</span><br></pre></td></tr></table></figure><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411135728772.png" class="" title="image-20230411135728772"><p>现在你用代码实现了这一堆数据结构——sock，不同的 sock 分别实现自己职责内的功能（负责面向连接的数据结构 <code>inet_connection_sock</code>、负责 UDP 协议的数据结构 <code>udp_sock</code> 等等）</p><p>但是你需要这些 sock 去跟硬件网卡交互才能实现网络传输的功能，既然需要跟硬件交互，那就说明<strong>需要比较高的操作系统权限</strong></p><p>同时考虑到性能和安全，这套数据结构不能放在用户态，需要给它放<strong>到系统内核里面</strong></p><p>既然这套数据结构在内核里，处在用户态的程序想要用这套数据结构来实现网络传输功能该怎么办呢？</p><p>除此之外，处在用户态的程序并不关心也不知道你这套数据结构在底层内核是怎么操作的，功能是怎么实现的，它只关心结果</p><p>于是你想到了用接口调用的方式——你<strong>将一个个功能抽象一个个接口，以后别人只需要调用这些接口，就可以让内核中这一大堆复杂的数据结构去实现指定功能</strong></p><p>又因为在 <strong>Linux 中一切皆文件</strong>，你索性将这些 sock 封装成文件，当用户态的程序去调用你提供的接口时，需要先创建一个 sock 文件</p><p>这个新生成的 sock 文件有一个文件句柄 fd，用户态的程序只需要拿着这个 fd 就可以对内核中的 sock 进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sock 文件句柄 socket_fd</span></span><br><span class="line">socket_fd = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411143421572.png" class="" title="image-20230411143421572"><p>上面有说到，你将不同的数据结构（<code>inet_sock</code>、<code>tcp_sock</code> 等等）抽象成一个个 API 接口，以后别人只需要调用这些 API 接口就可以驱动我们写好的这一大堆复杂的数据结构去进行网络传输</p><p>下面列出了一些常见的接口：</p><ul><li>send</li><li>recv</li><li>bind</li><li>listen</li><li>connect</li></ul><p>到这里，整个网络传输功能就已经基本实现了。上面列举出来的这些方法，其实就是 socket 提供出来的接口</p><p>到这里，我们对 socket 有了一个更深的了解——socket 其实相当于一个接口层，它处在内核态和用户态之间：</p><ul><li>向上用户态<ul><li>为处在用户态的程序提供 API 接口，方便用户态程序实现网络传输功能</li></ul></li><li>向下内核态<ul><li>对网卡进行操作，负责网络传输工作</li></ul></li></ul><p>或者你也可以这么理解，<strong>处在用户态的程序通过 socket 提供的接口，将网络传输的这部分工作外包给了 Linux 内核</strong></p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411145643708.png" class="" title="image-20230411145643708"><p>我们以 tcp 协议为例子来看下 python 中是如何操作 socket 的</p><ul><li>客户端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个 socket 并获得 socket 文件的句柄</span></span><br><span class="line">socket_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用 connect 接口进行连接</span></span><br><span class="line">socket_fd.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用 send 接口进行数据传输</span></span><br><span class="line">socket_fd.send(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用 close 接口关闭 socket</span></span><br><span class="line">socket_fd.close()</span><br></pre></td></tr></table></figure><p>在客户端中，程序首先调用 socket 提供的 socket 方法创建一个 socket 文件来获得 socket 句柄，然后调用 connect 方法，这时候内核会根据 socket_fd 找到对应的 sock 文件</p><p>再根据文件里的信息找到处在内核的 sock 结构，通过 sock 结构与服务端进行三次握手建立连接</p><p>连接建立好之后，客户端调用 send 方法来进行数据传输，sock 中定义了一个发送缓冲区和接收缓冲区，其实就是一个链表，链表上面放着一个个等待发送或接收的数据</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们再次回到那个问题——socket 是什么？</p><p><strong>sock（或 socket）是操作系统内核提供的一种数据结构，用于实现网络传输功能</strong></p><p><strong>基于不同的网络协议以及应用场景，衍生了各种类型的 sock，每个网络层协议都有相应的 sock 结构体来管理该层协议的连接状态和数据传输。各类 sock 操作硬件网卡，就实现了网络传输的功能</strong></p><p><strong>为了将这些功能让处在用户态的应用程序使用，不但引入了 socket 层，还将各类功能的实现方式抽象成了 API 接口，供应用程序调用</strong></p><p><strong>同时将 sock 封装成文件，应用程序就可以在用户层通过文件句柄（socket fd）来操作内核中 sock 的网络传输功能</strong></p><p><strong>这个 socket fd 是一个 int 类型的数字，而 socket 中文翻译叫做套接字，结合这个 socket fd，你是不是可以将其理解成：一套用于连接的数字</strong></p><p><strong>而 socket 分 Internet socket 和 UNIX Domain socket，两者都可以用于不同主机进程间的通信和本机进程间的通信，只是前者采用的是基于 IP 协议的网络通信方式，而后者采用的是基于本地文件系统的通信方式</strong></p><p>关于 UNIX Domain socket，可以通过 <code>netstat -x</code> 查看</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411153429695.png" class="" title="image-20230411153429695">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;socket-到底是个啥&quot;&gt;&lt;a href=&quot;#socket-到底是个啥&quot; class=&quot;headerlink&quot; title=&quot;socket 到底是个啥&quot;&gt;&lt;/a&gt;socket 到底是个啥&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;我相信大家在面试过程中或</summary>
      
    
    
    
    
    <category term="网络" scheme="https://xxxsalted.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>博客添加评论功能及定制化样式</title>
    <link href="https://xxxsalted.github.io/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/"/>
    <id>https://xxxsalted.github.io/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/</id>
    <published>2024-04-28T02:56:16.000Z</published>
    <updated>2024-04-28T03:09:34.111Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>在搭建了博客并换了主题之后，发现有许多细节方面的东西还需要完善和定制化一下，比如说行距和引用的样式我不是很喜欢，以及没有评论功能。</p><p>于是决定自己动手，说干就干。</p><blockquote><p>PS：下文的修改操作仅限于博客主题（Klise），不同主题的配置文件可能会不一样，不过大体思路都是差不多的，即修改 <code>scss/config/ejs</code> 文件。</p></blockquote><h2 id="Valine-评论系统"><a href="#Valine-评论系统" class="headerlink" title="Valine 评论系统"></a>Valine 评论系统</h2><p>搜了网上的教程，决定采用 <a href="https://valine.js.org/">Valine </a>来实现博客评论功能。</p><img src="/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/image-20240428085208682.png" class="" title="image-20240428085208682"><p>因为 Valine 的存储是基于 <a href="https://www.leancloud.cn/">LearnCloud</a> 的，所以我们要先注册一个 LeanCloud 账号。</p><p>登录之后进入【控制台】点击【创建应用】</p><img src="/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/image-20240428085716880.png" class="" title="image-20240428085716880"><p>应用创建好以后，进入刚刚创建的应用，选择左下角的【设置】 &gt; 【应用凭证】，然后就能看到你的 <code>APP ID</code> 和 <code>APP Key</code> 了：</p><img src="/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/image-20240428085934208.png" class="" title="image-20240428085934208"><p>进入到你的博客根目录，找到你对应主题的主配置文件 <code>_config.yml</code>，添加关于 Valine 的配置字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 开启评论系统</span></span><br><span class="line">  <span class="built_in">type</span>: valine <span class="comment"># 采用哪种评论系统</span></span><br><span class="line">  button: <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  appid: <span class="comment"># 从 LeanCloud 的应用中得到的 appKey</span></span><br><span class="line">  appkey: <span class="comment"># 从 LeanCloud 的应用中得到的 appId.</span></span><br><span class="line">  placeholder: <span class="string">&quot;说点什么吧！&quot;</span> <span class="comment"># 评论框占位提示符</span></span><br><span class="line">  path: window.location.pathname <span class="comment"># 当前文章页路径，用于区分不同的文章页，以保证正确读取该文章页下的评论列表。</span></span><br><span class="line">  avatar: /img/redcat.jpg <span class="comment"># Gravatar 头像</span></span><br><span class="line">  guest_info: nick,mail,<span class="built_in">link</span> </span><br><span class="line">  pageSize: 10 <span class="comment"># 评论列表分页，每页条数。</span></span><br><span class="line">  recordIP: <span class="literal">false</span> <span class="comment"># 是否记录评论者IP</span></span><br><span class="line">  serverURLs: <span class="comment"># 该配置适用于国内自定义域名用户, 海外版本会自动检测</span></span><br><span class="line">  emojiCDN: <span class="comment"># 设置表情包 CDN</span></span><br><span class="line">  enableQQ: <span class="literal">true</span> <span class="comment"># 是否启用昵称框自动获取QQ昵称和QQ头像, 默认关闭</span></span><br></pre></td></tr></table></figure><p>配置好之后进入 <code>Git bash</code> 窗口，重新生成一下静态文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>然后在本地测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>但是<strong>发现没有生效</strong>，一开始我还以为配置格式不对（yaml 格式要求比较严格），再三重复确认了格式没问题之后，还是没有生效。</p><p>我就在想是不是没有渲染出来，然后去到主题目录下的 <code>layout</code> 目录，发现了 <code>valine.ejs</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;博客根目录&gt;\Klise\layout\partials\_comments\valine.ejs</span><br></pre></td></tr></table></figure><img src="/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/image-20240428092859252.png" class="" title="image-20240428092859252"><p>打开一看发现里面居然没有内容，然后网上搜了下资料，把相关内容复制粘贴了进去。</p><p>结果发现还是不行，是不是没有去调用这个 ejs 文件？</p><p>打开 <code>&lt;博客根目录&gt;\Klise\layout\partials\_comments\index.ejs</code> 文件查看验证一下，果然如此。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- <span class="title function_">partial</span>(<span class="string">&#x27;partials/_comments/waline&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure><p>因为我们用的是 Valine，所以把 <code>partials/_comments/waline</code> 改成 <code>partials/_comments/valine</code> 即可。</p><p>再试一下，成功了！</p><img src="/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/image-20240428093727334.png" class="" title="image-20240428093727334"><h2 id="样式定制化"><a href="#样式定制化" class="headerlink" title="样式定制化"></a>样式定制化</h2><p>正文默认的行间距我不是很满意，所以打算改一下，打开我们的博客网页然后点击 <code>F12</code> 查看网页元素。</p><p>发现正文内容的样式字段在 <code>post</code> 类下的 <code>p</code> 标签中，而且在 <code>main.css</code> 文件里面。</p><img src="/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/image-20240428095758739.png" class="" title="image-20240428095758739"><p>但是这个 <code>main.css</code> 是动态生成的，即 hexo 生成 public 目录的时候会去找 <code>主题\source</code> 目录下的 sass 文件然后生成 <code>main.css</code> 文件。</p><p>所以我们想要修改样式，就必须找到标签样式对应的 sass 文件。</p><p>我们找到主题目录下的 <code>main.scss</code> 文件，发现他还引用了其他的 sass 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;博客根目录&gt;\themes\Klise\source\css\main.scss</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Import sass files</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;partials/fonts&quot;</span>,<span class="string">&quot;partials/base&quot;</span>,<span class="string">&quot;partials/layout&quot;</span>,<span class="string">&quot;partials/post&quot;</span>,<span class="string">&quot;partials/miscellaneous&quot;</span>,<span class="string">&quot;partials/dark&quot;</span>;</span><br></pre></td></tr></table></figure><p>然后一个一个去找，最后在 <code>_post.scss</code> 文件下发现了对应的配置字段。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p>接下来修改引用样式对应的配置，原本引用样式是两端对齐的方式，而且还是斜体，我不是很喜欢。</p><p>发现还是在 <code>_post.scss</code> 文件下，修改如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">blockquote</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后重新生成静态文件并在本地验证，没什么问题就把新修改的内容部署到 Git 上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;在搭建了博客并换了主题之后，发现有许多细节方面的东西还需要完善和定制化一下，比如说行距和引用的样式我不是很喜欢，以及没有评论功能。&lt;/p&gt;
&lt;p&gt;于是决定自己动手，说干就干。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：下文的修改操作</summary>
      
    
    
    
    
    <category term="博客" scheme="https://xxxsalted.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>又重新搭了个个人博客</title>
    <link href="https://xxxsalted.github.io/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xxxsalted.github.io/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-04-28T02:55:28.000Z</published>
    <updated>2024-04-28T03:09:31.935Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>前段时间看到一个学弟写了篇用 Hexo 搭建博客的教程，心中沉寂已久的激情重新被点燃起来。（以前搞过一个个人网站，但是因为种种原因最后不了了之）</p><p>于是花了一天时间参考教程搭了个博客网站，我的博客网址是：<a href="https://xxxsalted.github.io/">https://xxxsalted.github.io/</a></p><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240426212343889.png" class="" title="image-20240426212343889"><p>下面是相关教程。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>俗话说：”工欲善其事必先利其器”，在搭建个人博客之前我们先要把环境准备好。</p><ul><li>Github 准备</li></ul><p>作为全球最大的程序员同性交友网站（<del>不是</del>），我们首先创建一个 Github 账号，官网地址：<a href="https://github.com/">https://github.com</a></p><p>然后我们下载并安装 Git，官网地址： <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>毕竟是国外地址，我们访问起来可能比较慢，这时候我们可以访问下面的地址来下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.42.0.windows.2/</span><br></pre></td></tr></table></figure><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424091054613.png" class="" title="image-20240424091054613"><ul><li>Node.js 准备</li></ul><p>Node.js 简单来讲是一个 JavaScript 的运行环境，让我们的 JavaScript 代码不需要在浏览器上也能运行。</p><p>下载安装 Nodejs：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><ul><li>环境配置</li></ul><p>下载安装好 Git 和 Node.js 之后，我们在键盘上按下 <code>win+R</code> 键，输入 <code>cmd</code>。</p><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424091629558.png" class="" title="image-20240424091629558"><p>然后在弹出的 cmd 窗口中输入下面的命令，来检验是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line"></span><br><span class="line">npm version</span><br></pre></td></tr></table></figure><ul><li>下载 cnpm</li></ul><p>npm 是 Node.js 的安装包管理器，但是由于限制我们有时候通过 npm 下载东西会特别的慢，这时候我们就需要换一个国内的下载源并且使用 cnpm 来管理 Node.js。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><ul><li>安装 Hexo</li></ul><p>接下来我们要安装 Hexo ，还是在刚刚弹出的 cmd 窗口中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo</span><br></pre></td></tr></table></figure><ul><li>创建新文件夹</li></ul><p>我们在电脑任意位置创建一个新文件夹（最好别放在 C 盘下且文件名是英文），这个文件夹将用于储存你网站的静态文件。</p><p>比如说我的新建文件夹路径如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\myblog</span><br></pre></td></tr></table></figure><p>然后右键鼠标，打开<code>Git Bash Here</code>，并依次输入以下命令：</p><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424092443228.png" class="" title="image-20240424092443228"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 hexo</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网页文件</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到本地上</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424155016132.png" class="" title="image-20240424155016132"><p>在执行命令的时候出现权限相关问题（<code>npm ERR! &#123; Error: EPERM: operation not permitted, mkdir &#39;C:\Program Files\nodejs\node_cache\_locks&#39;</code>），可以参考下面这篇文章来解决：</p><p><a href="https://www.cnblogs.com/yinxiangzhenlihai/p/15936518.html">https://www.cnblogs.com/yinxiangzhenlihai/p/15936518.html</a></p><p>然后你会发现你的目录下面多了很多文件：</p><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424143956657.png" class="" title="image-20240424143956657"><p>接着打开下面网址验证一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424154951369.png" class="" title="image-20240424154951369"><p>如果你想停止运行，可以在上面的 bash 命令窗口中执行 <code>Ctrl+C</code> 命令。</p><p>到现在我们的个人博客就完成了一半了！</p><h2 id="托管至-GitHub"><a href="#托管至-GitHub" class="headerlink" title="托管至 GitHub"></a>托管至 GitHub</h2><ul><li>仓库创建</li></ul><p>我们登录自己的 Github ，然后在 Github 中新建一个仓库。</p><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424093519086.png" class="" title="image-20240424093519086"><p><strong>注意</strong>: <code>Repository name</code>一定要按照图片上的格式填写，其他的默认即可。</p><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424093601949.png" class="" title="image-20240424093601949"><ul><li>设置免密登录</li></ul><p>为了方便我们本地与 Github 互相通信，我们需要设置 SSH 免密登录。</p><p>首先找到你的 Github 邮箱和用户名，然后在你个人博客的文件夹下右键鼠标，打开<code>Git Bash Here</code>，并依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;github 用户名&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;github 邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后我们检验一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>接着我们在键盘上按下 <code>win+R</code> 键，输入 <code>cmd</code>，在 <code>cmd</code> 窗口里面输入下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查本机是否已经存在 SSH 密钥</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>如果提示：<code>No such file or directory</code> 则输入如下代码，生成 SSH 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;github 邮箱地址&quot;</span></span><br></pre></td></tr></table></figure><p>然后连续敲 3 次回车，最终会生成一个文件在“用户”目录下，打开 “用户” 目录（<code>C:\用户\用户名.ssh</code>）并找到<code>id_rsa.p ub</code>文件。</p><p>用“记事本”打开并复制里面的内容，在  Github 主页的右上角进入 <code>Setting</code> -&gt; 左侧菜单栏 “<code>SSH and GPG keys</code>” -&gt; <code>New SSH Key</code> -&gt; 填写你获得的 <code>SSH Key</code>。</p><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424094409595.png" class="" title="image-20240424094409595"><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424094435711.png" class="" title="image-20240424094435711"><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424094523632.png" class="" title="image-20240424094523632"><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>到了这一步，我们就可以正式地把博客部署到 Git 上了，进入我们前面创建的博客文件夹，然后找到配置文件 <code>_config.yml</code>。</p><img src="/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240424112352199.png" class="" title="image-20240424112352199"><p>下面是我的配置文件的部分内容，大家可以参考一下</p><p>部署路径部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 你的 git 仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>网站相关部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Amoon<span class="string">&#x27;s blog</span></span><br><span class="line"><span class="string">subtitle: &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">description: &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">keywords:</span></span><br><span class="line"><span class="string">author: Ammon</span></span><br><span class="line"><span class="string">language: zh-CN</span></span><br><span class="line"><span class="string">timezone: &#x27;</span>Asia/shanghai<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;</span>https://username.github.io/project<span class="string">&#x27;</span></span><br><span class="line"><span class="string">url:https://xxxsalted.github.io </span></span><br><span class="line"><span class="string">root: /</span></span><br><span class="line"><span class="string">permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="string">permalink_defaults:</span></span><br><span class="line"><span class="string">pretty_urls:</span></span><br><span class="line"><span class="string">  trailing_index: true # Set to false to remove trailing &#x27;</span>index.html<span class="string">&#x27; from permalinks</span></span><br><span class="line"><span class="string">  trailing_html: true # Set to false to remove trailing &#x27;</span>.html<span class="string">&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>我们还需要安装一个插件，打开 Git bash 窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装自动部署工具</span></span><br><span class="line">cnpm install hexo-deployer-git --save </span><br></pre></td></tr></table></figure><p>然后依次执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除 public 缓存文件</span></span><br><span class="line">hexo clean </span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新的网站静态文件到默认设置的 public 文件夹，也可以用 hexo g 命令</span></span><br><span class="line">hexo generate </span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到 github，也可以用 hexo d 命令</span></span><br><span class="line">hexo deploy </span><br></pre></td></tr></table></figure><p>当然，在生成静态文件之后你可以使用 <code>hexo s</code> 命令生成一个本地的 hexo 网站来做相关检验和测试，如果没什么问题就使用 <code>hexo d</code> 命令将其部署到 git 上</p><p>最后我们就可以访问博客啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;前段时间看到一个学弟写了篇用 Hexo 搭建博客的教程，心中沉寂已久的激情重新被点燃起来。（以前搞过一个个人网站，但是因为种种原因最后不了了之）&lt;/p&gt;




&lt;p&gt;于是花了一天时间参考教程搭了个博客网站，我的博客网址是：&lt;a hre</summary>
      
    
    
    
    
    <category term="博客" scheme="https://xxxsalted.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>程序员购车指南</title>
    <link href="https://xxxsalted.github.io/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/"/>
    <id>https://xxxsalted.github.io/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/</id>
    <published>2024-04-26T09:59:02.000Z</published>
    <updated>2024-04-28T01:46:10.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序员购车指南"><a href="#程序员购车指南" class="headerlink" title="程序员购车指南"></a>程序员购车指南</h1><p>哈喽大家好，我是咸鱼。</p><p>爱车可以说是大部分男人的天性，而我对汽车的热情却远不及对手表的钟爱（痴迷劳力士）。以至于我的朋友掏出车钥匙指着上面的苹果树标志跟我介绍奔驰 AMG 系列的强劲性能和马力时，我只能尽量假装自己听懂不让他尴尬。</p><p>不过从今年开始，大数据就时不时给我推一些关于汽车的介绍和评测视频，加上打算给老爸买辆车。为了不被 4S 店忽悠，我逐渐开始了解一些选车和购车的基本知识。</p><p>在搜集了许多资料之后，我写出了这份程序员购车指南，希望对大家有所帮助。</p><h2 id="购车前"><a href="#购车前" class="headerlink" title="购车前"></a>购车前</h2><p>我们在选车的时候，除了考虑价格因素外，最重要的就是要关注车辆的配置参数。比如说油耗、轴距、车辆尺寸、发动机功率等等，那么我们就来看下选车时常见的一些参考参数。</p><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><p><strong>油耗</strong></p><p>首先就是大家最关心的油耗，我们在听到别人评论一辆车的油耗时，都会说”几个油“，意思是这辆车行驶了一百公里消耗了多少升油，也就是【百公里油耗】。</p><p>如果说一辆车百公里 9 个油，意思就是这辆车行驶了 100km，用掉了 9 升油，由此也可以推出每公里花费多少钱。</p><p>假设当前油价为 7元&#x2F;升，百公里 9 个油，那么每公里油钱为 0.63 元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 * 9 / 100 = 0.63（元）</span><br></pre></td></tr></table></figure><p>在不同的行驶环境下。油耗也会有不同，比如高速路和市区，油耗就会有较为明显的差别。</p><p><strong>车辆尺寸（单位：mm）</strong></p><p>车辆的长、宽、高是一部车的基本外形尺寸，其中：</p><ul><li>车身长度是指汽车长度方向两个极端点间的距离，即从前保险杠最凸出的位置到后保险杠最凸出的位置的距离。</li><li>车身宽度是指汽车宽度方向两个极端点间的距离，但是这里不包括外后视镜、转向灯、挡泥板以及轮胎与地面接触变形的部分。</li><li>车身高度是指从地面到汽车最高点的距离，这个最高点包含车顶行李架，但是不包括天线</li></ul><p>一般来讲，车辆尺寸越大表示内部空间越大，舒适性越高</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413095251545.png" class="" title="image-20240413095251545"><p><strong>轴距（单位：mm）</strong></p><p>轴距，就是通过车辆同一侧相邻两车轮的中点，并垂直于车辆纵向对称平面的二垂线之间的距离。简单地说，<strong>就是汽车前轴中心到后轴中心的距离</strong>。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240412134706009.png" class="" title="image-20240412134706009"><p>轴距的长短直接影响汽车的长度，进而影响车的内部使用空间。在车长确定的情况下，轴距是影响乘坐空间最重要的因素。长轴距使乘员的纵向空间增大，将大大增加影响车辆乘坐舒适性的脚部空间。</p><p>不但如此，轴距越长，车辆的抗俯仰和横摆性能越好，但是会导致车辆机动性下降。</p><p><strong>等级划分</strong></p><p>汽车等级的由来可以追溯到汽车行业内部的定位和市场竞争需求。随着汽车行业的发展和不断壮大，车型的种类和数量也逐渐增多，为了更好地满足消费者的需求，厂商开始对不同类型的汽车进行分类和定位。</p><ul><li>北美等级划分标准</li></ul><p>北美地区将车辆划分成以下几类：</p><ol><li>经济型轿车</li><li>次紧凑型车</li><li>紧凑型轿车</li><li>中型轿车</li><li>大型轿车</li><li>豪华轿车</li><li>加长轿车</li><li>敞篷车</li></ol><ul><li>欧洲等级划分标准</li></ul><p>欧洲地区分级采用的是大众汽车的分级方法。大众汽车通过车型平台的大小进行定位划分，分为 A00 级、A0 级、A 级、B 级、C 级和 D 级六个级别。这并非严格意义上的权威通用标准，而是大众品牌内部制定的一套分级方法，后来在德国和欧洲其他地区广泛应用，逐渐成为了欧洲汽车分级的标准</p><p>由于德国大众最先进入到国内与上海汽车厂合资成立上海大众汽车公司，因此我国一般使用大众汽车分级标准进行划分。汽车等级一般是<strong>根据汽车外部的尺寸、内部空间、轴距、排量等参数来进行划分的，其中最主要的判断标准就是轴距。</strong></p><p>汽车分级标准（以轴距为主要判断依据）：</p><ul><li>A00 级：轴距范围在 2 米至 2.3 米之间，发动机排量小于 1 升，例如奥拓。</li><li>A0 级：轴距范围在 2.3 米至 2.5 米之间，排量在 1 升至 1.5 升，例如飞度。</li><li>A 级：轴距范围在 2.5 米至 2.7 米之间，排量在 1.5 升至 2.0 升，例如卡罗拉。</li><li>B 级：轴距范围在 2.7 米至 2.9 米之间，排量在 1.8 升至 2.5 升，例如奥迪 A4、帕萨特。</li><li>C 级：轴距范围在 2.8 米至 3.0 米之间，排量在 2.3 升至 3.0 升，例如奥迪 A6。</li><li>D 级：轴距 3.0 米以上，排量 3.0 升以上，例如劳斯莱斯、宾利。</li></ul><p>汽车分级标准（以车长为主要判断依据）：</p><ul><li>A00 级：3.7 M 以内。</li><li>A0 级：3.7-4.3 M 之间。</li><li>A 级：4.3-4.6 M 之间。</li><li>B 级：4.6-4.9 M 之间。</li><li>C 级：4.9-5.1 M 之间。</li><li>D 级：5.1 M 以上。</li></ul><h3 id="发动机参数"><a href="#发动机参数" class="headerlink" title="发动机参数"></a>发动机参数</h3><p>众所周知，发动机是一辆油车的心脏，是油车的动力源泉。发动机的动力则来源于气缸内部，气缸就是一个把燃料的内能转化为动能的场所。</p><p>简单点来讲，燃料在气缸内燃烧产生的压力推动活塞上下运动，这些运动通过连杆传递给曲轴，最终将线性运动转化为旋转运动，然后，通过变速器和传动轴，将动力传递到驱动车轮上，从而推动汽车前进。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413100747090.png" class="" title="1990年保时捷3512一级方程式发动机"><p><strong>发动机排量（单位：mL）</strong></p><p>其中活塞上下运动过程中所通过的空间容积就叫做<strong>排量</strong>，又因为发动机都有多个气缸，所以发动机的排量就是所有气缸排量之和。</p><p>而根据气缸的排量方式和数量，产生出了不同的类型的发动机，例如直列发动机、V 型发动机、W 型发动机等等</p><p>比如说 V8 发动机就是 8 个气缸采用 V 型排列的发动机</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413134802502.png" class="" title="4.0 排量涡轮增压 V8 发动机"><p><strong>工作方式</strong></p><p>现在的发动机可分为自然吸气式（简称 L）和增压式（简称 T），其中增压式又可分为涡轮增压、机械增压、双增压。</p><p>现在市面上大部分车一般都是自吸式或者涡轮增压式，这里简单介绍下这两种。</p><ul><li>自然吸气</li></ul><p>在不通过任何增压器的情况下，让大气压将空气压入燃烧室的一种形式。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413110734828.png" class="" title="亚洲龙自吸发动机"><p>以四缸发动机为例，一个活塞完成一次工作循环需要经历四个阶段：</p><ol><li>进气行程：此时进气门打开，气缸内产生压力差，导致空气和燃油混合物被吸入气缸。</li><li>压缩行程：进气门关闭，混合气被压缩，活塞上升至最高点并点火。</li><li>燃烧行程：混合气燃烧产生膨胀，推动活塞向下运动，输出动力。</li><li>排气行程：此时排气门打开，废气被排出气缸。</li></ol><p>自然吸气是指在进气行程中，混合气利用气压差自然被吸入气缸；而增压系统则是通过增压器将空气压缩，提高气体压力和密度，使得在气门打开时气体自身的高压以及气压差的作用下增加进气量，从而提高发动机的功率。</p><p>优点：自然吸气发动机在动力输出上的平顺性与响应的直接性上，要远优于增压发动机</p><ul><li>涡轮增压</li></ul><p>涡轮增压发动机是指配备了涡轮增压器的发动机。涡轮增压器实质上是一种空气压缩设备，利用发动机排放的废气能量，通过冲击安装在排气系统中的涡轮，使其高速旋转，进而将增压后的空气压力强制送入气缸中。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413110531888.png" class="" title="奥迪 RS6 双涡轮增压 V8 发动机"><p>由于发动机功率与进气量成正比，因此采用涡轮增压发动机的汽车动力都比较足；而且整个增压过程基本不会消耗发动机本身的动力，因为它利用的是发动机排出的废气。</p><p>优点：动力足、省油、结构简单，安装方便，技术适应性广。</p><p><strong>最大功率（单位：kW）&#x2F; 最大扭矩（单位：N·m）</strong></p><p>最大功率是指一台发动机所能实现的最大动力输出，随着发动机转速的增加，功率也会相应提高。</p><p>一旦达到一定转速，功率就不再增加，因此标注最大功率时通常会同时标明相应的发动机转速。</p><p>通常，我们在谈论汽车功率时会使用另一个单位：马力（PS），例如我们会说某辆车有多少匹马力。</p><p>功率和马力的换算关系是：1 kW&#x3D;1.36 PS。</p><p><strong>简单来说，最大功率影响车辆能达到的最高速度。</strong></p><p>而扭矩则是指发动机在运转时从曲轴端输出的平均力矩。扭矩越大，发动机输出的“劲”越大，曲轴转速的变化也越快，汽车的爬坡能力、起步速度和加速性也越好。</p><p>然而，扭矩随着发动机转速的变化而不同。在某个转速区间内才会产生最大扭矩，这个区间通常在标注最大扭矩时给出。</p><p>举例来说，有些发动机可能在较低转速时就达到或接近最大扭矩，因此起步加速感觉特别强劲，且相对省油；而其他一些发动机则只能在转速较高的情况下达到最大扭矩，只能在超车时感受到加速的快感。</p><p><strong>简单来讲，最大扭矩影响车辆的加速性能。</strong></p><h2 id="购车时"><a href="#购车时" class="headerlink" title="购车时"></a>购车时</h2><p>在彻底了解心仪车型的配置参数和价格之后，我们就可以前往 4S 店进行试驾了。试驾是了解目标车辆的感受和体验的重要环节，绝对不要因为觉得不好意思而犹豫。</p><p>特别是对于家庭用车，最好带上家人一同前往试驾，让他们亲自感受一下后排空间是否足够舒适。</p><p>试驾后觉得不错的，让销售给你出一份报价单，千万别急着订车，一定要多跑几家店，充分了解一下车子的大概优惠行情。</p><p>试驾并了解优惠行情之后，我们就到了买车阶段，不知道大家有没有听过这个故事：买车如果是全款购买，销售全程黑脸，但如果是贷款买车，销售对你毕恭毕敬笑脸相迎，甚至提车仪式都给你搞得非常隆重。</p><p>为何同样是购车，销售的态度会有如此大的差别？这就需要介绍一下全款购车和贷款购车的区别了。</p><h3 id="全款买车"><a href="#全款买车" class="headerlink" title="全款买车"></a>全款买车</h3><p>全款买车只有下面四个费用：</p><ul><li>裸车价</li></ul><p>裸车价到底该怎么算？就是<strong>指导价减去现金优惠</strong>。一定是现金优惠，不是什么综合优惠。</p><p>裸车价尽量往少了谈，这关系到我们交的购置税。</p><ul><li>购置税</li></ul><p>购置税该怎么算？就是<strong>裸车价 ÷ 11.13</strong>。</p><p>注意一定是裸车价 ÷ 11.3，千万不能用指导价 ÷ 11.3。</p><ul><li>保险</li></ul><p>车辆保险只有四项：交强险、车损险、第三责任险和医保外责任用药险。</p><ul><li>上牌费</li></ul><p>4S 店帮你去上牌的费用。车管所的工本费一般是 120 块钱，如果 4S 店收你一两千上牌费的，纯属耍流氓，撑死给它 500 块，多一分都没有（记得让它给你个好看的牌照框）。</p><p>如果价格实在谈不下来，可以选择自己去车管所上牌，就是比较麻烦。</p><h3 id="贷款买车"><a href="#贷款买车" class="headerlink" title="贷款买车"></a>贷款买车</h3><p>一般分为厂家金融贷款和银行分期贷款。</p><ul><li>厂商金融贷款</li></ul><p>有些汽车厂商都会有免息贷款或者贴息贷款的政策（上汽金融、一汽金融等），都是面对自家车提供贷款，主要目的不是为了挣钱，而是以此来提高销量。</p><p>4S 销售顾问也会在电话里头跟你说我们店里现在有贴息甚至免息贷款的政策，实际上一旦你到店里了，销售就会说你资质不够走不了贷款，你只能做银行的分期贷款了。</p><p>因为厂商金融贷款的话 4S 店是赚不了钱的（没利息甚至贴息），所以先把你忽悠到店里，然后再给你推银行分期贷款。</p><ul><li>银行分期贷款</li></ul><p>对于银行分期贷款，可以说是 4S 店最大的收入来源了（银行会把一部分贷款利息返给 4S 店）。</p><p>现在最常见的就是 5 年分期的贷款，4S 店销售会跟你说 5 年分期贷款买车要比全款买车优惠，月供低、利率低，2 年后可以提前还，不收你违约金。乍一听感觉很划算，事实果真如此吗？</p><p>优惠是挺优惠的，但你能保证两年后一定能够存够钱提前还款吗？不会因为一些其他原因把钱花掉了？</p><p>银行和 4S 店就是抓住只有极少数消费者能够提前还款的事实，前期看似你赚了，实则是银行和 4S 店赚了。</p><p>因为大数据显示两年后能提前还款的人不到 40%，外面的消费诱惑大大了，极少有人能够按时提前还款，本以为自己 5 年分期贷款买车 2 年后提前还款能省下几万块钱，结果只能老老实实贷满 5 年还了 5 年的利息。</p><p>如果我们真的要通过银行分期贷款买车，首先最重要的就是自己要会<strong>算利息，确认好贷款利率</strong></p><p>假设我们贷款十万，5 年也就是分 60 期还，那月供就是 2500。那总还款就是 15 万 （2500 X 60 期 &#x3D; 150000）。</p><p>总利息就是 5 万（15万 - 10 万），月利息就是 833.33（5万 ÷ 60），月利率就是 0.83%（5万 ÷ 60 期 ÷ 10万），年利率接近 10%（0.83% X 12个月）。</p><p>可以看到这个利率是非常的高，最好贷款利率不要超过 4%，越低越好。</p><p>学会了算利息之后，我们还要知道<strong>还款的方式 ，一般分为等额本息和等额本金</strong></p><p><strong>等额本息：</strong>贷款总额和贷款利息之和分摊到每个还款月中，每月以相同的金额偿还贷款本息（即每月的总还款额一致，其中利息占比逐月递减，本金占比逐月增加），俗称先息后本。</p><p><strong>等额本金：</strong>每月偿还相同金额的本金，由于剩余本金减少，而利息则随计息本金的减少而逐月递减，所以每月还款额逐月递减，俗称等本等息。</p><p><strong>如果你有提前还款的打算，可以选择等额本金；如果是等额本息，就没必要提前还款了，因为等额本息前几年还的钱大部分是利息，后几年还的才是本金。</strong></p><p>最后一点就是我们要跟 4S 店谈清楚提前还款要不要交违约金，这个看你自己争取了。如果争取到不交违约金或者少交一点违约金，一定要写在合同里，并且是写在贷款合同而不是购车合同里。</p><blockquote><p>网上还有其他人说根本没有提前还款要交违约金这一说，如果有这种情况，可以直接拨打 12378 银保监会的电话</p></blockquote><p>我们再来看下贷款买车比全款买车额外产生的一些费用</p><ul><li>手续费（分情况付）</li></ul><p>如果要是做厂商金融贷款，有免息或者贴息政策的话，可以付这个手续费，一般是两到三千块钱。</p><p>如果你做的是银行分期贷款的话，这个手续费一分都不要出，因为 4S 店已经赚你的利息了。</p><ul><li>利息（要付）</li></ul><p>关于利息和利率的计算，前文有所提到。</p><ul><li>其他费用（不需要付）</li></ul><p>什么综合服务费、PDI 检测费、出库费、解押费等等，这些都是不需要自己付的，如果 4S 店跟你说这些钱你不付的话买不了车，那你转头就走，去另外一家店里买去。</p><table><thead><tr><th>全款买车费用</th><th>贷款买车费用</th></tr></thead><tbody><tr><td>裸车价</td><td>裸车价</td></tr><tr><td>购置税</td><td>购置税</td></tr><tr><td>保险（交强险、第三责任险、车损险、医保外责任用药险）</td><td>保险（交强险、第三责任险、车损险、医保外责任用药险）</td></tr><tr><td>上牌费</td><td>上牌费</td></tr><tr><td>❌</td><td>贷款手续费（看情况交）</td></tr><tr><td>❌</td><td>利息</td></tr></tbody></table><h2 id="购车后"><a href="#购车后" class="headerlink" title="购车后"></a>购车后</h2><p>确认买车后，我们会交定金并签订购车协议，协议上会明确提车日期。</p><p>提车的时候先别急着交钱，先把下面的步骤走好。因为如果交了钱出了 4S 店再发现汽车有问题，4S 店是不会负责的。</p><h3 id="提车前检查"><a href="#提车前检查" class="headerlink" title="提车前检查"></a>提车前检查</h3><p>参考链接：<a href="https://wanchemi.com/hao/tichezhuyi/">2023提车注意事项以及验车的步骤 新手必知！很详细！ - 玩车迷 (wanchemi.com)</a></p><ul><li>验车</li></ul><p>验车时应在光线充足的环境下，光线不足可以用手机自带的LED手电筒补光，一定要擦干水渍再验车，因为水渍会起到遮掩效果。验车时主要检查以下几个项目：</p><ol><li><strong>检查漆面有无明显划痕</strong>。重点检查前后杠这些重灾区。</li><li><strong>检查车辆是否重新补漆</strong>。用手背感受漆面，如感觉漆面发涩，不顺滑，很有可能是补过漆，这种感觉和原厂漆有很明显的区别。</li><li><strong>检查车辆内饰。</strong></li><li><strong>检查车辆生产日期</strong>。生产日期在车身铭牌处，名牌一般在副驾驶 A 柱下方。一般来讲，3 个月内的叫做近期车，6 个月以上称为库存车，如果销售提前告知你并且价格实惠，那么 6 个月以上库龄的车完全可以接受，如销售未提前告知你，建议换车。不然新车价格买库存车，说的就是你冤大头。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417221128988.png" class="" title="image-20240417221128988"><ol start="5"><li><strong>检查轮胎生产日期。</strong>轮胎生产日期由四个数字组成：前面2个数字代表星期，后面2个数字代表年份。比如说 1123 表示轮胎是 2023 年第 11 周生产的。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417220325957.png" class="" title="3906，说明轮胎出厂日期为：06 年第 39 个星期，即9月上旬左右"><ol start="6"><li><strong>检查玻璃生产日期</strong>。挡风玻璃上也有生产日期的标识，如下图，数字代表最近生产年份，点代表生产月份，点在数字左边，说明是上半年生产，用 7 减去黑点数，得出具体年份；如果点在数字右边，说明是下半年生产，用 13 减去黑点数，得出具体年份。如果车窗玻璃距离新车生产日期太远，一年或以上，那么很有可能是车窗玻璃被更换过。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417221437477.png" class="" title="image-20240417221437477"><ol start="7"><li><strong>检查公里数及各种随车工具。</strong>100 公里内都是正常的。</li><li><strong>检查发动机</strong>。启动车辆，检查发动机是否有明显杂音和异常抖动，最好打开前机盖看下有没有渗油漏油的现象。</li><li><strong>检查排气管内壁</strong>。摸一下内壁，如果特别黑的话说明有可能是试驾车。</li></ol><ul><li>付尾款并开发票上保险</li></ul><p>按照合同约定金额付款。在开发票上保险之后记得核对发票金额。</p><ul><li>清点材料</li></ul><p>4S 店需要给我们以下材料：</p><ol><li>购车发票（必须是购车专用发票，共三联）</li><li>车辆出厂合格证（原件）</li><li>保险单</li><li>车辆一致性证书</li><li>车辆三包凭证、使用说明书</li><li>购车合同、贷款合同（贷款买车前提下）</li><li>车钥匙</li><li>前期谈好的赠品</li></ol><ul><li>上牌</li></ul><p>上牌前先买购置税，车管所内部一般有自助缴费机，缴税后拿到完税证明即可办理上牌业务</p><p>上牌大致流程：先领取查验表填写车辆信息，填好查验表和合格证发票登记联放在一起，交给查验员就可以去验车了，验完车直接选号，牌照和行驶证登记证一般当天即出，实在等不及车管所也有牌照邮寄业务。</p><p>需要打临牌的同学记得在未选号之前办理，切记选号后是不能打临牌的。</p><h3 id="正式提车"><a href="#正式提车" class="headerlink" title="正式提车"></a>正式提车</h3><p>牌照到手后，我们就可以正式提车，开开心心地开车走人啦。最后祝大家都能买到自己心仪的汽车！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序员购车指南&quot;&gt;&lt;a href=&quot;#程序员购车指南&quot; class=&quot;headerlink&quot; title=&quot;程序员购车指南&quot;&gt;&lt;/a&gt;程序员购车指南&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;爱车可以说是大部分男人的天性，而我对汽车的热情却远不及对手表的</summary>
      
    
    
    
    
    <category term="生活" scheme="https://xxxsalted.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux systemd 定时任务</title>
    <link href="https://xxxsalted.github.io/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://xxxsalted.github.io/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2024-04-25T11:39:59.000Z</published>
    <updated>2024-04-28T01:46:25.568Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>说到 Linux 定时任务，大家用得最多的就是 crond 服务，但其实 systemd 也有类似的功能。我们不但可以通过 systemd 来管理服务，还能设置定时任务，那就是 systemd timer。</p><p>与 crond 相比，systemd 定时任务具有以下优点：</p><ul><li>更高的精度：systemd 定时任务可以精确到秒，而 crond 只能精确到分钟。</li><li>可以限制资源使用：使用 systemd 定时任务可以设置内存和 CPU 的使用限制，比如最多使用 50% 的 CPU。</li><li>更灵活的配置：systemd 定时任务可以通过条件、依赖关系等进行配置，以控制任务的执行。相比之下，crond 的配置相对简单，灵活性较低。</li></ul><p>举个例子，假设我们要通过 crond 配置多个大文件的远程备份（使用 scp、rsync 或 ftp 的方式），但由于大文件的网络传输时间不确定，因此下一个文件的备份任务开始时间几乎都是按照经验估计的。</p><p>这可能导致上一个任务的网络传输尚未完成，下一个任务已经开始，同时占用网络带宽，然后又启动了下一个任务，形成恶性循环。</p><p>而使用 systemd timer 可以建立任务之间的依赖关系，例如在第一个备份任务完成后再启动第二个备份任务，以此类推。</p><h2 id="systemd-timer-原理"><a href="#systemd-timer-原理" class="headerlink" title="systemd timer 原理"></a>systemd timer 原理</h2><p>systemd 定时任务基于 systemd 的单元管理器。它使用两种类型的单元来管理定时任务：<code>.timer</code> 单元和 <code>.service</code> 单元。</p><ul><li><code>.timer</code> 单元：<ul><li><code>.timer</code> 单元定义了定时规则，包括启动时间、间隔时间等。</li><li>每个 <code>.timer</code> 单元都对应一个或多个关联的 <code>.service</code> 单元。</li></ul></li><li><code>.service</code> 单元：<ul><li><code>.service</code> 单元定义了要在计时器触发时运行的服务或命令。</li><li>当 <code>.timer</code> 触发时，相关联的 <code>.service</code> 单元将被启动。</li></ul></li></ul><p>systemd 定时任务原理是：<strong>systemd 定期检查每个 <code>.timer</code> 单元中定义的定时规则，以确定是否触发相应的定时器。一旦定时器触发，systemd 将启动与该定时器关联的 <code>.service</code> 单元，从而执行预定的任务。</strong></p><p>在正式介绍 systemd 定时任务之前，我们先要了解什么是单元（unit）</p><h2 id="systemd-单元"><a href="#systemd-单元" class="headerlink" title="systemd 单元"></a>systemd 单元</h2><p>简单来讲，单元就是 systemd 的最小管理单位，是单个进程的描述。一个个单元相互调用和依赖，组成一个庞大的任务管理系统。</p><p>systemd 中的 unit 有很多类型，下面是一些常见的 unit 类型：</p><ul><li><code>.service</code>：service 单元，也就是我们常说的系统服务</li><li><code>.target</code>：target 单元，其实就是一堆 unit 的集合，比如常见的 <code>multi-user.target</code></li><li><code>.timer</code>：timer 单元，负责定时任务。</li><li><code>.slice</code>：slice 单元，负责资源的分配。</li></ul><p>每个 unit 都有一个描述文件（unit 负责干什么、怎么干…），它们分散在三个目录。</p><ul><li><code>/lib/systemd/system</code>：系统默认的 unit 文件</li><li><code>/etc/systemd/system</code>：包含用户自定义的 unit 文件，如果设置了开机自启动，则该目录下的 unit 描述文件会创建一个符号链接。</li><li><code>/usr/lib/systemd/system</code>：用户自己定义的 unit 文件，也会包含一些系统默认的 unit 文件</li></ul><blockquote><p>大多数 linux 发行版中 <code>/lib</code> 是  <code>/usr/lib</code>的软链接，所以 1 和 3 其实是同一目录，作用自然应该是相同的。</p></blockquote><p>其实可以简单分成两类：</p><ul><li><code>/etc/systemd/system</code>：用户自定义的 unit 文件</li><li><code>/usr/lib/systemd/system</code>：系统默认的 unit 文件和用户安装软件的 unit 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有 unit</span></span><br><span class="line">$ systemctl list-unit-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 Service unit</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 Timer unit</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span> timer</span><br></pre></td></tr></table></figure><p>关于 systemd unit 相关的内容这里就不细讲了，大家可以看我之前的文章：《<a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247485486&idx=1&sn=fafbbf884603e63308d085d99e5f77e0&chksm=c293086af5e4817cf3c4cea6136cbbbf7689a6b91e32f17259d5f1b23e067fd15ea382891401&token=1980629016&lang=zh_CN#rd">systemctl 命令设置开机自启动失败 </a>》</p><img src="/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/1.jpg" class="" title="image"><h2 id="设置-systemd-定时任务"><a href="#设置-systemd-定时任务" class="headerlink" title="设置 systemd 定时任务"></a>设置 systemd 定时任务</h2><p>有一个检查 https 证书是否过期的脚本 <code>check_https.sh</code>，我们现在需要系统定期执行这个脚本，除此之外，系统在开机之后也会执行这个脚本。</p><p><strong>首先创建一个 service unit</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/lib/systemd/system/check-https.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=check https certificates</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=check_https.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><code>Type=oneshot</code> 表示 service 以一次性（Oneshot）方式运行。这意味着当启动 service 时，它将执行一次，并在完成后退出。</p><p><strong>然后我们创建一个 timer unit</strong></p><p>Service unit 只是定义了如何执行任务，要定时执行这个 Service，还必须定义 Timer unit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/lib/systemd/system/check-https.timer</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Runs check https every day</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnUnitActiveSec=24h</span><br><span class="line">Unit=check-https.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>我们着重来看下 [Timer] 部分：</p><ul><li><code>OnActiveSec</code>：定时任务生效后，多少时间开始执行任务</li><li><code>OnBootSec</code>：系统启动后，多少时间开始执行任务</li><li><code>OnStartupSec</code>：Systemd 进程启动后，多少时间开始执行任务</li><li><code>OnUnitActiveSec</code>：该 unit 上次执行后，等多少时间再次执行</li><li><code>OnUnitInactiveSec</code>： 定时任务上次关闭后多少时间，再次执行</li><li><code>OnCalendar</code>：基于绝对时间，而不是相对时间执行</li><li><code>AccuracySec</code>：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒</li><li><code>Unit</code>：真正要执行的任务，默认是同名的带有<code>.service</code> 后缀的 unit</li><li><code>Persistent</code>：如果设置了该字段，即使定时任务到时没有启动，也会自动执行相应的 unit</li><li><code>WakeSystem</code>：如果系统休眠，是否自动唤醒系统</li></ul><p>上面的 timer 文件里，<code>OnUnitActiveSec=24h</code> 表示 24 小时执行一次任务。</p><p>下面是其他的写法：</p><p>1、在系统启动 15 分钟后执行，并在系统运行时，每周执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnBootSec=15min</span><br><span class="line">OnUnitActiveSec=1w</span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>2、每周周一执行，如果到时定时任务没有启动，会立即执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnCalendar=weekly</span><br><span class="line">Persistent=<span class="literal">true</span></span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>3、每周日凌晨三点执行（时间格式：<code>Year-Month-Day Hour:Minute:Second</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnCalendar=Sun *-*-* 03:00:00</span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html">https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html</a></p><p>然后我们启动这个定时任务，并设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl  daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl start check-https.timer</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> check-https.timer</span><br></pre></td></tr></table></figure><p>其他一些定时任务命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有正在运行的定时任务</span></span><br><span class="line">systemctl list-timers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭定时任务</span></span><br><span class="line">systemctl stop check-https.timer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看定时任务状态</span></span><br><span class="line">systemctl status check-https.timer</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;说到 Linux 定时任务，大家用得最多的就是 crond 服务，但其实 systemd 也有类似的功能。我们不但可以通过 systemd 来管理服务，还能设置定时任务，那就是 systemd timer。&lt;/p&gt;
&lt;p&gt;与 crond</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Linux iowait</title>
    <link href="https://xxxsalted.github.io/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/"/>
    <id>https://xxxsalted.github.io/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/</id>
    <published>2024-04-25T10:57:12.000Z</published>
    <updated>2024-04-28T01:46:35.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="聊聊-Linux-iowait"><a href="#聊聊-Linux-iowait" class="headerlink" title="聊聊 Linux iowait"></a>聊聊 Linux iowait</h1><p>哈喽大家好，我是咸鱼。</p><p>我们在使用 <code>top</code> 命令来查看 Linux 系统整体 CPU 使用情况的时候，往往看的是下面这一列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  68.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure><p>其中，man 手册解释 <code>wa</code> 表示 CPU 在等待 I&#x2F;O 操作（iowait）的时间百分比。</p><img src="/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422133943165.png" class="" title="image-20240422133943165"><p>上面输出显示：CPU 有 68% 的时间消耗在等待 I&#x2F;O 操作完成。按照也就是说有 68% 的 CPU 时间被浪费掉了？可是 Linux 会让 CPU 宝贵的性能白白浪费在耗时的 I&#x2F;O 等待上吗？CPU 在 iowait 状态的时候能执行其他任务吗？</p><p>实际上当 CPU 处于 iowait 状态时，理论上也应该被视为处于 idle （空闲）状态，那 iowait 和 idle 之间有什么联系呢？</p><p>今天我们就来解开这些疑惑，来看看 iowait 到底是什么。</p><p>参考文章：</p><p><a href="https://www.kawabangga.com/posts/5903">https://www.kawabangga.com/posts/5903</a></p><p><a href="https://blog.popkx.com/linux%E7%B3%BB%E7%BB%9Ftop%E5%91%BD%E4%BB%A4%E4%B8%AD%E7%9A%84iowait%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/">https://blog.popkx.com/linux系统top命令中的iowait究竟是什么意思/</a></p><p><a href="https://www.linfo.org/process_state.html">https://www.linfo.org/process_state.html</a></p><p><a href="https://blog.pregos.info/wp-content/uploads/2010/09/iowait.txt">https://blog.pregos.info/wp-content/uploads/2010/09/iowait.txt</a></p><h2 id="进程和-CPU-状态"><a href="#进程和-CPU-状态" class="headerlink" title="进程和 CPU 状态"></a>进程和 CPU 状态</h2><p>我们首先要搞清楚进程的状态和 CPU 状态。</p><p>进程可以分为下面几种状态：</p><ol><li>R：可执行状态（<code>runnable</code>），表示进程正在被 CPU 执行或者处在 CPU 队列中等待分配 CPU 时间片。</li><li>S：可中断睡眠状态（<code>interrupted sleep</code>），表示进程处于睡眠状态，当特定条件或者信号到达时，就会被唤醒，状态也由 S 变成 R。</li><li>D：不可中断睡眠状态（<code>uninterrupted sleep</code>），跟状态 S 类似，只是进程在接收到信号时不会被唤醒。这类状态的进程一般在等待 I&#x2F;O 结束。</li><li>Z：僵尸状态（<code>zombie</code>），表示进程已经终止（死透了），但父进程还没有发出 <code>wait4()</code> 系统调用去读取它的结束信息。（可以理解为进程死【终止】后 父进程要给它收尸【获取该进程的终止状态】）</li><li>T：暂停状态（<code>stopped</code>），表示进程已经暂停（还没死透），是可以恢复的（比如我们给进程发送 SIGSTOP 或者按 CTRL+Z，就可以将进程置为暂停状态，可以通过 bg&#x2F;fg 命令，或者发送 SIGCONT 信号恢复。）</li></ol><img src="/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422132708823.png" class="" title="image-20240422132708823"><p>CPU 一共有四种状态，在任一时刻，CPU 的状态都是四种中的一种。这四种状态是：user，sys，idle，iowait 。比如 <code>sar、top</code>会用百分比表示 CPU 分别处于这四种状态的时间，这四种状态相加的结果是 100%。</p><p>上面提到的 4 种 CPU 状态，其实只有 2 种：</p><ol><li>工作&#x2F;忙碌（busy）</li><li>非工作&#x2F;空闲（idle）</li></ol><p>其中 busy 状态下又分成了：</p><ol><li>user：表示 CPU 目前正在执行用户空间的代码</li><li>system：表示 CPU 目前正在执行内核空间的代码</li></ol><p>idle 状态下又分成了：</p><ol><li>idle：系统中没有 R 状态的进程了</li><li>iowait：系统中没有 R 状态的进程<strong>但有进程卡在 I&#x2F;O 上</strong></li></ol><p>这里可以看到：<strong>iowait 其实可以归类到 idle 状态，本质上表示 CPU 是空闲的，只不过 iowait 表示任务中有等待 I&#x2F;O 操作完成的时间。</strong></p><p>那既然 iowait 也是一种 idle，CPU 在 iowait 状态的时候能执行其他任务吗？下面让我们来看一个例子。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>本次例子在<strong>双核 CentOS 7</strong> 环境下实验。</p><p>我们使用 <code>dd</code> 命令模拟高密集 I&#x2F;O 任务，并且使用 <code>taskset</code> 来为任务指定 CPU</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taskset 后的数字 1 并不是 CPU 的编号，而是一种掩码。</span></span><br><span class="line">taskset 1 <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/sda of=/dev/null bs=1MB</span><br></pre></td></tr></table></figure><p>此时通过 <code>top</code> 命令查看 CPU 使用率，能够发现 CPU0 的 wa 项接近 100，这说明 CPU0 几乎所有的时间都花在等待 I&#x2F;O 操作完成上。</p><img src="/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422140831534.png" class="" title="image-20240422140831534"><p>那么，是不是此时 CPU 就没有精力处理其他任务了呢？我们再输入下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskset 1 sh -c <span class="string">&quot;while true; do true; done&quot;</span></span><br></pre></td></tr></table></figure><p>这条命令是在相同的 CPU 上执行一个死循环，用于模拟计算密集型任务。</p><img src="/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422142013795.png" class="" title="image-20240422142013795"><p>可以看到：CPU0 的 <code>wa</code> 降低为 0 了，与此同时 <code>us</code> 和 <code>sy</code> 的时间占比接近 100% 。CPU 在 iowait 状态的时候能执行了其他任务。</p><p>但这就说明 <code>dd</code> 命令产生的进程没有阻塞在 I&#x2F;O 上吗？并不是。</p><blockquote><p>假设有一个进程需要花 70% 的时间等待 I&#x2F;O 完成，把它放到一个空闲的单 CPU 的系统中，显示的 iowait 是 70%。</p><p>但是我在这个系统中增加一个非 I&#x2F;O 的计算任务，iowait 就变成 0 了。而我们之前的那个进程依然需要花 70% 的时间等待 I&#x2F;O。</p></blockquote><p>一个是从 CPU 角度来看，一个是从进程的角度来看，iowait 是 CPU 的一个状态，它不是进程的状态。<strong>iowait 很低，不能代表进程没有阻塞在 I&#x2F;O 上。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下：</p><p>1）不要搞混 CPU 状态和进程的状态。进程有 R、S、D、Z、T，5 种状态；CPU 有 4 种状态：工作（user、system 两种）和空闲（idle、iowait 两种）。</p><p>2）iowait 表示 CPU 其实是空闲的，不过 CPU 并不是严格意义上的 “空闲”，上面还有等待 I&#x2F;O 操作的进程在执行。</p><p>3）系统 iowait 高：</p><ol><li>系统存在 I&#x2F;O 性能问题：系统正在做的工作，大部分时间都是在等待 I&#x2F;O 了。</li><li>有进程因为等待 I&#x2F;O 操作而阻塞，但这并不意味着系统不可以运行其他进程。</li></ol><p>4）系统 iowait 低不能说明进程没有阻塞在 I&#x2F;O 上。因为 CPU 在 iowait 状态的时候能执行其他进程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;聊聊-Linux-iowait&quot;&gt;&lt;a href=&quot;#聊聊-Linux-iowait&quot; class=&quot;headerlink&quot; title=&quot;聊聊 Linux iowait&quot;&gt;&lt;/a&gt;聊聊 Linux iowait&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xxxsalted.github.io/2024/04/24/hello-world/"/>
    <id>https://xxxsalted.github.io/2024/04/24/hello-world/</id>
    <published>2024-04-24T07:47:03.940Z</published>
    <updated>2024-04-24T07:47:03.941Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
