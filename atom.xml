<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咸鱼运维杂谈</title>
  
  
  <link href="https://xxxsalted.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxxsalted.github.io/"/>
  <updated>2024-04-25T11:41:39.661Z</updated>
  <id>https://xxxsalted.github.io/</id>
  
  <author>
    <name>Ammon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux systemd 定时任务</title>
    <link href="https://xxxsalted.github.io/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://xxxsalted.github.io/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2024-04-25T11:39:59.000Z</published>
    <updated>2024-04-25T11:41:39.661Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>说到 Linux 定时任务，大家用得最多的就是 crond 服务，但其实 systemd 也有类似的功能。我们不但可以通过 systemd 来管理服务，还能设置定时任务，那就是 systemd timer。</p><p>与 crond 相比，systemd 定时任务具有以下优点：</p><ul><li>更高的精度：systemd 定时任务可以精确到秒，而 crond 只能精确到分钟。</li><li>可以限制资源使用：使用 systemd 定时任务可以设置内存和 CPU 的使用限制，比如最多使用 50% 的 CPU。</li><li>更灵活的配置：systemd 定时任务可以通过条件、依赖关系等进行配置，以控制任务的执行。相比之下，crond 的配置相对简单，灵活性较低。</li></ul><p>举个例子，假设我们要通过 crond 配置多个大文件的远程备份（使用 scp、rsync 或 ftp 的方式），但由于大文件的网络传输时间不确定，因此下一个文件的备份任务开始时间几乎都是按照经验估计的。</p><p>这可能导致上一个任务的网络传输尚未完成，下一个任务已经开始，同时占用网络带宽，然后又启动了下一个任务，形成恶性循环。</p><p>而使用 systemd timer 可以建立任务之间的依赖关系，例如在第一个备份任务完成后再启动第二个备份任务，以此类推。</p><h2 id="systemd-timer-原理"><a href="#systemd-timer-原理" class="headerlink" title="systemd timer 原理"></a>systemd timer 原理</h2><p>systemd 定时任务基于 systemd 的单元管理器。它使用两种类型的单元来管理定时任务：<code>.timer</code> 单元和 <code>.service</code> 单元。</p><ul><li><code>.timer</code> 单元：<ul><li><code>.timer</code> 单元定义了定时规则，包括启动时间、间隔时间等。</li><li>每个 <code>.timer</code> 单元都对应一个或多个关联的 <code>.service</code> 单元。</li></ul></li><li><code>.service</code> 单元：<ul><li><code>.service</code> 单元定义了要在计时器触发时运行的服务或命令。</li><li>当 <code>.timer</code> 触发时，相关联的 <code>.service</code> 单元将被启动。</li></ul></li></ul><p>systemd 定时任务原理是：<strong>systemd 定期检查每个 <code>.timer</code> 单元中定义的定时规则，以确定是否触发相应的定时器。一旦定时器触发，systemd 将启动与该定时器关联的 <code>.service</code> 单元，从而执行预定的任务。</strong></p><p>在正式介绍 systemd 定时任务之前，我们先要了解什么是单元（unit）</p><h2 id="systemd-单元"><a href="#systemd-单元" class="headerlink" title="systemd 单元"></a>systemd 单元</h2><p>简单来讲，单元就是 systemd 的最小管理单位，是单个进程的描述。一个个单元相互调用和依赖，组成一个庞大的任务管理系统。</p><p>systemd 中的 unit 有很多类型，下面是一些常见的 unit 类型：</p><ul><li><code>.service</code>：service 单元，也就是我们常说的系统服务</li><li><code>.target</code>：target 单元，其实就是一堆 unit 的集合，比如常见的 <code>multi-user.target</code></li><li><code>.timer</code>：timer 单元，负责定时任务。</li><li><code>.slice</code>：slice 单元，负责资源的分配。</li></ul><p>每个 unit 都有一个描述文件（unit 负责干什么、怎么干…），它们分散在三个目录。</p><ul><li><code>/lib/systemd/system</code>：系统默认的 unit 文件</li><li><code>/etc/systemd/system</code>：包含用户自定义的 unit 文件，如果设置了开机自启动，则该目录下的 unit 描述文件会创建一个符号链接。</li><li><code>/usr/lib/systemd/system</code>：用户自己定义的 unit 文件，也会包含一些系统默认的 unit 文件</li></ul><blockquote><p>大多数 linux 发行版中 <code>/lib</code> 是  <code>/usr/lib</code>的软链接，所以 1 和 3 其实是同一目录，作用自然应该是相同的。</p></blockquote><p>其实可以简单分成两类：</p><ul><li><code>/etc/systemd/system</code>：用户自定义的 unit 文件</li><li><code>/usr/lib/systemd/system</code>：系统默认的 unit 文件和用户安装软件的 unit 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有 unit</span></span><br><span class="line">$ systemctl list-unit-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 Service unit</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 Timer unit</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span> timer</span><br></pre></td></tr></table></figure><p>关于 systemd unit 相关的内容这里就不细讲了，大家可以看我之前的文章：《<a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247485486&idx=1&sn=fafbbf884603e63308d085d99e5f77e0&chksm=c293086af5e4817cf3c4cea6136cbbbf7689a6b91e32f17259d5f1b23e067fd15ea382891401&token=1980629016&lang=zh_CN#rd">systemctl 命令设置开机自启动失败 </a>》</p><p><img src="/.io//image-20240415094008436.png" alt="image-20240415094008436"></p><h2 id="设置-systemd-定时任务"><a href="#设置-systemd-定时任务" class="headerlink" title="设置 systemd 定时任务"></a>设置 systemd 定时任务</h2><p>有一个检查 https 证书是否过期的脚本 <code>check_https.sh</code>，我们现在需要系统定期执行这个脚本，除此之外，系统在开机之后也会执行这个脚本。</p><p><strong>首先创建一个 service unit</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/lib/systemd/system/check-https.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=check https certificates</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=check_https.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><code>Type=oneshot</code> 表示 service 以一次性（Oneshot）方式运行。这意味着当启动 service 时，它将执行一次，并在完成后退出。</p><p><strong>然后我们创建一个 timer unit</strong></p><p>Service unit 只是定义了如何执行任务，要定时执行这个 Service，还必须定义 Timer unit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/lib/systemd/system/check-https.timer</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Runs check https every day</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnUnitActiveSec=24h</span><br><span class="line">Unit=check-https.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>我们着重来看下 [Timer] 部分：</p><ul><li><code>OnActiveSec</code>：定时任务生效后，多少时间开始执行任务</li><li><code>OnBootSec</code>：系统启动后，多少时间开始执行任务</li><li><code>OnStartupSec</code>：Systemd 进程启动后，多少时间开始执行任务</li><li><code>OnUnitActiveSec</code>：该 unit 上次执行后，等多少时间再次执行</li><li><code>OnUnitInactiveSec</code>： 定时任务上次关闭后多少时间，再次执行</li><li><code>OnCalendar</code>：基于绝对时间，而不是相对时间执行</li><li><code>AccuracySec</code>：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒</li><li><code>Unit</code>：真正要执行的任务，默认是同名的带有<code>.service</code> 后缀的 unit</li><li><code>Persistent</code>：如果设置了该字段，即使定时任务到时没有启动，也会自动执行相应的 unit</li><li><code>WakeSystem</code>：如果系统休眠，是否自动唤醒系统</li></ul><p>上面的 timer 文件里，<code>OnUnitActiveSec=24h</code> 表示 24 小时执行一次任务。</p><p>下面是其他的写法：</p><p>1、在系统启动 15 分钟后执行，并在系统运行时，每周执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnBootSec=15min</span><br><span class="line">OnUnitActiveSec=1w</span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>2、每周周一执行，如果到时定时任务没有启动，会立即执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnCalendar=weekly</span><br><span class="line">Persistent=<span class="literal">true</span></span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>3、每周日凌晨三点执行（时间格式：<code>Year-Month-Day Hour:Minute:Second</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnCalendar=Sun *-*-* 03:00:00</span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html">https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html</a></p><p>然后我们启动这个定时任务，并设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl  daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl start check-https.timer</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> check-https.timer</span><br></pre></td></tr></table></figure><p>其他一些定时任务命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有正在运行的定时任务</span></span><br><span class="line">systemctl list-timers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭定时任务</span></span><br><span class="line">systemctl stop check-https.timer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看定时任务状态</span></span><br><span class="line">systemctl status check-https.timer</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;说到 Linux 定时任务，大家用得最多的就是 crond 服务，但其实 systemd 也有类似的功能。我们不但可以通过 systemd 来管理服务，还能设置定时任务，那就是 systemd timer。&lt;/p&gt;
&lt;p&gt;与 crond</summary>
      
    
    
    
    
    <category term="Linux 相关" scheme="https://xxxsalted.github.io/tags/Linux-%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Linux iowait</title>
    <link href="https://xxxsalted.github.io/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/"/>
    <id>https://xxxsalted.github.io/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/</id>
    <published>2024-04-25T10:57:12.000Z</published>
    <updated>2024-04-25T11:41:59.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="聊聊-Linux-iowait"><a href="#聊聊-Linux-iowait" class="headerlink" title="聊聊 Linux iowait"></a>聊聊 Linux iowait</h1><p>哈喽大家好，我是咸鱼。</p><p>我们在使用 <code>top</code> 命令来查看 Linux 系统整体 CPU 使用情况的时候，往往看的是下面这一列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  68.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure><p>其中，man 手册解释 <code>wa</code> 表示 CPU 在等待 I&#x2F;O 操作（iowait）的时间百分比。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/xxxsalted.github.io/master/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422133943165.png" alt="image-20240422133943165"></p><p>上面输出显示：CPU 有 68% 的时间消耗在等待 I&#x2F;O 操作完成。按照也就是说有 68% 的 CPU 时间被浪费掉了？可是 Linux 会让 CPU 宝贵的性能白白浪费在耗时的 I&#x2F;O 等待上吗？CPU 在 iowait 状态的时候能执行其他任务吗？</p><p>实际上当 CPU 处于 iowait 状态时，理论上也应该被视为处于 idle （空闲）状态，那 iowait 和 idle 之间有什么联系呢？</p><p>今天我们就来解开这些疑惑，来看看 iowait 到底是什么。</p><p>参考文章：</p><p><a href="https://www.kawabangga.com/posts/5903">https://www.kawabangga.com/posts/5903</a></p><p><a href="https://blog.popkx.com/linux%E7%B3%BB%E7%BB%9Ftop%E5%91%BD%E4%BB%A4%E4%B8%AD%E7%9A%84iowait%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/">https://blog.popkx.com/linux系统top命令中的iowait究竟是什么意思/</a></p><p><a href="https://www.linfo.org/process_state.html">https://www.linfo.org/process_state.html</a></p><p><a href="https://blog.pregos.info/wp-content/uploads/2010/09/iowait.txt">https://blog.pregos.info/wp-content/uploads/2010/09/iowait.txt</a></p><h2 id="进程和-CPU-状态"><a href="#进程和-CPU-状态" class="headerlink" title="进程和 CPU 状态"></a>进程和 CPU 状态</h2><p>我们首先要搞清楚进程的状态和 CPU 状态。</p><p>进程可以分为下面几种状态：</p><ol><li>R：可执行状态（<code>runnable</code>），表示进程正在被 CPU 执行或者处在 CPU 队列中等待分配 CPU 时间片。</li><li>S：可中断睡眠状态（<code>interrupted sleep</code>），表示进程处于睡眠状态，当特定条件或者信号到达时，就会被唤醒，状态也由 S 变成 R。</li><li>D：不可中断睡眠状态（<code>uninterrupted sleep</code>），跟状态 S 类似，只是进程在接收到信号时不会被唤醒。这类状态的进程一般在等待 I&#x2F;O 结束。</li><li>Z：僵尸状态（<code>zombie</code>），表示进程已经终止（死透了），但父进程还没有发出 <code>wait4()</code> 系统调用去读取它的结束信息。（可以理解为进程死【终止】后 父进程要给它收尸【获取该进程的终止状态】）</li><li>T：暂停状态（<code>stopped</code>），表示进程已经暂停（还没死透），是可以恢复的（比如我们给进程发送 SIGSTOP 或者按 CTRL+Z，就可以将进程置为暂停状态，可以通过 bg&#x2F;fg 命令，或者发送 SIGCONT 信号恢复。）</li></ol><p><img src="https://raw.githubusercontent.com/xxxsalted/xxxsalted.github.io/master/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422132708823.png" alt="image-20240422132708823"></p><p>CPU 一共有四种状态，在任一时刻，CPU 的状态都是四种中的一种。这四种状态是：user，sys，idle，iowait 。比如 <code>sar、top</code>会用百分比表示 CPU 分别处于这四种状态的时间，这四种状态相加的结果是 100%。</p><p>上面提到的 4 种 CPU 状态，其实只有 2 种：</p><ol><li>工作&#x2F;忙碌（busy）</li><li>非工作&#x2F;空闲（idle）</li></ol><p>其中 busy 状态下又分成了：</p><ol><li>user：表示 CPU 目前正在执行用户空间的代码</li><li>system：表示 CPU 目前正在执行内核空间的代码</li></ol><p>idle 状态下又分成了：</p><ol><li>idle：系统中没有 R 状态的进程了</li><li>iowait：系统中没有 R 状态的进程<strong>但有进程卡在 I&#x2F;O 上</strong></li></ol><p><img src="https://github.com/xxxsalted/xxxsalted.github.io/blob/master/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422134900499.png?raw=true" alt="image-20240422134900499"></p><p>这里可以看到：<strong>iowait 其实可以归类到 idle 状态，本质上表示 CPU 是空闲的，只不过 iowait 表示任务中有等待 I&#x2F;O 操作完成的时间。</strong></p><p>那既然 iowait 也是一种 idle，CPU 在 iowait 状态的时候能执行其他任务吗？下面让我们来看一个例子。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>本次例子在<strong>双核 CentOS 7</strong> 环境下实验。</p><p>我们使用 <code>dd</code> 命令模拟高密集 I&#x2F;O 任务，并且使用 <code>taskset</code> 来为任务指定 CPU</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taskset 后的数字 1 并不是 CPU 的编号，而是一种掩码。</span></span><br><span class="line">taskset 1 <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/sda of=/dev/null bs=1MB</span><br></pre></td></tr></table></figure><p>此时通过 <code>top</code> 命令查看 CPU 使用率，能够发现 CPU0 的 wa 项接近 100，这说明 CPU0 几乎所有的时间都花在等待 I&#x2F;O 操作完成上。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/xxxsalted.github.io/master/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422140831534.png" alt="image-20240422140831534"></p><p>那么，是不是此时 CPU 就没有精力处理其他任务了呢？我们再输入下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskset 1 sh -c <span class="string">&quot;while true; do true; done&quot;</span></span><br></pre></td></tr></table></figure><p>这条命令是在相同的 CPU 上执行一个死循环，用于模拟计算密集型任务。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/xxxsalted.github.io/master/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422142013795.png" alt="image-20240422142013795"></p><p>可以看到：CPU0 的 <code>wa</code> 降低为 0 了，与此同时 <code>us</code> 和 <code>sy</code> 的时间占比接近 100% 。CPU 在 iowait 状态的时候能执行了其他任务。</p><p>但这就说明 <code>dd</code> 命令产生的进程没有阻塞在 I&#x2F;O 上吗？并不是。</p><blockquote><p>假设有一个进程需要花 70% 的时间等待 I&#x2F;O 完成，把它放到一个空闲的单 CPU 的系统中，显示的 iowait 是 70%。</p><p>但是我在这个系统中增加一个非 I&#x2F;O 的计算任务，iowait 就变成 0 了。而我们之前的那个进程依然需要花 70% 的时间等待 I&#x2F;O。</p></blockquote><p>一个是从 CPU 角度来看，一个是从进程的角度来看，iowait 是 CPU 的一个状态，它不是进程的状态。<strong>iowait 很低，不能代表进程没有阻塞在 I&#x2F;O 上。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下：</p><p>1）不要搞混 CPU 状态和进程的状态。进程有 R、S、D、Z、T，5 种状态；CPU 有 4 种状态：工作（user、system 两种）和空闲（idle、iowait 两种）。</p><p>2）iowait 表示 CPU 其实是空闲的，不过 CPU 并不是严格意义上的 “空闲”，上面还有等待 I&#x2F;O 操作的进程在执行。</p><p>3）系统 iowait 高：</p><ol><li>系统存在 I&#x2F;O 性能问题：系统正在做的工作，大部分时间都是在等待 I&#x2F;O 了。</li><li>有进程因为等待 I&#x2F;O 操作而阻塞，但这并不意味着系统不可以运行其他进程。</li></ol><p>4）系统 iowait 低不能说明进程没有阻塞在 I&#x2F;O 上。因为 CPU 在 iowait 状态的时候能执行其他进程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;聊聊-Linux-iowait&quot;&gt;&lt;a href=&quot;#聊聊-Linux-iowait&quot; class=&quot;headerlink&quot; title=&quot;聊聊 Linux iowait&quot;&gt;&lt;/a&gt;聊聊 Linux iowait&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="Linux 相关" scheme="https://xxxsalted.github.io/tags/Linux-%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xxxsalted.github.io/2024/04/24/hello-world/"/>
    <id>https://xxxsalted.github.io/2024/04/24/hello-world/</id>
    <published>2024-04-24T07:47:03.940Z</published>
    <updated>2024-04-24T07:47:03.941Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
