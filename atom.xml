<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咸鱼运维杂谈</title>
  
  
  <link href="https://xxxsalted.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxxsalted.github.io/"/>
  <updated>2024-04-28T01:46:10.379Z</updated>
  <id>https://xxxsalted.github.io/</id>
  
  <author>
    <name>Ammon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序员购车指南</title>
    <link href="https://xxxsalted.github.io/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/"/>
    <id>https://xxxsalted.github.io/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/</id>
    <published>2024-04-26T09:59:02.000Z</published>
    <updated>2024-04-28T01:46:10.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序员购车指南"><a href="#程序员购车指南" class="headerlink" title="程序员购车指南"></a>程序员购车指南</h1><p>哈喽大家好，我是咸鱼。</p><p>爱车可以说是大部分男人的天性，而我对汽车的热情却远不及对手表的钟爱（痴迷劳力士）。以至于我的朋友掏出车钥匙指着上面的苹果树标志跟我介绍奔驰 AMG 系列的强劲性能和马力时，我只能尽量假装自己听懂不让他尴尬。</p><p>不过从今年开始，大数据就时不时给我推一些关于汽车的介绍和评测视频，加上打算给老爸买辆车。为了不被 4S 店忽悠，我逐渐开始了解一些选车和购车的基本知识。</p><p>在搜集了许多资料之后，我写出了这份程序员购车指南，希望对大家有所帮助。</p><h2 id="购车前"><a href="#购车前" class="headerlink" title="购车前"></a>购车前</h2><p>我们在选车的时候，除了考虑价格因素外，最重要的就是要关注车辆的配置参数。比如说油耗、轴距、车辆尺寸、发动机功率等等，那么我们就来看下选车时常见的一些参考参数。</p><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><p><strong>油耗</strong></p><p>首先就是大家最关心的油耗，我们在听到别人评论一辆车的油耗时，都会说”几个油“，意思是这辆车行驶了一百公里消耗了多少升油，也就是【百公里油耗】。</p><p>如果说一辆车百公里 9 个油，意思就是这辆车行驶了 100km，用掉了 9 升油，由此也可以推出每公里花费多少钱。</p><p>假设当前油价为 7元&#x2F;升，百公里 9 个油，那么每公里油钱为 0.63 元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 * 9 / 100 = 0.63（元）</span><br></pre></td></tr></table></figure><p>在不同的行驶环境下。油耗也会有不同，比如高速路和市区，油耗就会有较为明显的差别。</p><p><strong>车辆尺寸（单位：mm）</strong></p><p>车辆的长、宽、高是一部车的基本外形尺寸，其中：</p><ul><li>车身长度是指汽车长度方向两个极端点间的距离，即从前保险杠最凸出的位置到后保险杠最凸出的位置的距离。</li><li>车身宽度是指汽车宽度方向两个极端点间的距离，但是这里不包括外后视镜、转向灯、挡泥板以及轮胎与地面接触变形的部分。</li><li>车身高度是指从地面到汽车最高点的距离，这个最高点包含车顶行李架，但是不包括天线</li></ul><p>一般来讲，车辆尺寸越大表示内部空间越大，舒适性越高</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413095251545.png" class="" title="image-20240413095251545"><p><strong>轴距（单位：mm）</strong></p><p>轴距，就是通过车辆同一侧相邻两车轮的中点，并垂直于车辆纵向对称平面的二垂线之间的距离。简单地说，<strong>就是汽车前轴中心到后轴中心的距离</strong>。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240412134706009.png" class="" title="image-20240412134706009"><p>轴距的长短直接影响汽车的长度，进而影响车的内部使用空间。在车长确定的情况下，轴距是影响乘坐空间最重要的因素。长轴距使乘员的纵向空间增大，将大大增加影响车辆乘坐舒适性的脚部空间。</p><p>不但如此，轴距越长，车辆的抗俯仰和横摆性能越好，但是会导致车辆机动性下降。</p><p><strong>等级划分</strong></p><p>汽车等级的由来可以追溯到汽车行业内部的定位和市场竞争需求。随着汽车行业的发展和不断壮大，车型的种类和数量也逐渐增多，为了更好地满足消费者的需求，厂商开始对不同类型的汽车进行分类和定位。</p><ul><li>北美等级划分标准</li></ul><p>北美地区将车辆划分成以下几类：</p><ol><li>经济型轿车</li><li>次紧凑型车</li><li>紧凑型轿车</li><li>中型轿车</li><li>大型轿车</li><li>豪华轿车</li><li>加长轿车</li><li>敞篷车</li></ol><ul><li>欧洲等级划分标准</li></ul><p>欧洲地区分级采用的是大众汽车的分级方法。大众汽车通过车型平台的大小进行定位划分，分为 A00 级、A0 级、A 级、B 级、C 级和 D 级六个级别。这并非严格意义上的权威通用标准，而是大众品牌内部制定的一套分级方法，后来在德国和欧洲其他地区广泛应用，逐渐成为了欧洲汽车分级的标准</p><p>由于德国大众最先进入到国内与上海汽车厂合资成立上海大众汽车公司，因此我国一般使用大众汽车分级标准进行划分。汽车等级一般是<strong>根据汽车外部的尺寸、内部空间、轴距、排量等参数来进行划分的，其中最主要的判断标准就是轴距。</strong></p><p>汽车分级标准（以轴距为主要判断依据）：</p><ul><li>A00 级：轴距范围在 2 米至 2.3 米之间，发动机排量小于 1 升，例如奥拓。</li><li>A0 级：轴距范围在 2.3 米至 2.5 米之间，排量在 1 升至 1.5 升，例如飞度。</li><li>A 级：轴距范围在 2.5 米至 2.7 米之间，排量在 1.5 升至 2.0 升，例如卡罗拉。</li><li>B 级：轴距范围在 2.7 米至 2.9 米之间，排量在 1.8 升至 2.5 升，例如奥迪 A4、帕萨特。</li><li>C 级：轴距范围在 2.8 米至 3.0 米之间，排量在 2.3 升至 3.0 升，例如奥迪 A6。</li><li>D 级：轴距 3.0 米以上，排量 3.0 升以上，例如劳斯莱斯、宾利。</li></ul><p>汽车分级标准（以车长为主要判断依据）：</p><ul><li>A00 级：3.7 M 以内。</li><li>A0 级：3.7-4.3 M 之间。</li><li>A 级：4.3-4.6 M 之间。</li><li>B 级：4.6-4.9 M 之间。</li><li>C 级：4.9-5.1 M 之间。</li><li>D 级：5.1 M 以上。</li></ul><h3 id="发动机参数"><a href="#发动机参数" class="headerlink" title="发动机参数"></a>发动机参数</h3><p>众所周知，发动机是一辆油车的心脏，是油车的动力源泉。发动机的动力则来源于气缸内部，气缸就是一个把燃料的内能转化为动能的场所。</p><p>简单点来讲，燃料在气缸内燃烧产生的压力推动活塞上下运动，这些运动通过连杆传递给曲轴，最终将线性运动转化为旋转运动，然后，通过变速器和传动轴，将动力传递到驱动车轮上，从而推动汽车前进。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413100747090.png" class="" title="1990年保时捷3512一级方程式发动机"><p><strong>发动机排量（单位：mL）</strong></p><p>其中活塞上下运动过程中所通过的空间容积就叫做<strong>排量</strong>，又因为发动机都有多个气缸，所以发动机的排量就是所有气缸排量之和。</p><p>而根据气缸的排量方式和数量，产生出了不同的类型的发动机，例如直列发动机、V 型发动机、W 型发动机等等</p><p>比如说 V8 发动机就是 8 个气缸采用 V 型排列的发动机</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413134802502.png" class="" title="4.0 排量涡轮增压 V8 发动机"><p><strong>工作方式</strong></p><p>现在的发动机可分为自然吸气式（简称 L）和增压式（简称 T），其中增压式又可分为涡轮增压、机械增压、双增压。</p><p>现在市面上大部分车一般都是自吸式或者涡轮增压式，这里简单介绍下这两种。</p><ul><li>自然吸气</li></ul><p>在不通过任何增压器的情况下，让大气压将空气压入燃烧室的一种形式。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413110734828.png" class="" title="亚洲龙自吸发动机"><p>以四缸发动机为例，一个活塞完成一次工作循环需要经历四个阶段：</p><ol><li>进气行程：此时进气门打开，气缸内产生压力差，导致空气和燃油混合物被吸入气缸。</li><li>压缩行程：进气门关闭，混合气被压缩，活塞上升至最高点并点火。</li><li>燃烧行程：混合气燃烧产生膨胀，推动活塞向下运动，输出动力。</li><li>排气行程：此时排气门打开，废气被排出气缸。</li></ol><p>自然吸气是指在进气行程中，混合气利用气压差自然被吸入气缸；而增压系统则是通过增压器将空气压缩，提高气体压力和密度，使得在气门打开时气体自身的高压以及气压差的作用下增加进气量，从而提高发动机的功率。</p><p>优点：自然吸气发动机在动力输出上的平顺性与响应的直接性上，要远优于增压发动机</p><ul><li>涡轮增压</li></ul><p>涡轮增压发动机是指配备了涡轮增压器的发动机。涡轮增压器实质上是一种空气压缩设备，利用发动机排放的废气能量，通过冲击安装在排气系统中的涡轮，使其高速旋转，进而将增压后的空气压力强制送入气缸中。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413110531888.png" class="" title="奥迪 RS6 双涡轮增压 V8 发动机"><p>由于发动机功率与进气量成正比，因此采用涡轮增压发动机的汽车动力都比较足；而且整个增压过程基本不会消耗发动机本身的动力，因为它利用的是发动机排出的废气。</p><p>优点：动力足、省油、结构简单，安装方便，技术适应性广。</p><p><strong>最大功率（单位：kW）&#x2F; 最大扭矩（单位：N·m）</strong></p><p>最大功率是指一台发动机所能实现的最大动力输出，随着发动机转速的增加，功率也会相应提高。</p><p>一旦达到一定转速，功率就不再增加，因此标注最大功率时通常会同时标明相应的发动机转速。</p><p>通常，我们在谈论汽车功率时会使用另一个单位：马力（PS），例如我们会说某辆车有多少匹马力。</p><p>功率和马力的换算关系是：1 kW&#x3D;1.36 PS。</p><p><strong>简单来说，最大功率影响车辆能达到的最高速度。</strong></p><p>而扭矩则是指发动机在运转时从曲轴端输出的平均力矩。扭矩越大，发动机输出的“劲”越大，曲轴转速的变化也越快，汽车的爬坡能力、起步速度和加速性也越好。</p><p>然而，扭矩随着发动机转速的变化而不同。在某个转速区间内才会产生最大扭矩，这个区间通常在标注最大扭矩时给出。</p><p>举例来说，有些发动机可能在较低转速时就达到或接近最大扭矩，因此起步加速感觉特别强劲，且相对省油；而其他一些发动机则只能在转速较高的情况下达到最大扭矩，只能在超车时感受到加速的快感。</p><p><strong>简单来讲，最大扭矩影响车辆的加速性能。</strong></p><h2 id="购车时"><a href="#购车时" class="headerlink" title="购车时"></a>购车时</h2><p>在彻底了解心仪车型的配置参数和价格之后，我们就可以前往 4S 店进行试驾了。试驾是了解目标车辆的感受和体验的重要环节，绝对不要因为觉得不好意思而犹豫。</p><p>特别是对于家庭用车，最好带上家人一同前往试驾，让他们亲自感受一下后排空间是否足够舒适。</p><p>试驾后觉得不错的，让销售给你出一份报价单，千万别急着订车，一定要多跑几家店，充分了解一下车子的大概优惠行情。</p><p>试驾并了解优惠行情之后，我们就到了买车阶段，不知道大家有没有听过这个故事：买车如果是全款购买，销售全程黑脸，但如果是贷款买车，销售对你毕恭毕敬笑脸相迎，甚至提车仪式都给你搞得非常隆重。</p><p>为何同样是购车，销售的态度会有如此大的差别？这就需要介绍一下全款购车和贷款购车的区别了。</p><h3 id="全款买车"><a href="#全款买车" class="headerlink" title="全款买车"></a>全款买车</h3><p>全款买车只有下面四个费用：</p><ul><li>裸车价</li></ul><p>裸车价到底该怎么算？就是<strong>指导价减去现金优惠</strong>。一定是现金优惠，不是什么综合优惠。</p><p>裸车价尽量往少了谈，这关系到我们交的购置税。</p><ul><li>购置税</li></ul><p>购置税该怎么算？就是<strong>裸车价 ÷ 11.13</strong>。</p><p>注意一定是裸车价 ÷ 11.3，千万不能用指导价 ÷ 11.3。</p><ul><li>保险</li></ul><p>车辆保险只有四项：交强险、车损险、第三责任险和医保外责任用药险。</p><ul><li>上牌费</li></ul><p>4S 店帮你去上牌的费用。车管所的工本费一般是 120 块钱，如果 4S 店收你一两千上牌费的，纯属耍流氓，撑死给它 500 块，多一分都没有（记得让它给你个好看的牌照框）。</p><p>如果价格实在谈不下来，可以选择自己去车管所上牌，就是比较麻烦。</p><h3 id="贷款买车"><a href="#贷款买车" class="headerlink" title="贷款买车"></a>贷款买车</h3><p>一般分为厂家金融贷款和银行分期贷款。</p><ul><li>厂商金融贷款</li></ul><p>有些汽车厂商都会有免息贷款或者贴息贷款的政策（上汽金融、一汽金融等），都是面对自家车提供贷款，主要目的不是为了挣钱，而是以此来提高销量。</p><p>4S 销售顾问也会在电话里头跟你说我们店里现在有贴息甚至免息贷款的政策，实际上一旦你到店里了，销售就会说你资质不够走不了贷款，你只能做银行的分期贷款了。</p><p>因为厂商金融贷款的话 4S 店是赚不了钱的（没利息甚至贴息），所以先把你忽悠到店里，然后再给你推银行分期贷款。</p><ul><li>银行分期贷款</li></ul><p>对于银行分期贷款，可以说是 4S 店最大的收入来源了（银行会把一部分贷款利息返给 4S 店）。</p><p>现在最常见的就是 5 年分期的贷款，4S 店销售会跟你说 5 年分期贷款买车要比全款买车优惠，月供低、利率低，2 年后可以提前还，不收你违约金。乍一听感觉很划算，事实果真如此吗？</p><p>优惠是挺优惠的，但你能保证两年后一定能够存够钱提前还款吗？不会因为一些其他原因把钱花掉了？</p><p>银行和 4S 店就是抓住只有极少数消费者能够提前还款的事实，前期看似你赚了，实则是银行和 4S 店赚了。</p><p>因为大数据显示两年后能提前还款的人不到 40%，外面的消费诱惑大大了，极少有人能够按时提前还款，本以为自己 5 年分期贷款买车 2 年后提前还款能省下几万块钱，结果只能老老实实贷满 5 年还了 5 年的利息。</p><p>如果我们真的要通过银行分期贷款买车，首先最重要的就是自己要会<strong>算利息，确认好贷款利率</strong></p><p>假设我们贷款十万，5 年也就是分 60 期还，那月供就是 2500。那总还款就是 15 万 （2500 X 60 期 &#x3D; 150000）。</p><p>总利息就是 5 万（15万 - 10 万），月利息就是 833.33（5万 ÷ 60），月利率就是 0.83%（5万 ÷ 60 期 ÷ 10万），年利率接近 10%（0.83% X 12个月）。</p><p>可以看到这个利率是非常的高，最好贷款利率不要超过 4%，越低越好。</p><p>学会了算利息之后，我们还要知道<strong>还款的方式 ，一般分为等额本息和等额本金</strong></p><p><strong>等额本息：</strong>贷款总额和贷款利息之和分摊到每个还款月中，每月以相同的金额偿还贷款本息（即每月的总还款额一致，其中利息占比逐月递减，本金占比逐月增加），俗称先息后本。</p><p><strong>等额本金：</strong>每月偿还相同金额的本金，由于剩余本金减少，而利息则随计息本金的减少而逐月递减，所以每月还款额逐月递减，俗称等本等息。</p><p><strong>如果你有提前还款的打算，可以选择等额本金；如果是等额本息，就没必要提前还款了，因为等额本息前几年还的钱大部分是利息，后几年还的才是本金。</strong></p><p>最后一点就是我们要跟 4S 店谈清楚提前还款要不要交违约金，这个看你自己争取了。如果争取到不交违约金或者少交一点违约金，一定要写在合同里，并且是写在贷款合同而不是购车合同里。</p><blockquote><p>网上还有其他人说根本没有提前还款要交违约金这一说，如果有这种情况，可以直接拨打 12378 银保监会的电话</p></blockquote><p>我们再来看下贷款买车比全款买车额外产生的一些费用</p><ul><li>手续费（分情况付）</li></ul><p>如果要是做厂商金融贷款，有免息或者贴息政策的话，可以付这个手续费，一般是两到三千块钱。</p><p>如果你做的是银行分期贷款的话，这个手续费一分都不要出，因为 4S 店已经赚你的利息了。</p><ul><li>利息（要付）</li></ul><p>关于利息和利率的计算，前文有所提到。</p><ul><li>其他费用（不需要付）</li></ul><p>什么综合服务费、PDI 检测费、出库费、解押费等等，这些都是不需要自己付的，如果 4S 店跟你说这些钱你不付的话买不了车，那你转头就走，去另外一家店里买去。</p><table><thead><tr><th>全款买车费用</th><th>贷款买车费用</th></tr></thead><tbody><tr><td>裸车价</td><td>裸车价</td></tr><tr><td>购置税</td><td>购置税</td></tr><tr><td>保险（交强险、第三责任险、车损险、医保外责任用药险）</td><td>保险（交强险、第三责任险、车损险、医保外责任用药险）</td></tr><tr><td>上牌费</td><td>上牌费</td></tr><tr><td>❌</td><td>贷款手续费（看情况交）</td></tr><tr><td>❌</td><td>利息</td></tr></tbody></table><h2 id="购车后"><a href="#购车后" class="headerlink" title="购车后"></a>购车后</h2><p>确认买车后，我们会交定金并签订购车协议，协议上会明确提车日期。</p><p>提车的时候先别急着交钱，先把下面的步骤走好。因为如果交了钱出了 4S 店再发现汽车有问题，4S 店是不会负责的。</p><h3 id="提车前检查"><a href="#提车前检查" class="headerlink" title="提车前检查"></a>提车前检查</h3><p>参考链接：<a href="https://wanchemi.com/hao/tichezhuyi/">2023提车注意事项以及验车的步骤 新手必知！很详细！ - 玩车迷 (wanchemi.com)</a></p><ul><li>验车</li></ul><p>验车时应在光线充足的环境下，光线不足可以用手机自带的LED手电筒补光，一定要擦干水渍再验车，因为水渍会起到遮掩效果。验车时主要检查以下几个项目：</p><ol><li><strong>检查漆面有无明显划痕</strong>。重点检查前后杠这些重灾区。</li><li><strong>检查车辆是否重新补漆</strong>。用手背感受漆面，如感觉漆面发涩，不顺滑，很有可能是补过漆，这种感觉和原厂漆有很明显的区别。</li><li><strong>检查车辆内饰。</strong></li><li><strong>检查车辆生产日期</strong>。生产日期在车身铭牌处，名牌一般在副驾驶 A 柱下方。一般来讲，3 个月内的叫做近期车，6 个月以上称为库存车，如果销售提前告知你并且价格实惠，那么 6 个月以上库龄的车完全可以接受，如销售未提前告知你，建议换车。不然新车价格买库存车，说的就是你冤大头。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417221128988.png" class="" title="image-20240417221128988"><ol start="5"><li><strong>检查轮胎生产日期。</strong>轮胎生产日期由四个数字组成：前面2个数字代表星期，后面2个数字代表年份。比如说 1123 表示轮胎是 2023 年第 11 周生产的。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417220325957.png" class="" title="3906，说明轮胎出厂日期为：06 年第 39 个星期，即9月上旬左右"><ol start="6"><li><strong>检查玻璃生产日期</strong>。挡风玻璃上也有生产日期的标识，如下图，数字代表最近生产年份，点代表生产月份，点在数字左边，说明是上半年生产，用 7 减去黑点数，得出具体年份；如果点在数字右边，说明是下半年生产，用 13 减去黑点数，得出具体年份。如果车窗玻璃距离新车生产日期太远，一年或以上，那么很有可能是车窗玻璃被更换过。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417221437477.png" class="" title="image-20240417221437477"><ol start="7"><li><strong>检查公里数及各种随车工具。</strong>100 公里内都是正常的。</li><li><strong>检查发动机</strong>。启动车辆，检查发动机是否有明显杂音和异常抖动，最好打开前机盖看下有没有渗油漏油的现象。</li><li><strong>检查排气管内壁</strong>。摸一下内壁，如果特别黑的话说明有可能是试驾车。</li></ol><ul><li>付尾款并开发票上保险</li></ul><p>按照合同约定金额付款。在开发票上保险之后记得核对发票金额。</p><ul><li>清点材料</li></ul><p>4S 店需要给我们以下材料：</p><ol><li>购车发票（必须是购车专用发票，共三联）</li><li>车辆出厂合格证（原件）</li><li>保险单</li><li>车辆一致性证书</li><li>车辆三包凭证、使用说明书</li><li>购车合同、贷款合同（贷款买车前提下）</li><li>车钥匙</li><li>前期谈好的赠品</li></ol><ul><li>上牌</li></ul><p>上牌前先买购置税，车管所内部一般有自助缴费机，缴税后拿到完税证明即可办理上牌业务</p><p>上牌大致流程：先领取查验表填写车辆信息，填好查验表和合格证发票登记联放在一起，交给查验员就可以去验车了，验完车直接选号，牌照和行驶证登记证一般当天即出，实在等不及车管所也有牌照邮寄业务。</p><p>需要打临牌的同学记得在未选号之前办理，切记选号后是不能打临牌的。</p><h3 id="正式提车"><a href="#正式提车" class="headerlink" title="正式提车"></a>正式提车</h3><p>牌照到手后，我们就可以正式提车，开开心心地开车走人啦。最后祝大家都能买到自己心仪的汽车！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序员购车指南&quot;&gt;&lt;a href=&quot;#程序员购车指南&quot; class=&quot;headerlink&quot; title=&quot;程序员购车指南&quot;&gt;&lt;/a&gt;程序员购车指南&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;爱车可以说是大部分男人的天性，而我对汽车的热情却远不及对手表的</summary>
      
    
    
    
    
    <category term="生活" scheme="https://xxxsalted.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux systemd 定时任务</title>
    <link href="https://xxxsalted.github.io/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://xxxsalted.github.io/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2024-04-25T11:39:59.000Z</published>
    <updated>2024-04-28T01:46:25.568Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>说到 Linux 定时任务，大家用得最多的就是 crond 服务，但其实 systemd 也有类似的功能。我们不但可以通过 systemd 来管理服务，还能设置定时任务，那就是 systemd timer。</p><p>与 crond 相比，systemd 定时任务具有以下优点：</p><ul><li>更高的精度：systemd 定时任务可以精确到秒，而 crond 只能精确到分钟。</li><li>可以限制资源使用：使用 systemd 定时任务可以设置内存和 CPU 的使用限制，比如最多使用 50% 的 CPU。</li><li>更灵活的配置：systemd 定时任务可以通过条件、依赖关系等进行配置，以控制任务的执行。相比之下，crond 的配置相对简单，灵活性较低。</li></ul><p>举个例子，假设我们要通过 crond 配置多个大文件的远程备份（使用 scp、rsync 或 ftp 的方式），但由于大文件的网络传输时间不确定，因此下一个文件的备份任务开始时间几乎都是按照经验估计的。</p><p>这可能导致上一个任务的网络传输尚未完成，下一个任务已经开始，同时占用网络带宽，然后又启动了下一个任务，形成恶性循环。</p><p>而使用 systemd timer 可以建立任务之间的依赖关系，例如在第一个备份任务完成后再启动第二个备份任务，以此类推。</p><h2 id="systemd-timer-原理"><a href="#systemd-timer-原理" class="headerlink" title="systemd timer 原理"></a>systemd timer 原理</h2><p>systemd 定时任务基于 systemd 的单元管理器。它使用两种类型的单元来管理定时任务：<code>.timer</code> 单元和 <code>.service</code> 单元。</p><ul><li><code>.timer</code> 单元：<ul><li><code>.timer</code> 单元定义了定时规则，包括启动时间、间隔时间等。</li><li>每个 <code>.timer</code> 单元都对应一个或多个关联的 <code>.service</code> 单元。</li></ul></li><li><code>.service</code> 单元：<ul><li><code>.service</code> 单元定义了要在计时器触发时运行的服务或命令。</li><li>当 <code>.timer</code> 触发时，相关联的 <code>.service</code> 单元将被启动。</li></ul></li></ul><p>systemd 定时任务原理是：<strong>systemd 定期检查每个 <code>.timer</code> 单元中定义的定时规则，以确定是否触发相应的定时器。一旦定时器触发，systemd 将启动与该定时器关联的 <code>.service</code> 单元，从而执行预定的任务。</strong></p><p>在正式介绍 systemd 定时任务之前，我们先要了解什么是单元（unit）</p><h2 id="systemd-单元"><a href="#systemd-单元" class="headerlink" title="systemd 单元"></a>systemd 单元</h2><p>简单来讲，单元就是 systemd 的最小管理单位，是单个进程的描述。一个个单元相互调用和依赖，组成一个庞大的任务管理系统。</p><p>systemd 中的 unit 有很多类型，下面是一些常见的 unit 类型：</p><ul><li><code>.service</code>：service 单元，也就是我们常说的系统服务</li><li><code>.target</code>：target 单元，其实就是一堆 unit 的集合，比如常见的 <code>multi-user.target</code></li><li><code>.timer</code>：timer 单元，负责定时任务。</li><li><code>.slice</code>：slice 单元，负责资源的分配。</li></ul><p>每个 unit 都有一个描述文件（unit 负责干什么、怎么干…），它们分散在三个目录。</p><ul><li><code>/lib/systemd/system</code>：系统默认的 unit 文件</li><li><code>/etc/systemd/system</code>：包含用户自定义的 unit 文件，如果设置了开机自启动，则该目录下的 unit 描述文件会创建一个符号链接。</li><li><code>/usr/lib/systemd/system</code>：用户自己定义的 unit 文件，也会包含一些系统默认的 unit 文件</li></ul><blockquote><p>大多数 linux 发行版中 <code>/lib</code> 是  <code>/usr/lib</code>的软链接，所以 1 和 3 其实是同一目录，作用自然应该是相同的。</p></blockquote><p>其实可以简单分成两类：</p><ul><li><code>/etc/systemd/system</code>：用户自定义的 unit 文件</li><li><code>/usr/lib/systemd/system</code>：系统默认的 unit 文件和用户安装软件的 unit 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有 unit</span></span><br><span class="line">$ systemctl list-unit-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 Service unit</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 Timer unit</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span> timer</span><br></pre></td></tr></table></figure><p>关于 systemd unit 相关的内容这里就不细讲了，大家可以看我之前的文章：《<a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247485486&idx=1&sn=fafbbf884603e63308d085d99e5f77e0&chksm=c293086af5e4817cf3c4cea6136cbbbf7689a6b91e32f17259d5f1b23e067fd15ea382891401&token=1980629016&lang=zh_CN#rd">systemctl 命令设置开机自启动失败 </a>》</p><img src="/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/1.jpg" class="" title="image"><h2 id="设置-systemd-定时任务"><a href="#设置-systemd-定时任务" class="headerlink" title="设置 systemd 定时任务"></a>设置 systemd 定时任务</h2><p>有一个检查 https 证书是否过期的脚本 <code>check_https.sh</code>，我们现在需要系统定期执行这个脚本，除此之外，系统在开机之后也会执行这个脚本。</p><p><strong>首先创建一个 service unit</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/lib/systemd/system/check-https.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=check https certificates</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=check_https.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><code>Type=oneshot</code> 表示 service 以一次性（Oneshot）方式运行。这意味着当启动 service 时，它将执行一次，并在完成后退出。</p><p><strong>然后我们创建一个 timer unit</strong></p><p>Service unit 只是定义了如何执行任务，要定时执行这个 Service，还必须定义 Timer unit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/lib/systemd/system/check-https.timer</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Runs check https every day</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnUnitActiveSec=24h</span><br><span class="line">Unit=check-https.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>我们着重来看下 [Timer] 部分：</p><ul><li><code>OnActiveSec</code>：定时任务生效后，多少时间开始执行任务</li><li><code>OnBootSec</code>：系统启动后，多少时间开始执行任务</li><li><code>OnStartupSec</code>：Systemd 进程启动后，多少时间开始执行任务</li><li><code>OnUnitActiveSec</code>：该 unit 上次执行后，等多少时间再次执行</li><li><code>OnUnitInactiveSec</code>： 定时任务上次关闭后多少时间，再次执行</li><li><code>OnCalendar</code>：基于绝对时间，而不是相对时间执行</li><li><code>AccuracySec</code>：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒</li><li><code>Unit</code>：真正要执行的任务，默认是同名的带有<code>.service</code> 后缀的 unit</li><li><code>Persistent</code>：如果设置了该字段，即使定时任务到时没有启动，也会自动执行相应的 unit</li><li><code>WakeSystem</code>：如果系统休眠，是否自动唤醒系统</li></ul><p>上面的 timer 文件里，<code>OnUnitActiveSec=24h</code> 表示 24 小时执行一次任务。</p><p>下面是其他的写法：</p><p>1、在系统启动 15 分钟后执行，并在系统运行时，每周执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnBootSec=15min</span><br><span class="line">OnUnitActiveSec=1w</span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>2、每周周一执行，如果到时定时任务没有启动，会立即执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnCalendar=weekly</span><br><span class="line">Persistent=<span class="literal">true</span></span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>3、每周日凌晨三点执行（时间格式：<code>Year-Month-Day Hour:Minute:Second</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnCalendar=Sun *-*-* 03:00:00</span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html">https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html</a></p><p>然后我们启动这个定时任务，并设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl  daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl start check-https.timer</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> check-https.timer</span><br></pre></td></tr></table></figure><p>其他一些定时任务命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有正在运行的定时任务</span></span><br><span class="line">systemctl list-timers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭定时任务</span></span><br><span class="line">systemctl stop check-https.timer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看定时任务状态</span></span><br><span class="line">systemctl status check-https.timer</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;说到 Linux 定时任务，大家用得最多的就是 crond 服务，但其实 systemd 也有类似的功能。我们不但可以通过 systemd 来管理服务，还能设置定时任务，那就是 systemd timer。&lt;/p&gt;
&lt;p&gt;与 crond</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Linux iowait</title>
    <link href="https://xxxsalted.github.io/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/"/>
    <id>https://xxxsalted.github.io/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/</id>
    <published>2024-04-25T10:57:12.000Z</published>
    <updated>2024-04-28T01:46:35.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="聊聊-Linux-iowait"><a href="#聊聊-Linux-iowait" class="headerlink" title="聊聊 Linux iowait"></a>聊聊 Linux iowait</h1><p>哈喽大家好，我是咸鱼。</p><p>我们在使用 <code>top</code> 命令来查看 Linux 系统整体 CPU 使用情况的时候，往往看的是下面这一列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  68.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure><p>其中，man 手册解释 <code>wa</code> 表示 CPU 在等待 I&#x2F;O 操作（iowait）的时间百分比。</p><img src="/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422133943165.png" class="" title="image-20240422133943165"><p>上面输出显示：CPU 有 68% 的时间消耗在等待 I&#x2F;O 操作完成。按照也就是说有 68% 的 CPU 时间被浪费掉了？可是 Linux 会让 CPU 宝贵的性能白白浪费在耗时的 I&#x2F;O 等待上吗？CPU 在 iowait 状态的时候能执行其他任务吗？</p><p>实际上当 CPU 处于 iowait 状态时，理论上也应该被视为处于 idle （空闲）状态，那 iowait 和 idle 之间有什么联系呢？</p><p>今天我们就来解开这些疑惑，来看看 iowait 到底是什么。</p><p>参考文章：</p><p><a href="https://www.kawabangga.com/posts/5903">https://www.kawabangga.com/posts/5903</a></p><p><a href="https://blog.popkx.com/linux%E7%B3%BB%E7%BB%9Ftop%E5%91%BD%E4%BB%A4%E4%B8%AD%E7%9A%84iowait%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/">https://blog.popkx.com/linux系统top命令中的iowait究竟是什么意思/</a></p><p><a href="https://www.linfo.org/process_state.html">https://www.linfo.org/process_state.html</a></p><p><a href="https://blog.pregos.info/wp-content/uploads/2010/09/iowait.txt">https://blog.pregos.info/wp-content/uploads/2010/09/iowait.txt</a></p><h2 id="进程和-CPU-状态"><a href="#进程和-CPU-状态" class="headerlink" title="进程和 CPU 状态"></a>进程和 CPU 状态</h2><p>我们首先要搞清楚进程的状态和 CPU 状态。</p><p>进程可以分为下面几种状态：</p><ol><li>R：可执行状态（<code>runnable</code>），表示进程正在被 CPU 执行或者处在 CPU 队列中等待分配 CPU 时间片。</li><li>S：可中断睡眠状态（<code>interrupted sleep</code>），表示进程处于睡眠状态，当特定条件或者信号到达时，就会被唤醒，状态也由 S 变成 R。</li><li>D：不可中断睡眠状态（<code>uninterrupted sleep</code>），跟状态 S 类似，只是进程在接收到信号时不会被唤醒。这类状态的进程一般在等待 I&#x2F;O 结束。</li><li>Z：僵尸状态（<code>zombie</code>），表示进程已经终止（死透了），但父进程还没有发出 <code>wait4()</code> 系统调用去读取它的结束信息。（可以理解为进程死【终止】后 父进程要给它收尸【获取该进程的终止状态】）</li><li>T：暂停状态（<code>stopped</code>），表示进程已经暂停（还没死透），是可以恢复的（比如我们给进程发送 SIGSTOP 或者按 CTRL+Z，就可以将进程置为暂停状态，可以通过 bg&#x2F;fg 命令，或者发送 SIGCONT 信号恢复。）</li></ol><img src="/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422132708823.png" class="" title="image-20240422132708823"><p>CPU 一共有四种状态，在任一时刻，CPU 的状态都是四种中的一种。这四种状态是：user，sys，idle，iowait 。比如 <code>sar、top</code>会用百分比表示 CPU 分别处于这四种状态的时间，这四种状态相加的结果是 100%。</p><p>上面提到的 4 种 CPU 状态，其实只有 2 种：</p><ol><li>工作&#x2F;忙碌（busy）</li><li>非工作&#x2F;空闲（idle）</li></ol><p>其中 busy 状态下又分成了：</p><ol><li>user：表示 CPU 目前正在执行用户空间的代码</li><li>system：表示 CPU 目前正在执行内核空间的代码</li></ol><p>idle 状态下又分成了：</p><ol><li>idle：系统中没有 R 状态的进程了</li><li>iowait：系统中没有 R 状态的进程<strong>但有进程卡在 I&#x2F;O 上</strong></li></ol><p>这里可以看到：<strong>iowait 其实可以归类到 idle 状态，本质上表示 CPU 是空闲的，只不过 iowait 表示任务中有等待 I&#x2F;O 操作完成的时间。</strong></p><p>那既然 iowait 也是一种 idle，CPU 在 iowait 状态的时候能执行其他任务吗？下面让我们来看一个例子。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>本次例子在<strong>双核 CentOS 7</strong> 环境下实验。</p><p>我们使用 <code>dd</code> 命令模拟高密集 I&#x2F;O 任务，并且使用 <code>taskset</code> 来为任务指定 CPU</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taskset 后的数字 1 并不是 CPU 的编号，而是一种掩码。</span></span><br><span class="line">taskset 1 <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/sda of=/dev/null bs=1MB</span><br></pre></td></tr></table></figure><p>此时通过 <code>top</code> 命令查看 CPU 使用率，能够发现 CPU0 的 wa 项接近 100，这说明 CPU0 几乎所有的时间都花在等待 I&#x2F;O 操作完成上。</p><img src="/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422140831534.png" class="" title="image-20240422140831534"><p>那么，是不是此时 CPU 就没有精力处理其他任务了呢？我们再输入下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskset 1 sh -c <span class="string">&quot;while true; do true; done&quot;</span></span><br></pre></td></tr></table></figure><p>这条命令是在相同的 CPU 上执行一个死循环，用于模拟计算密集型任务。</p><img src="/2024/04/25/%E8%81%8A%E8%81%8A-Linux-iowait/image-20240422142013795.png" class="" title="image-20240422142013795"><p>可以看到：CPU0 的 <code>wa</code> 降低为 0 了，与此同时 <code>us</code> 和 <code>sy</code> 的时间占比接近 100% 。CPU 在 iowait 状态的时候能执行了其他任务。</p><p>但这就说明 <code>dd</code> 命令产生的进程没有阻塞在 I&#x2F;O 上吗？并不是。</p><blockquote><p>假设有一个进程需要花 70% 的时间等待 I&#x2F;O 完成，把它放到一个空闲的单 CPU 的系统中，显示的 iowait 是 70%。</p><p>但是我在这个系统中增加一个非 I&#x2F;O 的计算任务，iowait 就变成 0 了。而我们之前的那个进程依然需要花 70% 的时间等待 I&#x2F;O。</p></blockquote><p>一个是从 CPU 角度来看，一个是从进程的角度来看，iowait 是 CPU 的一个状态，它不是进程的状态。<strong>iowait 很低，不能代表进程没有阻塞在 I&#x2F;O 上。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下：</p><p>1）不要搞混 CPU 状态和进程的状态。进程有 R、S、D、Z、T，5 种状态；CPU 有 4 种状态：工作（user、system 两种）和空闲（idle、iowait 两种）。</p><p>2）iowait 表示 CPU 其实是空闲的，不过 CPU 并不是严格意义上的 “空闲”，上面还有等待 I&#x2F;O 操作的进程在执行。</p><p>3）系统 iowait 高：</p><ol><li>系统存在 I&#x2F;O 性能问题：系统正在做的工作，大部分时间都是在等待 I&#x2F;O 了。</li><li>有进程因为等待 I&#x2F;O 操作而阻塞，但这并不意味着系统不可以运行其他进程。</li></ol><p>4）系统 iowait 低不能说明进程没有阻塞在 I&#x2F;O 上。因为 CPU 在 iowait 状态的时候能执行其他进程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;聊聊-Linux-iowait&quot;&gt;&lt;a href=&quot;#聊聊-Linux-iowait&quot; class=&quot;headerlink&quot; title=&quot;聊聊 Linux iowait&quot;&gt;&lt;/a&gt;聊聊 Linux iowait&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xxxsalted.github.io/2024/04/24/hello-world/"/>
    <id>https://xxxsalted.github.io/2024/04/24/hello-world/</id>
    <published>2024-04-24T07:47:03.940Z</published>
    <updated>2024-04-24T07:47:03.941Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
