<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咸鱼运维杂谈</title>
  
  
  <link href="https://xxxsalted.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxxsalted.github.io/"/>
  <updated>2024-05-15T02:13:31.785Z</updated>
  <id>https://xxxsalted.github.io/</id>
  
  <author>
    <name>Ammon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>盘串与长期主义</title>
    <link href="https://xxxsalted.github.io/2024/05/15/%E7%9B%98%E4%B8%B2%E4%B8%8E%E9%95%BF%E6%9C%9F%E4%B8%BB%E4%B9%89/"/>
    <id>https://xxxsalted.github.io/2024/05/15/%E7%9B%98%E4%B8%B2%E4%B8%8E%E9%95%BF%E6%9C%9F%E4%B8%BB%E4%B9%89/</id>
    <published>2024-05-15T02:12:41.000Z</published>
    <updated>2024-05-15T02:13:31.785Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>大家可能不知道，咸鱼有一个爱好——盘串</p><p>一年前，咸鱼毕业回家待了一段时间。偶尔间发现了以前去西藏带回来的菩提手串，当时右手缺点东西戴，便想着戴手上盘玩盘玩</p><p>这是当时拍的照片：</p><style>.ibkpxhfxvtpq{zoom:25%;}</style><p>现在将近一年了，真正盘的时间应该是大半年左右，这是现在的样子</p><p>光泽度还是挺不错的，现在手感比之前温润多了</p><img src="/2024/05/15/%E7%9B%98%E4%B8%B2%E4%B8%8E%E9%95%BF%E6%9C%9F%E4%B8%BB%E4%B9%89/image-20230511225431037.png" class="" title="image-20230511225431037"><p>看到这里小伙伴可能有疑惑——<strong>盘串能跟长期主义有什么关系？</strong></p><p>今天这篇文章则是关于我在盘串时的一些思考，我觉得<strong>跟我理解中的长期主义奉行的准则有相似的地方</strong>，于是便写出来分享给大家</p><p>耐心</p><p>盘串盘串，重点在于“盘”字</p><p>这里说的盘是动词，指的是不断摩挲器物的动作。<strong>套用网上的解释</strong>：盘为承水器，以匜沃水，以盘承之，古者晨必洒手，日日皆然，引申为日日新</p><p>所以，“盘”用在这个动作上，指人与器物的不断交流，达到日日为新的状态</p><blockquote><p>这个日日为新的状态，有两方面含义：一是器物经过盘玩，每天发生变化，日日为新；二是随着盘玩者对器物的了解逐渐深入，情感和心态日日为新</p></blockquote><p>盘串主要玩的就是一个“盘玩”的过程：从一个白串黄茬，慢慢地一点一点的初步上色，再到尴尬期，最后经过时间的洗礼将其盘红，达到一个具有胶质感的包浆状态</p><p>而这个过程以及最后在串上面显现出来的岁月痕迹（磨损、包浆），让喜欢它的人深陷其中无法自拔</p><p>但这可不是一件简单的事情，它需要长期的盘玩，数年的积累才有可能达到你心目中的效果</p><p>也就是说，<strong>盘串需要你把时间线拉长，耐心地日复一日地盘玩摩挲</strong></p><p>一个长期主义者亦是如此，<strong>没有耐心做支撑，长期主义就是一场空谈</strong></p><p>当下社会飞速发展，生活节奏越来越快，<strong>“缺乏耐心”好像成了现代人的通病：期望得到快速的回报，难以在一件需要持之以恒的事情上投入精力</strong></p><ul><li>幻想”一夜暴富”，恨不得手里的资产明天就翻个倍；热衷投机，追涨杀跌</li><li>对于《三天教你学会XXX》《十天速成XXX》这种文章爱不释手，妄想看了这些就能完全掌握某个知识，而不是借这些文章去提起自己的兴趣然后系统性地学习</li><li>容易被某些别有用心的人（媒体）贩卖焦虑，自己的情绪被玩弄于股掌之中</li></ul><p>但是我们需要知道，<strong>唯有耐心才能够帮助我们抵御诱惑分散焦虑，并成就我们的长期价值</strong></p><p>曾经有记者问股神巴菲特：“很多人都想变得有钱，但为什么90%的人最终却做不到？”</p><p>巴菲特对此这样解释：“因为没有人愿意慢慢地变富”</p><p>许多人羡慕巴菲特的投资成功，却并没有像他那样如此耐心地持有资产，巴菲特95%以上的财富，都是在他60岁以后获得的</p><blockquote><p> 张磊在《价值》中写道：”流水不争先，争的是滔滔不绝“</p><p> 卡尔·维诺在《巴黎隐士》里所写：“我对任何唾手可得、快速、出自本能、即兴、含混的事物没有信心。我相信缓慢、平和、细水流长的力量，踏实，冷静。”</p></blockquote><p><strong>无论是盘串也好学习也罢，还是说投资，我们都应该做长期主义的拥护者，保持耐心。让珠子包浆、让知识累积、让资产增值</strong></p><p>延迟满足</p><p>前面我们说到，盘串需要耐心地日复一日地去盘玩，才有可能达到我们想要的包浆上色</p><p>在这个过程中珠子会出现反碱、色差等情况（尴尬期），这是正常现象，经过一段时间的盘玩之后尴尬期就会消失</p><p>但是有些人为了让串更快地达到最终效果，妄想短时间内就达到需要数年甚至数十年才能形成的包浆上色，采取了各种捷径——机刷、泡药水、上科技……</p><p>我对这些做法不置可否，毕竟谁不想让自己的珠子立马就能够包浆上色呢？</p><p>追求”即时满足“是人的本能，而”延迟满足“则需要我们违抗自己的本能</p><p>但是我觉得盘串玩家需要<strong>学会延迟满足</strong>，长期主义者亦是如此</p><p>“延迟满足”概念来自于沃尔特·米歇尔从 1960 年开始的一项名为“棉花糖实验”的儿童心理研究</p><p>米歇尔指出：</p><ul><li>”即时满足“是我们人类的本能。人类的祖先不喜欢被猛兽吃掉，有食物要尽快吃，有水就抓紧喝。即使现在没有老虎吃我们了，也依然心怀恐惧，害怕失去，并渴望立即获得想要的东西</li><li>“延迟满足”则需要我们违抗自己的本能，调动大脑中最为复杂的“冷静系统”对当前的冲动进行理性的反思与规划，而这也正是自控力的根本来源</li></ul><p>那么，既然是一个违背本能的操作，我们为什么要学会延迟满足？延迟满足能够给我们带来什么？</p><p>回想一下，我们有多少次下定决心减肥健身、存钱理财、提高自己，却又总是败在了美食、消费主义、和无限制的娱乐面前</p><p><strong>学会延迟满足，能够帮助我们冷却冲动，克制自身的欲望，抵御眼前的诱惑</strong></p><p>从投资角度来看，我们受制于即时满足，希望股票买了就涨，卖了就跌，太急于求成。我们热衷于短线交易，低估长远回报</p><p>字节跳动的张一鸣在面对采访时曾这样描述过：“如果一件事情你觉得很好，不妨再往后延迟一下，这会让你提高标准，同时留了缓冲。“</p><p>高瓴资本创始人张磊，在他的《价值》一书中，多次提及一个观念：”在多数人都醉心于即时满足的世界里，懂得延迟满足道理的人已经先胜一筹了。“</p><p><strong>学会延迟满足，不仅仅是抵御诱惑，更是磨练心性：一个延迟满足的人，不再过于注重眼前的利益得失，而是追求长期的价值</strong></p><p>总结</p><p><strong>生活中，许多的美好，都不能一蹴而就，需要一个漫长且忍耐的过程</strong></p><p>保持耐心，学会延迟满足，做时间的朋友</p><p>我们日复一日地摩挲着手上的器件，忍耐无法避免的尴尬期，违背人性的本能。即便如此，我相信一定会在历经晦暗苦涩后，品尝到最后包浆上色所带来的芬芳甘甜</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;大家可能不知道，咸鱼有一个爱好——盘串&lt;/p&gt;
&lt;p&gt;一年前，咸鱼毕业回家待了一段时间。偶尔间发现了以前去西藏带回来的菩提手串，当时右手缺点东西戴，便想着戴手上盘玩盘玩&lt;/p&gt;
&lt;p&gt;这是当时拍的照片：&lt;/p&gt;
&lt;style&gt;.ibkpx</summary>
      
    
    
    
    
    <category term="随便写写" scheme="https://xxxsalted.github.io/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯算法人生</title>
    <link href="https://xxxsalted.github.io/2024/05/15/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E4%BA%BA%E7%94%9F/"/>
    <id>https://xxxsalted.github.io/2024/05/15/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E4%BA%BA%E7%94%9F/</id>
    <published>2024-05-15T02:11:54.000Z</published>
    <updated>2024-05-15T02:12:23.187Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>之前看到过耗子叔写的一篇文章《程序算法与人生选择》，这篇文章中耗子叔结合计算机中的经典算法（排序、动态规划等等），让大家在人生道路的选择上获得了一些启发</p><p>我最近看了一些关于贝叶斯思想的文章，觉得还挺有感触的，于是打算写一篇相关的文章</p><p>今天这篇文章不会跟大家讲贝叶斯公式的推导</p><p>而是介绍什么是贝叶斯思想，以及如何结合贝叶斯思想为自己的人生规划做决策</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>贝叶斯思想是由英国数学家和统计学家托马斯·贝叶斯（Thomas Bayes）提出的</p><p>托马斯·贝叶斯生活于 18 世纪，他的主要贡献是在概率理论领域。尽管贝叶斯自己并没有将其思想形成完整的理论，但他的名字被用于描述一类基于条件概率的推理方法，即贝叶斯方法</p><p><strong>贝叶斯将概率解释为一种表示不确定性或信念的度量，而不仅仅是频率的统计概念</strong></p><p>关于贝叶斯思想，有两个概念需要大家知道：</p><ul><li>先验概率（Prior Probability）：先验概率是在考虑任何观察数据之前，基于经验、先前知识或主观判断所获得的概率。它表示对事件发生的初始信念或先前的估计</li><li>后验概率（Posterior Probability）：后验概率是在考虑观察数据之后，通过使用贝叶斯定理计算得到的概率。它表示在观察到新的数据后，对事件发生概率的修正和更新</li></ul><p><strong>贝叶斯思想的核心就是通过结合先验知识（先验概率）和新的观察数据来更新和修正我们的信念（后验概率）</strong></p><p><strong>频率学派认为：概率是事件在一段时间内发生的频率。不参照过去的经验，只按照当前已有的数据进行概率推断</strong></p><p>例如你一直扔一个标准的硬币，你得到正面的概率永远是 50%</p><p><strong>贝叶斯派认为：概率是我们对一件事情发生的相信程度（信念度）。换句话说，发生某件事情的概率越大，表明我们对这件事情发生的信心越大</strong></p><p>1968 年 6 月，天蝎号核潜艇在大西洋亚速海海域失踪了，潜艇上的 99 名海军官兵全部杳无音信</p><p>对于搜寻人员来讲，无异于大海捞针。海军请来了科学家 John Craven 来组织搜寻，下面是他搜寻的步骤：</p><ul><li>John Craven 列出了一系列能够解释这场事故的场景</li><li>接着，他组建了了一个由各个领域专家组成的团队，让每个成员提供自己对每个可能场景发生概率的猜测</li><li>然后将整个海域被分成了很多个小格子，每个小格子有两个概率值 p 和 q，p是潜艇躺在这个格子里的概率，q 是如果潜艇在这个格子里，它被搜索到的概率</li><li>每次寻找时，先挑选整个区域内潜艇存在概率值最高的一个格子进行搜索</li><li>如果没有发现，概率分布图则会被“洗牌”一次，搜寻船只就会驶向新的“最可疑格子”进行搜索，这样一直下去，直到找到天蝎号为止</li></ul><img src="/2024/05/15/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E4%BA%BA%E7%94%9F/image-20230621132210356.png" class="" title="image-20230621132210356"><p>John Craven 采用的正是贝叶斯法——先根据先前的常识、经验进行预测得到先验概率然后进行搜索</p><p>每一次没搜到都不会被浪费，也不是简单被标注为不在这里，而是用于更新调整整体的估算概率（后验概率）</p><h2 id="贝叶斯算法"><a href="#贝叶斯算法" class="headerlink" title="贝叶斯算法"></a>贝叶斯算法</h2><p>当我们在面临人生的选择，又或者在进行人生规划的时候，我们可以结合贝叶斯思想来指导我们做决策</p><p><strong>要点一：拥抱不确定性</strong></p><p>贝叶斯思想告诉我们，概率是一种主观的信念，并且这个概率会随着后续更多的信息不断更新</p><p>这个概率不断更新的过程，其实就是不断尝试、不断接受新信息的过程</p><blockquote><p>我们想要做抖音，想要打造个人 IP，但是我们又担心万一自己辛苦一番，后面要是抖音这些自媒体不吃香了怎么办？</p></blockquote><blockquote><p>我们打算考研，但是我们又不知道自己能不能考得上，万一辛苦备考一年考不上该咋办?</p></blockquote><p>说到底就是害怕不确定性。确保成功是很多人做决定的前提，<strong>但是我们要知道，这个世界上并没有什么事情是确定的</strong></p><p>而贝叶斯思想告诉我们，在做一件事情之前（自媒体、考研），可以先有一个大概的评估（自媒体是否还是风口，自己过去的学习成绩怎么样），这个评估就是先验信念</p><p>然后就是先干起来再说，不要害怕不确定性、害怕错误，然后在这个过程中不断地更新自己的后验信念，调整策略</p><p><strong>越是追求确保成功的人，反而越脆弱，越容易掉入决策的陷阱，越容易上别有用心的人的当</strong></p><p>例如，市面上的种种骗术都是以“确保成功”为吸引点的</p><p><strong>要点二：重视基础概率</strong></p><p>贝叶斯思想中有两个概率——先验概率和后验概率</p><p>但还有一个概率我们需要知道——<strong>基础概率</strong></p><p>基础概率是关于一个类别、事件或条件的总体频率，是没有任何额外信息的情况下的概率</p><p>基础概率也可以被看作是一种特殊的先验概率，即没有任何特定证据的先验概率</p><p>我们要重视基础概率，例如去鱼多的地方捕鱼，鱼多就是一个基础概率</p><blockquote><p> 中国的首富一直是农夫山泉的老板。一个重要的原因是：2022年中国饮料市场约为12478 亿，其中包装饮用水占比约为 62.7%，基数够大，基础概率够大</p></blockquote><p>选择比努力更重要这句话也表明我们要重视基础概率</p><blockquote><p>就业方面是选择夕阳行业还是新兴行业？投资方面是看重局部时间的涨跌概率还是看重长期的基本面？填志愿是选择王牌专业还是冷门专业？</p></blockquote><p><strong>要点三：对新信息保持“敏感”，又有独立判断的“钝感”</strong></p><p>虽然贝叶斯派认为概率是主观的，但是并不意味着贝叶斯派是一群主观的人</p><p>相反，他们随时打算更新自己的观点</p><p>哪怕新的信息（证据）和自己的信念相反，哪怕消息很让人恼火，很羞辱自己的智商，贝叶斯派们也坦然接受。</p><p>但是他们又不是简单的见风使舵，他们不会因为新信息彻底抛弃旧的信念，还需要结合先验概率来独立判断</p><ul><li>对新信息保持“顿感”</li></ul><p>例如，我们拥有的某支股票近期波动较大，当我们看到某些看空的评论时，我们应该更新对这支股票的评估</p><ul><li>考虑基础概率和先验概率，独立判断的“钝感”</li></ul><p>对于这支股票，无论是市场政策还是其公司经营情况都是利好的（先验概率），那么即使我们收到了一些利空的信息或评论，也不能够立即得出股票需要抛出的结论</p><p>我们还需要权衡初步信念（长期看好这支股票）和新的证据（利空评论）</p><p>这样的平衡不但使我们对新信息保持敏感，又能保持我们对初步信念的忠实，避免被一些可能的偶然事件或者噪音误导</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个世界充满不确定性，我们需要拥抱不确定性，拥抱风险，要用逐步消除不确定性来接近确定性，而不是用确定性来证明确定性</p><p>在进行人生规划时，我们可以先基于自己的常识、经验和当前的信息来评估自己的决策。然后先干为敬，并在这个过程中不断地试错，以此来动态调整自己的决策</p><p>我们还需要重视基础概率，做成功的基础概率大的那个决策</p><p>最后，当有新信息出现的时候，我们需要开放接受，但也需要独立判断，既不盲目跟从，也不闭目塞听</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;之前看到过耗子叔写的一篇文章《程序算法与人生选择》，这篇文章中耗子叔结合计算机中的经典算法（排序、动态规划等等），让大家在人生道路的选择上获得了一些启发&lt;/p&gt;
&lt;p&gt;我最近看了一些关于贝叶斯思想的文章，觉得还挺有感触的，于是打算写一篇相</summary>
      
    
    
    
    
    <category term="随便写写" scheme="https://xxxsalted.github.io/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>有点迷茫。。。</title>
    <link href="https://xxxsalted.github.io/2024/05/15/%E6%9C%89%E7%82%B9%E8%BF%B7%E8%8C%AB%E3%80%82%E3%80%82%E3%80%82/"/>
    <id>https://xxxsalted.github.io/2024/05/15/%E6%9C%89%E7%82%B9%E8%BF%B7%E8%8C%AB%E3%80%82%E3%80%82%E3%80%82/</id>
    <published>2024-05-15T02:11:04.000Z</published>
    <updated>2024-05-15T02:11:34.714Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>最近发觉自己的节奏有点乱了，感到一阵迷茫</p><p>咸鱼毕业出来工作也有一年了，刚开始接触工作的时候，有许多工作上的东西能够让我去学习，无论是技术方面还是业务方面都进步很快</p><p>随着对手头的工作内容逐渐熟练起来，感觉进步的曲线开始逐渐平缓</p><p>即使偶尔逼自己看一些书籍或学习一门技术来提升自己，但是过一段时间之后可能就偃旗息鼓开始放弃了（例如之前热情高涨地要学 FLask ，买了书学了三分之一之后就再也没打开过了QAQ）</p><p>如果不利用工作之外的时间去提升自己，让自己继续成长的话（无论是技术方面还是非技术方面），即使刚开始工作的时候觉得自己领先了很多人，但只要把时间线一拉长，可能个人的积累就远远不如那些一直在成长的人</p><p>如果不能够保持自己的成长曲线，几年之后和别人的差距就会拉开</p><p>在意识到了这一点时候，我开始有意地调整自己，试图找到提升自己的节奏，但是在这个过程中，我发现了一些问题</p><p>首先就是觉得<strong>要学的东西太多太多了，我们究竟该如何找准方向，以及要学到什么程度才行？</strong></p><p>就拿 IT 行业举例好了，五花八门的方向（测试、前端、后端、算法、安全……），眼花缭乱的编程语言（JavaScript、C++、Python、Java、Go、Rust…..）</p><p>或者哪怕我们只学习计算机的基础学科，都可以无限深挖下去（操作系统底层原理、计算机网络、数据库、算法和数据结构…….）</p><p><strong>我们学习的速度，既赶不上知识过时的速度，也追不上知识更新迭代的速度</strong></p><p>其次就是<strong>在学习一门技术的过程中，发现自己并不享受这个过程，要不要及时止损换个方向？</strong></p><p>比如说，数据结构和算法一直是我解不开的心结，在大一的时候我被 c++ 这座大山压得喘不过气来，导致我对接下来学校的相关课程都很抵触（尤其是数据结构和算法）</p><p>后面找工作的时候发现一些企业在面试的时候会问你数据结构和算法相关的知识（手撕算法），于是抱着头悬梁锥刺股的决心强忍着恶心开始学习数据结构和刷力扣题</p><p>但是没过多久我就坚持不下去了，后面出来工作之后，脑子一热又有了刷力扣题的想法，果不其然，没刷几道就又开始犯恶心了，是真的写不下去</p><p>对于上面的情况，我相信有小伙伴也遇到过</p><ul><li><p>学会规划</p></li><li><p>找到驱动力</p></li></ul><p><strong>在学习一门技术的时候如果没兴趣或者感到不适，我的建议是放弃，转去学习其他的，除非你发自内心地享受这一过程（或者你的工作、你正在做的东西需要你这么做）</strong></p><p>所以如果你的学习目标是：掌握 TCP 和 UDP 协议的相关知识，那你恐怕很难坚持下去</p><p>总结下来，执行层面最关键的就是长期稳定的进步。我们既需要做好时间规划让我们真正开始执行，取得进步，我们需要驱动力让我们做到长期坚持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;最近发觉自己的节奏有点乱了，感到一阵迷茫&lt;/p&gt;
&lt;p&gt;咸鱼毕业出来工作也有一年了，刚开始接触工作的时候，有许多工作上的东西能够让我去学习，无论是技术方面还是业务方面都进步很快&lt;/p&gt;
&lt;p&gt;随着对手头的工作内容逐渐熟练起来，感觉进步的曲</summary>
      
    
    
    
    
    <category term="随便写写" scheme="https://xxxsalted.github.io/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>脆弱性-鲁棒性-反脆弱性</title>
    <link href="https://xxxsalted.github.io/2024/05/15/%E8%84%86%E5%BC%B1%E6%80%A7-%E9%B2%81%E6%A3%92%E6%80%A7-%E5%8F%8D%E8%84%86%E5%BC%B1%E6%80%A7/"/>
    <id>https://xxxsalted.github.io/2024/05/15/%E8%84%86%E5%BC%B1%E6%80%A7-%E9%B2%81%E6%A3%92%E6%80%A7-%E5%8F%8D%E8%84%86%E5%BC%B1%E6%80%A7/</id>
    <published>2024-05-15T02:09:38.000Z</published>
    <updated>2024-05-15T02:10:10.197Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>在开始本篇文章之前，我想先问小伙伴们一个问题：</p><blockquote><p>每个人都渴望稳定且有序的生活，但如果一个人的生活过于稳定有秩序且可预测，会有什么不好的影响吗？</p><p>如果你每天做同样的事情，都按照同样的方式来度过，一旦出现不可预测的变故，你有应对的策略吗？</p></blockquote><p>在《贝叶斯算法人生》中，我说过这个世界是充满不确定的（上帝掷骰子）</p><p>在一个快速变化且充满不确定性的世界里，一个人的生活过于稳定和循规蹈矩，那他&#x2F;她可能会变得很脆弱</p><p>因为他&#x2F;她可能还没有做好准备去应对突如其来的变化（黑天鹅事件）</p><blockquote><p>1.只有固定的收入，一旦遭遇裁员或者家里发生重大变故需要一大笔钱就会导致个人经济陷入困境</p><p>2.仅仅掌握一项技能（知识），一旦遭遇裁员就会导致个人职业遭受危机或者遇到新的挑战自己却无能为力</p></blockquote><ul><li>问：</li></ul><p><strong>那我们该如何在充满不确定且快速变化的世界里去适应、生存呢？我们该如何应对未来的不确定性？</strong></p><ul><li>答：</li></ul><p><strong>个人在日常生活、工作或学习中尽量减少脆弱性并提高自己的反脆弱性。在遇到挑战或者压力时，不但要能够应对，还要试图从中学习和成长，让自己变得更强，以此来更好地应对未来的不确定性和变化</strong></p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>我们先来了解下什么是”脆弱性-鲁棒性-反脆弱“（Fragility-Robustness-Antifragility）</p><ul><li><strong>脆弱性（Fragility）</strong></li></ul><p>指的是系统、组织或个体在面对压力、变化或外部冲击时容易往往缺乏适应能力，一旦面对压力或冲击，容易出现故障、瘫痪或崩溃</p><p>例如一个人的免疫系统脆弱，他们可能更容易受到疾病的侵袭，并且可能需要更长时间来康复</p><ul><li><strong>鲁棒性（Robustness）：</strong></li></ul><p>指系统、组织或个体面对压力、变化或外部冲击时能够保持正常稳定运行或快速恢复的能力</p><p>例如鲁棒的人在面对挑战或者不确定时能够保持稳定，应对困难</p><ul><li><strong>反脆弱性（Antifragility）：</strong></li></ul><p>反脆弱性是由著名学者纳西姆·尼古拉斯·塔勒布（Nassim Nicholas Taleb）提出的概念</p><p>指的是系统、组织或个体在面对压力、变化或外部冲击时能够从中受益、逐渐变得更强大的能力</p><p>例如反脆弱的免疫系统不仅仅是能够抵抗疾病，而且在受到挑战时能够变得更强大。当一个人接触到某种病原体时，免疫系统会学习并适应，产生抗体和免疫记忆</p><p>这种经验使得免疫系统在面对同一病原体再次出现时能够更快速、更有效地应对，甚至可以对其他类似病原体具有更强的应对能力</p><p>简单来说，如果把这三种特性体现在人的身上的话则是：</p><ul><li>脆弱的人在面对压力和变化时容易受损</li><li>鲁棒的人在面对压力和变化时能够保持稳定或快速恢复</li><li>反脆弱的人在面对压力和变化时不但能够保持稳定，还能从中收益，以此来变得更强</li></ul><h2 id="为什么要提高反脆弱性"><a href="#为什么要提高反脆弱性" class="headerlink" title="为什么要提高反脆弱性"></a>为什么要提高反脆弱性</h2><p>这个世界是充满不确定性的，如果一个脆弱的人过得非常有秩序且稳定，一旦他的生活方式或生活环境发生了改变，那么可能会导致这个人往往不能够适应甚至受到伤害</p><p>从心理方面来看，一个心理脆弱的人一旦受到某些打击（职场受挫、感情受挫等），会出现情绪不稳定、焦虑、抑郁、自卑等问题</p><p>从身体方面来看，一个身体脆弱的人一旦外部病毒的入侵或内部功能的紊乱时，就会导致免疫系统、器官出现各种问题</p><p>从经济方面来看，一个经济脆弱的人一旦陷入财务困境、缺乏收入来源和不稳定的就业状况就会受到贫困、失业和金融危机的影响</p><p>从社会关系来看，一个社会关系脆弱的人更容易缺乏自信、社交回避、沮丧或社交焦虑，使得难以建立和维持健康、互利的社会关系</p><p>由上面我们可以得知：<strong>脆弱性对人的伤害是一个多方面的问题，它可能导致身体健康问题、心理疾病、社交隔离和不稳定的经济状况，影响个人的整体和生活质量</strong></p><p>所以我们需要减少脆弱性，提高鲁棒性。但是还是远远不够的</p><p><strong>提高鲁棒性只能让你在面对压力或者挑战时保持稳定，你还需要提高反脆弱性来试图从压力、挫折和挑战中学习和成长</strong></p><h2 id="如何提高"><a href="#如何提高" class="headerlink" title="如何提高"></a>如何提高</h2><p>我们该如何提高反脆弱性</p><p><strong>增强学习和适应能力：</strong></p><p>保持好奇心和学习的心态，积极主动地获取新的知识和技能。不断提升自己的适应能力，以适应不同的环境和情况</p><p>比如说不桎梏于一个领域内的知识技能，主动学习新的技术，以适应变化，并将其视为提升自己的机会</p><p><strong>从失败中学习：</strong></p><p>将失败视为学习的机会，从中汲取教训和经验。不害怕失败，从失败中寻找改进和成长的机会。</p><p>反脆弱的人能够从失败中迅速恢复并采取行动，以更好地适应未来的挑战</p><p><strong>保持身心健康：</strong></p><p>注重身心健康的维护，包括良好的睡眠、健康的饮食、适度的锻炼和心理压力管理。身心健康的状态有助于增强适应能力和应对挑战的能力</p><p><strong>培养创造力和创新思维：</strong></p><p>鼓励自己尝试新事物、提出新的想法和解决问题的方法。培养创造力和创新思维的能力，以适应不断变化的环境和寻找新的机会</p><p><strong>保持多元化：</strong></p><p>不要把鸡蛋放在同一个篮子里。不仅限于特定领域或技能，尝试学习和发展多种技能和知识</p><p>比如说将投资分散到不同的资产类别（如股票、债券、房地产、大宗商品等）以及不同的行业和地区，以此来降低投资组合的整体风险并提高整体回报</p><p>上面这些都是提高反脆弱性的一些方法论，但是每个人都是独立的个体，所以最重要的是找到适合自己的方式</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我们生活的世界是充满变化和不确定性的，而一个过于有序和预测性的生活可能无法很好地适应这些变化和不确定性</p><p>我们应该在追求秩序和稳定的同时，也要接受和适应一定的不确定和变化</p><p>尝试各种不同的事情，去不同的地方，接触不同的人，多去探索和试错可以有助于我们增强鲁棒性和反脆弱性</p><p>总结一下就是：</p><p><strong>我们应该在追求确定性和保持不确定性之间寻找一个平衡</strong></p><p><strong>既需要一定的确定性来保持我们的生活有序和稳定，也需要一定的不确定性来增强我们的鲁棒性和反脆弱性</strong></p><p>最后以尼采说过的一句话来结束今天的文章吧</p><p><strong>”What Doesn’t Kill You Makes You Stronger“</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;在开始本篇文章之前，我想先问小伙伴们一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人都渴望稳定且有序的生活，但如果一个人的生活过于稳定有秩序且可预测，会有什么不好的影响吗？&lt;/p&gt;
&lt;p&gt;如果你每天做同样的事情，都按照同样的方式</summary>
      
    
    
    
    
    <category term="随便写写" scheme="https://xxxsalted.github.io/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>2022 年度总结</title>
    <link href="https://xxxsalted.github.io/2024/05/15/2022-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://xxxsalted.github.io/2024/05/15/2022-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2024-05-15T02:07:01.000Z</published>
    <updated>2024-05-15T02:08:37.820Z</updated>
    
    <content type="html"><![CDATA[<p>上半年我还是一名在校大学生，下半年就毕业步入职场了</p><p>总的来说，2022年的上半年更多的是悠闲懒散的校园时光，下半年转换成了充实的职场生活</p><h2 id="时间花销"><a href="#时间花销" class="headerlink" title="时间花销"></a>时间花销</h2><p>做不到像 Grey Li 那样进行时间统计，具体到分钟那种</p><p>下图是他的时间记录，真的很厉害</p><img src="/2024/05/15/2022-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20230106150549626.png" class="" title="image-20230106150549626"><p>大概的时间花销如下：</p><p>1~2月：寒假呆在家</p><p>3~6月：在学校做毕业设计，毕业答辩</p><p>7月：正式成为一名打工人，开始熟悉职场生活</p><p>8~9月：熟悉公司业务，技术、写文章、参加新人培训</p><p>10月：能够开始独立解决工作上的问题、写文章、刷力扣题</p><p>11月：转正答辩、写文章、刷力扣题</p><p>12月：做一些课设项目、写文章</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>公众号曾经停更过一段时间（至少半年），原因是去年秋招拿到 offer 之后就开始摆烂起来，不想学技术，直到今年的七月份才重新恢复更新</p><p>从七月份到年底更新了 36 篇文章，粉丝数量翻了三倍，在这里感谢大家对我的支持，是你们给了我写作的动力</p><p>这一年开始写文章的时候不再追求速度，更看重质量多一点，每次开始写之前都会去翻阅大量的资料，无论是文章内容还是文章标题，都会有点敖丙的影子</p><p>知乎上的阅读量已经达到 14w+了，还参与了 CSDN 博客之星的评选，有三篇文章被收录进了华为云开发者联盟里</p><img src="/2024/05/15/2022-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20230106150603603.png" class="" title="image-20230106150603603"><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><p>2022年只玩了两款游戏——dota 和 csgo，距离我上一次打 dota 已经是七年前了</p><p>电影和电视剧印象比较深的是《枪火》、《黑袍纠察队》、《闻香识女人》</p><p>音乐曲库没怎么更新，这一年听的最多的就是 kanye 的歌，成为网易云音乐年度歌手</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>除了翻过几本技术书外，今年的几乎没有看什么书，印象比较深刻的有《消失的地平线》、《共同基金常识》、《乔布斯传》、《人类简史》</p><p>《乔布斯传》看了两遍</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从好坏两方面总结今年</p><p>Good：</p><ul><li>找到一份满意的工作，搬到上海</li><li>各平台的粉丝数量日益增多，并且在各平台回答了若干问题</li><li>接了一些课设项目，赚点外快</li><li>在公司遇到了很多优秀的前辈和同事</li><li>寒假胡吃海喝胖了三十斤之后成功减脂</li></ul><p>Bad：</p><ul><li>阅读量太少</li><li>学东西太少、产出太少</li><li>力扣题刷了一个月不到就放弃了</li><li>刷太多抖音和小红书</li></ul><p><strong>悟已往之不谏，知来者之可追</strong></p><p>2023年计划：</p><ul><li><del>考取金融相关从业资格证</del></li><li><del>把力扣难度为简单的题都刷一遍</del></li><li>把买来积灰的书都看了，少刷抖音和小红书</li><li>体脂降到12以下（现在是14左右）</li></ul><p>年度总结还是要在当年完成，这样就不用纠结「今年」和「明年」两个词的用法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上半年我还是一名在校大学生，下半年就毕业步入职场了&lt;/p&gt;
&lt;p&gt;总的来说，2022年的上半年更多的是悠闲懒散的校园时光，下半年转换成了充实的职场生活&lt;/p&gt;
&lt;h2 id=&quot;时间花销&quot;&gt;&lt;a href=&quot;#时间花销&quot; class=&quot;headerlink&quot; title=&quot;时</summary>
      
    
    
    
    
    <category term="年度总结" scheme="https://xxxsalted.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    <category term="随便写写" scheme="https://xxxsalted.github.io/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>2023 年度总结</title>
    <link href="https://xxxsalted.github.io/2024/05/15/2023-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://xxxsalted.github.io/2024/05/15/2023-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2024-05-15T02:06:55.000Z</published>
    <updated>2024-05-15T02:09:12.309Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>果然出来工作后地球转速加快是正常现象，不知不觉 2023 年就结束了，我到现在都有种昨天刚过完 2023 年春节的恍惚。</p><p>工作时长已有一年多，刚开始接触工作的时候，有许多工作上的东西能够让我去学习，无论是技术方面还是业务方面都进步很快。</p><p>随着工作逐渐得心应手，感觉进步的曲线开始逐渐平缓。</p><p>即使偶尔逼自己看一些书籍或学习一门技术来提升自己，但是过一段时间之后就偃旗息鼓开始放弃了（例如之前热情高涨地要学 FLask ，买了书学了三分之一写了两篇文章之后就再也没打开过）。</p><p>我开始感到焦虑和纠结，不学的时候担心如果每天除了工作外没有额外的学习，自己将无法有所进步，与他人的差距逐渐加大；学的时候发现自己并不享受这个过程，或者每当学习时，内心就会出现一个声音：工作了一天这么累了，别再学了，好好休息刷刷短视频不好吗？</p><p>每当纠结时不出意外的话往往最后多半躺在床上玩手机刷短视频，至多做些明天的规划。</p><h2 id="大脑"><a href="#大脑" class="headerlink" title="大脑"></a>大脑</h2><p>现在我一般通过两种途径去驱动自己学习：</p><ul><li>写文章</li><li>工作</li></ul><p>工作这块就不细说了，写文章是我主动学习的一个有效途径，现在基本能保持一周 2~3 的文章更新速度，现在已经有 169 篇原创了。</p><p>前 100 篇以自己的学习笔记居多，100 篇之后的文章更多的是译文。虽然说是译文，但是我觉得写翻译文章也是比较耗费精力的，远不是简单使用翻译软件就能完成的工作。</p><p>下面分享一些我觉得比较优质的信息源&#x2F;个人博客：</p><ul><li>阮一峰的网络日志：<a href="https://www.ruanyifeng.com/blog/">https://www.ruanyifeng.com/blog/</a><ul><li>计算机科普博主，每周五准时更新</li></ul></li><li>酷 壳 – CoolShell：<a href="https://coolshell.cn/">https://coolshell.cn/</a><ul><li>耗子叔，我之前的文章多次提及过</li></ul></li><li>豌豆花下猫：<a href="https://pythoncat.top/">https://pythoncat.top/</a><ul><li>优质的 python 信息源</li></ul></li><li>李辉：<a href="https://greyli.com/">https://greyli.com/</a><ul><li>Flask 维护者，《Flask Web 开发实战：入门、进阶与原理解析》作者</li></ul></li><li>卡瓦邦噶：<a href="https://www.kawabangga.com/">https://www.kawabangga.com/</a><ul><li>一位很厉害的 SRE，转发过他很多文章</li></ul></li><li>栋哥的赛博空间：<a href="https://liuyandong.com/">https://liuyandong.com/</a><ul><li>每天都会去上面听栋哥讲故事</li></ul></li><li>RealPython：<a href="https://realpython.com/">https://realpython.com/</a><ul><li>很好的 Python 学习网站，很多国外学校会拿上面的内容当课程</li></ul></li></ul><p>今年开始尝试在掘金、阿里云等平台上发布文章</p><p><strong>CSDN</strong> </p><p>自从我把 CSDN 上面的文章改成粉丝可见之后，我的粉丝量嘎嘎涨，后悔没早点意识到这一点哈哈哈。</p><p>不出意外的话这个月就能拿到 CSDN 的专家认证。</p><img src="/2024/05/15/2023-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20240103173735303.png" class="" title="image-20240103173735303"><p><strong>知乎</strong></p><p>接近 50w 的阅读量，有一篇文章还被官方收录进去。</p><img src="/2024/05/15/2023-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20240103173904233.png" class="" title="image-20240103173904233"><p>不得不说，知乎在创作者福利这块还是挺好的，每年传统节日都能收到知乎送的礼物。</p><p><strong>阿里云</strong></p><p>拿了个阿里云专家博主的证书，以及一些小礼品啥的。</p><img src="/2024/05/15/2023-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20240103175128248.png" class="" title="image-20240103175128248"><p><strong>小红书</strong></p><p>小红书可以说是 2023 年新尝试的赛道了，区别于其他平台，小红书内容更多的是图文形式，而且小到昵称头像，大到个人简介笔记文案都有自己的规则。</p><p>我也是在慢慢摸索当中吧，5月份创的号，现在粉丝 1.2 w</p><p><strong>阅读</strong></p><p>2023 年抽空读了一些书，下面都是我觉得不错的：</p><ul><li>《穿越计算机的迷雾》：计算机科学的科普入门书，从电子和硬件角度看的计算机史，大多内容人人都能看懂，里面很多俏皮话，有些人可能觉得啰嗦废话多，但我觉得比教科书有趣。</li><li>《褚时健传》：我挺喜欢读人物传记的，这本书详尽地描述了褚时健的一生。</li><li>《反脆弱》：修行不够，太难读懂了，硬着头皮读下去的。</li><li>《纳瓦尔宝典》：文字精炼简短，读完我感觉我又行了。</li><li>《Flask web 开发实战》：希望今年不要再半途而废了。</li></ul><p><strong>财务</strong></p><p>打工是通过投入时间和体力来赚取劳动报酬（金钱），是许多人获取收入的一种方式。然而，它的缺点显而易见，因为时间和收益之间往往存在线性关系，很难突破这种限制。</p><p>2023 年大 A 大家有目共睹，始终硬不起来，好像大家信心都不是很足</p><p>今年降低预期，不求跑赢通胀，只求保本（今天回到家，煮了点面吃，一边吃面一边哭，泪水滴落在碗里，没有开灯）</p><h2 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h2><p>上半年体脂一直维持在 12% 以下，为了维持低体脂而不得不低碳+热量缺口，导致我每天无精打采神情恍惚，下半年果断决定增肌。在健身房认识了很多大佬，也有幸认识了两个健身搭子&amp;好朋友</p><p>不是我去健身房，是健身房收留了我。几乎没什么娱乐活动的我工作之余大部分时间都在健身房里，一周五练</p><p>一开始是四分化，腿胸背肩，但是后面不打算单独拿出一天来练肩，先沉淀一下大肌群。练胸的那天把中束带一下，练背那天把后束带一下就行了</p><style>.cjsyyuhopzem{zoom: 67%;}</style><p><del>希望今年卧推能够突破 100 kg</del></p><h2 id="人生可以没有目标"><a href="#人生可以没有目标" class="headerlink" title="人生可以没有目标"></a>人生可以没有目标</h2><p>又是一年过去了，人们通常会回顾这一年实现了哪些目标，下一年要设定哪些目标，但是从今年开始，我不打算设立目标了，只做年终回顾</p><p>在读阮一峰的科技爱好者周刊时，他推荐了一篇引人深思的文章：<a href="https://m.signalvnoise.com/ive-never-had-a-goal/">《我从来没有目标》</a></p><p>于是我打算把阮一峰老师对于这篇文章的感想分享出来</p><p>内容摘自《科技爱好者周刊（第 283 期）：[年终感想] 没有目的地，向前走》<a href="https://www.ruanyifeng.com/blog/2023/12/weekly-issue-283.html">https://www.ruanyifeng.com/blog/2023/12/weekly-issue-283.html</a></p><blockquote><p>今天，我想分享 BaseCamp 公司创始人 Jason Fried 的一篇短文，题目就叫<a href="https://m.signalvnoise.com/ive-never-had-a-goal/">《我从来没有目标》</a>。</p><p>下面就是这篇文章的主要内容。</p><p>我不记得自己有什么目标，那种很具体的目标。</p><p>有些事情我一直想做，但如果不做，我也能接受。有些事情值得去做，但如果没有做到，我也不觉得很遗憾。</p><p>我的目标不是那样。</p><p>我做事，我尝试，我建造，我想要取得进步，我想让我做的东西使得自己、使得公司、使得家庭、使得社会变得更好。但我从未设定过目标。这不是我做事的方式。</p><p>目标是当你到达时就会消失的东西。一旦你到达了，它就消失了。你总是可以设置另一个，我只是不按这样的步骤行事。</p><p>我只是做我正在做的事情，然后就到了现在的地方。今天我继续以同样的方式对待工作和生活。</p><p>他的文章到这里就结束了。我很喜欢作者的这种态度。</p><p>你可以不给自己设定目标，因为<strong>目标是你做事的副产品</strong>。只要你按照自己的信念，不断地努力去做事、去尝试，就可以了，至于能做到哪一步，顺其自然就好了。</p><p>有一句成语”<a href="https://baike.baidu.com/item/%E5%8A%9F%E4%B8%8D%E5%94%90%E6%8D%90/10712036">功不唐捐</a>“，就是这个意思，付出的努力不会白费。</p><p>西方人说：”Passion never fails”（激情不会失败），也是同样的意思。</p><p>建造那些你想要建造的东西，努力做事，认真生活，人生可以没有目标。</p><p>新的一年，我想我也是这样，没有目的地，就是向前走。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;果然出来工作后地球转速加快是正常现象，不知不觉 2023 年就结束了，我到现在都有种昨天刚过完 2023 年春节的恍惚。&lt;/p&gt;
&lt;p&gt;工作时长已有一年多，刚开始接触工作的时候，有许多工作上的东西能够让我去学习，无论是技术方面还是业务方</summary>
      
    
    
    
    
    <category term="年度总结" scheme="https://xxxsalted.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    <category term="随便写写" scheme="https://xxxsalted.github.io/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客插入本地图片时遇到的坑</title>
    <link href="https://xxxsalted.github.io/2024/05/08/hexo-%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://xxxsalted.github.io/2024/05/08/hexo-%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2024-05-08T02:31:40.000Z</published>
    <updated>2024-05-09T01:31:18.581Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>最近一直在折腾博客的事，说是 hexo 极易上手，我觉得只仅限于在安装部署的时候，随着对 hexo 的深入使用，发现遇到的问题还是挺多的。</p><p>那今天来讲一下我在把本地图片插入到 hexo 博客文章中遇到的坑。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>这是我的 hexo 环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo: 7.2.0</span><br><span class="line">node: 18.20.0</span><br><span class="line">npm: 10.5.0</span><br></pre></td></tr></table></figure><p>除此之外，我还安装了一个图片路径转换的插件：<code>hexo-asset-images</code>，版本是 0.03。</p><p>Hexo 配置文件 <code>_config.yml</code> 里有下面这个配置，且将其置为 true</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这个功能实际上是Hexo官方文档中提到的资源文件夹功能：<strong>即当你使用 <code>hexo new 新文章</code> 命令生成一篇新文章时，不但会在 <code>\source\_posts</code> 目录下生成一个 <code>新文章.md</code> 文件，还会生成一个同名的文件夹，这个文件夹下面可以存放该文章的所有资源（例如图片、附件等）</strong> </p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508093403303.png" alt="image-20240508093403303"></p><blockquote><p>实际上你可以不用 <code>hexo new</code> 命令，直接在 <code>\source\_posts</code> 下创建一个 md 文件和同名的文件夹也能达到一样的效果。</p></blockquote><p>有了上面的配置，Hexo 在 public 目录下生成 html 文件时，会把文章对应的目录下的图片等附件复制过去。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508093725129.png" alt="image-20240508093725129"></p><p>原理讲完，现在实际操作一下。</p><p>先创建新文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new Kafka-如何保证消息消费的全局顺序性</span><br></pre></td></tr></table></figure><p>然后编写文章，并把文章中的资源放在同名的目录下：</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508094820593.png" alt="image-20240508094820593"></p><p>根据插件 <code>hexo-asset-images</code> 的 README 内容，我们需要把文章中的图片路径改成跟图片名一致：</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508095315333.png" alt="image-20240508095315333"></p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508095429116.png" alt="image-20240508095429116"></p><p>这个时候本地的文章是找不到图片路径的，所以不会显示。</p><p>然后执行下面的命令在本地验证一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>结果发现图片没有正常显示：</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508095657692.png" alt="image-20240508095657692"></p><p>按 <code>F12</code> 查看一下图片的路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image-20231127105610363.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image-20231127105610363&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，图片路径并没有转换成功。</p><h2 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h2><p>根据网上的教程试了好久，最终在一处不起眼的评论区发现了解决办法。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508101457710.png" alt="image-20240508101457710"></p><p>既然 <code>hexo-asset-images</code> 不管用，那就换一个插件，<strong>我们使用 <code>hexo-asset-img</code></strong></p><p>首先卸载掉 <code>hexo-asset-images</code> （直接在 <code>node_modules</code> 目录下把插件的目录删除即可 ）</p><p>然后安装新插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><p>根据里面的 README 内容，把图片路径改成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![image-20231127105610363](Kafka-如何保证消息消费的全局顺序性/image-20231127105610363.png)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508101835082.png" alt="image-20240508101835082"></p><p>然后执行下面的命令在本地验证一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>发现图片正常显示：</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240508101927003.png" alt="image-20240508101927003"></p><p>图片路径转换成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;/2024/04/29/Kafka 如何保证消息消费的全局顺序性/image-20231127105610363.png&quot;</span> class=<span class="string">&quot;&quot;</span> title=<span class="string">&quot;image-20231127105610363&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>我们从 README 里面还了解到：<strong>大概是从 <code>Hexo 5</code> 开始， <code>hexo-asset-image</code> 已经失效, 并且此仓库已 <code>archived </code>。</strong></p><p>这也就是一开始使用  <code>hexo-asset-image</code> 插件导致图片路径没能转换成功的原因</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;最近一直在折腾博客的事，说是 hexo 极易上手，我觉得只仅限于在安装部署的时候，随着对 hexo 的深入使用，发现遇到的问题还是挺多的。&lt;/p&gt;
&lt;p&gt;那今天来讲一下我在把本地图片插入到 hexo 博客文章中遇到的坑。&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
    <category term="博客" scheme="https://xxxsalted.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 如何保证消息消费的全局顺序性</title>
    <link href="https://xxxsalted.github.io/2024/04/29/Kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B1%80%E9%A1%BA%E5%BA%8F%E6%80%A7/"/>
    <id>https://xxxsalted.github.io/2024/04/29/Kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B1%80%E9%A1%BA%E5%BA%8F%E6%80%A7/</id>
    <published>2024-04-29T15:15:37.000Z</published>
    <updated>2024-05-09T02:15:15.774Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>今天我们继续来讲一讲 Kafka</p><p>当有消息被生产出来的时候，如果没有指定分区或者指定 key ，那么消费会按照【轮询】的方式均匀地分配到所有可用分区中，但不一定按照分区顺序来分配</p><img src="/2024/04/29/Kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B1%80%E9%A1%BA%E5%BA%8F%E6%80%A7/image-20231127105610363.png" class="" title="image-20231127105610363"><p>我们知道，在 Kafka 中消费者可以订阅一个或多个主题，并被分配一个或多个分区</p><img src="/2024/04/29/Kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B1%80%E9%A1%BA%E5%BA%8F%E6%80%A7/image-20231127103655711.png" class="" title="image-20231127103655711"><p>如果一个消费者消费了多个分区，某些场景下消费者需要顺序地消费消息，但消息并不是按照顺序分配给分区的，所以就不一定能够保证消息消费的全局顺序性</p><p>比如下图中 <code>Msg0002</code> 消息并不是在 <code>Msg0001</code> 消息之后的，就有可能导致消费者先把 <code>Msg0002</code> 消息给消费， <code>Msg0001</code> 消息才被消费</p><img src="/2024/04/29/Kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B1%80%E9%A1%BA%E5%BA%8F%E6%80%A7/image-20221128145640246.png" class="" title="image-20221128145640246"><p>那么这种情况该怎么解决？<strong>如何尽可能地保证消息消费的全局顺序性？（即这些消息具有因果关系）</strong>要想消费消息 B 必须先消费消息 A</p><p>要注意的是，<strong>Kafka 的设计目标是提供高吞吐量和低延迟，而不是强制保证全局有序性</strong></p><p>所以这篇文章探讨的是需要强调全局顺序性场景下的 Kafka 应用</p><h2 id="单分区"><a href="#单分区" class="headerlink" title="单分区"></a>单分区</h2><p>最简单粗暴的方法，虽然 Kafka 不能保证全局消费顺序性，但是<strong>能够保证分区内的消息顺序性</strong></p><img src="/2024/04/29/Kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B1%80%E9%A1%BA%E5%BA%8F%E6%80%A7/image-20221128151818767.png" class="" title="image-20221128151818767"><p>所以我们可以只创建一个分区，并让消费者消费这个分区，这样就能够保证消费的消息是有序的</p><p>但是这样做大大降低了吞吐量和处理效率，容易使得性能出现瓶颈</p><h2 id="基于-key"><a href="#基于-key" class="headerlink" title="基于 key"></a>基于 key</h2><p>在 Kafka 中，基于 key 的消息分配策略是通过消息中的键（key）来确定消息发送到哪个分区</p><p>当生产者发送消息时，可以指定一个键（key），Kafka 使用这个键通过哈希算法来确定消息被发送到哪个分区</p><img src="/2024/04/29/Kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B1%80%E9%A1%BA%E5%BA%8F%E6%80%A7/image-20221128152458549.png" class="" title="image-20221128152458549"><p>由于相同的 key 就发送到同一分区，这样就能够保证了消费的消息是有序的</p><p>然而，如果只有一个消费者消费相同 key 的消息，那么与单分区相比，基于 key 的消息分配策略不会提高吞吐量</p><p>因为即使相同 key 的消息在多个分区中，但同一消费者依然只能从一个分区中消费，这并不会增加整体的处理能力。</p><p>但如果有多个消费者消费相同 key 的消息，基于 key 的分区策略可以提高消费者并行消费的能力</p><img src="/2024/04/29/Kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B1%80%E9%A1%BA%E5%BA%8F%E6%80%A7/image-20231127131201251.png" class="" title="image-20231127131201251"><p>因为这些消费者可以同时从不同分区中读取消息，从而增加整体的处理速度。这种情况下，基于 key 的消息分配可以提高整体吞吐量</p><p>最后总结一下：</p><ul><li>Kafka 的设计目标是提供高吞吐量和低延迟，而不是强制保证全局有序性，所以Kafka使用多分区的概念，并且只保证单分区有序</li><li>如果想要实现消息的全局有序</li><li>单分区策略：<ul><li>一个主题下只创建一个分区，一个消费者只消费一个分区，但这样做毫无并发性可言，极大降低系统性能</li></ul></li><li>基于 key 的消息分配策略：<ul><li>由于相同的 key 就发送到同一分区，这样就能够保证了消费的消息是有序的。然而，如果只有一个消费者消费相同 key 的消息，与前面单分区相比没有什么区别</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;今天我们继续来讲一讲 Kafka&lt;/p&gt;
&lt;p&gt;当有消息被生产出来的时候，如果没有指定分区或者指定 key ，那么消费会按照【轮询】的方式均匀地分配到所有可用分区中，但不一定按照分区顺序来分配&lt;/p&gt;
&lt;img src=&quot;/2024/04</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
    <category term="Kafka" scheme="https://xxxsalted.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>当你打开终端并输入命令时会发生什么?（上）</title>
    <link href="https://xxxsalted.github.io/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://xxxsalted.github.io/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2024-04-29T15:14:54.000Z</published>
    <updated>2024-04-29T15:15:18.069Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>参加过校招面试的小伙伴们肯定对下面这道面试题很熟悉：“当你在浏览器输入一段网址后会发生什么？”。这道面试题可以说是很经典了，因为其涉及大量网络协议，可以非常直观的看出小伙伴们对计算机网络体系的整体把握程度</p><p>但如果问题换成：“当你打开终端并输入 <code>ls</code>  时会发生什么？”，有多少小伙伴能够回答出来呢？</p><h2 id="终端的前世今生"><a href="#终端的前世今生" class="headerlink" title="终端的前世今生"></a>终端的前世今生</h2><p>大多数现代终端应用程序的工作方式都来自于其历史前辈——电传打字机（teletypes，简称 tty）</p><p>在大型计算机的时代，当时数据存储在磁带上，计算机的内存以 kB 为单位，电传打字机就是为了它们而被设计出来</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8A%EF%BC%89/image-20231213141137888.png" class="" title="image-20231213141137888"><p>如上图，左边的是 IBM 2741电传打字机，右边是 IBM System&#x2F;360 Mo. 40大型计算机</p><p>电传打字机是允许用户与计算机交互的基本文本客户端。teletypes 其实是 teletypewriter的缩写，因为它是从打字机（typewriters）演变过来的</p><p>如上图所示，电传打字机和大型计算机通过连接两端的物理线来进行通信。沟通过程如下：</p><ul><li>当用户从电传打字机输入时，ASCII 文本将一个字符一个字符地通过网络传输</li><li>计算机的内核接收字符并对其进行解码</li><li>接着字符被送到一个名为 <strong>TTY driver</strong> 的驱动程序，这里负责将输入发送到用户程序并收集输出</li><li>最后，内核将输出发送回电传打字机 ，以便显示给用户</li></ul><p>需要提到的一点是 <strong>line discipline</strong>（行规则），它会将字符缓冲到内核内存中，直到按下 Enter” 键，程序才会接收到输入</p><p>line discipline 允许这块缓冲区是可编辑的，并提供了一些与程序无关的快捷键（例如 ctrl-w）</p><p>这在当时是一项重要的性能优化，因为让程序员一个字符一个字符的处理是非常低效的</p><p>随着计算技术的进步，这些独立组件中的许多都实现了现代化。比如说电传打字机被终端所取代，终端是完全电子的机器，包括电子显示器</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8A%EF%BC%89/image-20231213144235793.png" class="" title="image-20231213144235793"><p>上图是 DEC 于 1978 年发布的 VT100 终端机（VT &#x3D; video terminal），它实现并推广了至今仍在使用的 ANSI 转义码</p><p>随着电子终端的诞生，出现了越来越多的功能（例如颜色、铃声）。但本质上跟电传打字机完全相同——<strong>发送输入字符流并显示输出</strong></p><p>现如今人人都有一台自己的电脑，这些电脑的操作系统可以监督许多应用程序，终端不再是专门的硬件，而是变成了这些应用程序中的一个</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8A%EF%BC%89/image-20231213144850897.png" class="" title="image-20231213144850897"><p>与典型的 GUI 应用程序一样，终端是操作系统监督下的一个进程，它监听来自用户的事件和输入，并告诉操作系统在窗口中显示什么（终端不直接与外设交互，而是通过驱动程序和窗口管理器）</p><p>有时候我们还会听到 ”终端模拟器“ 这个词，而不是简单的称之为 ”终端“。这是因为 ”终端“ 指的是专门的硬件（终端机），而现在大多数的终端只是对该设备的模拟，是一个应用程序</p><p>但是我们这里不做区分，”终端模拟器“ 和 ”终端“ 含义一样</p><p>那么当我们打开终端时会发生什么呢？</p><h2 id="打开终端"><a href="#打开终端" class="headerlink" title="打开终端"></a>打开终端</h2><p>上面我们提到过，终端是一个应用程序，能够让你 ”使用你的电脑“（即在上面运行程序）。我们的电脑上可能已经存在了 <code>ls、rm、mv</code> 等程序</p><p>但是我们不满足于使用这些简单的命令，我们还希望使用脚本来实现自动化， 这些脚本将许多命令的序列组合在一起，使用分支条件逻辑，运行重复循环或并行化命令等</p><p>为了让计算机能够读懂我们的脚本并执行起来，我们需要一个完整的可交互的解释型的编程环境——shell</p><p>将其他程序作为进程运行，让操作系统内核读懂你写的脚本，这些工作都由 shell 完成。目前常见的 shell 有 Bash、Zsh 等</p><p>终端和 shell 是两个独立的程序：</p><ul><li>shell 负责解释你输入的命令</li><li>终端负责 UI 相关的东西，比如字体、颜色等</li></ul><p>当我们打开终端时，终端会根据用户生成一个 shell 进程，以及用户与 shell 之间，用户与 shell 启动的进程之间通信的方法</p><p>这个 shell 进程负责解释和执行用户输入的命令，并与用户进行交互。用户在终端输入的命令将通过这个通信通道传递给 shell 进程进行解释执行，并将执行结果反馈给用户显示在终端上</p><p><strong>创建 PTY</strong></p><p>伪终端设备（PTY）是在计算机操作系统中创建的一个虚拟设备，用于模拟物理终端的功能</p><p>在 UNIX、Linux 和类 UNIX 系统中，PTY 用于在用户和程序之间建立一个通信通道，允许用户通过终端会话与程序进行交互</p><p>PTY通常由两个主要部分组成：主设备（leader）和从设备（follower）。leader端连接到用户终端，follower端连接到一个或多个程序</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8A%EF%BC%89/image-20231213154143142.png" class="" title="image-20231213154143142"><p>当用户打开终端并启动一个 shell 时，终端模拟器会创建一个 PTY，并将 leader 端连接到用户界面，同时将 follower 端连接到 shell 或其他命令行程序。</p><p>用户输入的命令通过 leader 端传输到 follower 端，follower 端执行这些命令并将输出发送回 leader 端，最终显示在用户界面上</p><p><strong>在 Unix 中，一切皆文件</strong>，这句话指的是 Unix 中的所有东西都有与文件相同的读&#x2F;写接口。leader 的 fd（文件描述符） 指向内存中的一个缓冲区，而 follower 是一个在磁盘上具有实际路径的字符设备文件。</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8A%EF%BC%89/image-20231213153442043.png" class="" title="image-20231213153442043"><p>上图可以看到，我们打开了两个终端（&#x2F;dev&#x2F;pts&#x2F;0、&#x2F;dev&#x2F;pts&#x2F;1），启动了两个 shell 进程。如果我们在终端1（&#x2F;dev&#x2F;pts&#x2F;1）中敲命令并重定向到终端0（&#x2F;dev&#x2F;pts&#x2F;0），可以看到输出结果是在终端0中显示的</p><p><strong>生成 shell</strong></p><p>终端会话在启动时可能会为shell创建一个子进程，这个子进程将作为 shell 的实例来执行用户的命令</p><p>UNIX 和类 UNIX 系统中，终端会话会使用伪终端设备（PTY）来与 shell 进程进行通信，通过这种方式，终端会话可以读取和写入 shell 的输入、输出和错误输出（fd 0到2）</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8A%EF%BC%89/image-20231213154145927.png" class="" title="image-20231213154145927"><p><strong>shell 初始化</strong></p><p>在Linux中，用户打开终端启动 shell 进程时会进行 shell 初始化，这个过程涉及一些配置文件和脚本的执行，用来设置用户的环境和启动 shell 的行为</p><p>步骤大致如下：</p><ol><li><strong>读取配置文件</strong>：在用户登录时，shell 会读取一系列的配置文件来设置用户的环境变量、别名、函数等。这些配置文件可以包括全局配置文件（例如<code>/etc/profile</code>）和用户特定的配置文件（例如<code>~/.bash_profile</code>、<code>~/.bashrc</code>等）</li><li><strong>执行配置命令</strong>：配置文件中可以包含各种设置和命令，例如设置环境变量、修改提示符、定义别名和函数等。这些命令会在 shell 启动时执行，以确保在用户登录后设置了所需的环境和行为</li><li><strong>启动shell</strong>：一旦执行了配置文件中的命令，shell 就会准备就绪，等待用户的输入。这时，shell 的提示符会出现，等待用户输入命令。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;参加过校招面试的小伙伴们肯定对下面这道面试题很熟悉：“当你在浏览器输入一段网址后会发生什么？”。这道面试题可以说是很经典了，因为其涉及大量网络协议，可以非常直观的看出小伙伴们对计算机网络体系的整体把握程度&lt;/p&gt;
&lt;p&gt;但如果问题换成：“</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>当你打开终端并输入命令时会发生什么?（下）</title>
    <link href="https://xxxsalted.github.io/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://xxxsalted.github.io/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2024-04-29T15:12:08.000Z</published>
    <updated>2024-04-29T15:13:46.036Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>我们先来大致回顾一下文章<a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247487168&idx=1&sn=7d93f29e6fa1d89b74e14c37ab976643&chksm=c2930e84f5e4879205df5e34b4dd076ea29166bb30f461fbaf788585283be641b0850ba3dd5f&token=113421995&lang=zh_CN#rd">《当你打开终端并输入命令时会发生什么?（上）》</a>的内容</p><p>终端设备是由电传打字机演变过来的，电传打字机通过物理线与大型计算机连接在一块来实现输入输出</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8B%EF%BC%89/image-20231215090651507.png" class="" title="image-20231215090651507"><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8B%EF%BC%89/image-20231215090728824.png" class="" title="image-20231215090728824"><p>如上图，分别是二战时期的电传打字机和西门子 “Fernscheiber 100” 电传打字机</p><p>随着技术的不断发展（尤其是显示技术），带显示屏的终端设备随之诞生</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8B%EF%BC%89/image-20231215091447514.png" class="" title="image-20231215091447514"><p>而现在随着个人电脑的普及，出现了基于屏幕显示的图形用户界面（GUI），演变成了现在的计算机终端</p><p>现在的终端大多都是计算机上的一个应用程序，它们通常被称为终端模拟器，充当用户与操作系统交互的界面（比如说 Linux 中的 Xterm、Xshell，Windows 中的控制台），而不必使用专门的终端。输出系统是屏幕，输入系统是键盘</p><p>以 Linux 为例，当我们打开终端时，通常会启动一个 shell 进程，用于与用户交互。用户在终端中输入的命令将传递给 shell 进程，然后由 shell 解释和执行这些命令</p><style>.dbflvzdvyyfk{zoom:50%;}</style><p>这个过程包括将用户输入的命令解析为操作系统可以理解的指令，执行这些指令，并将执行结果返回给终端显示给用户</p><h2 id="输入命令"><a href="#输入命令" class="headerlink" title="输入命令"></a>输入命令</h2><p>当我们在终端中输入命令时，键盘输入的字符会被转换成相应的字符编码（比如说 <code>backspace</code> 键被转译成 ASCII 字符 <code>0x08</code>）</p><p>这些字符通过终端写入到 PTY leader，接着 TTY driver 从 PTY leader 中读取字符并存储到 line discipline 中（line discipline 为 PTY 两端之间的中间缓冲区）</p><p>不但如此，line discipline 还负责解释来自 PTY leader 的字符然后根据自己的规则去处理它们（比如进行回退、删除字符等，或者处理特殊字符）</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8B%EF%BC%89/image-20231215095648394.png" class="" title="image-20231215095648394"><p>举个例子，line discipline 收到 <code>backspace</code> 时，它会根据自己的规则解释成 ERASE 字符，然后进行编辑，方法是删除最后一个字符</p><p>接着将删除操作返回给 PTY leader，这样终端就可以从 PTY leader 那里读取到更改并将其反映在终端显示中</p><p>需要注意的是，上面这段过程里字符还没有被写入到 PTY follower 中，只是处在【编辑】部分</p><p>当我们在键盘敲下 <code>CTRL+C</code> 时，line discipline 会解释成 <code>INTR</code> （INTERRUPT 的缩写），这时候就会向 PTY follower 发送一个 SIGINT 信号去中断在前台运行的任何进程</p><p>如果不是特殊字符（比如输入 <code>ls</code>），line discipline 会将字符返回给 PTY leader，终端程序读取并显示在屏幕上，这就是为什么你在键盘敲一个字符，显示器就会显示一个字符（echo 功能）</p><blockquote><p>现在 shell 进程也会缓冲用户的输入，以实现一些高级的功能：比如命令历史记录或 tab 键自动补全</p></blockquote><h2 id="执行并解析命令"><a href="#执行并解析命令" class="headerlink" title="执行并解析命令"></a>执行并解析命令</h2><p>当我们输入完命令之后，就要按下回车键（Enter）来执行命令了</p><p>一旦按下回车键，line discipline 解释为换行字符（newline），通常表示为 <code>NL</code>。</p><p>然后一并将用户的命令转发到 PTY follower ，而 shell 进程跟 follower 相连，shell 拿到命令之后就会去解析并执行</p><p>当 shell 进程接收到用户的输入和换行符时，它会开始解析并执行命令。这个过程包括命令解析、查找可执行文件或内置命令，以及执行相应的操作</p><p>首先对命令解析成一个一个 token 并进行语法&#x2F;语义分析，以  <code>ls</code> 命令为例：</p><ul><li><code>ls &gt; foo.txt</code> ：正确</li><li><code>ls &gt;</code> ：语法不正确， <code>&gt;</code> 后面缺少内容</li><li><code>ls | foo.txt</code> ：语义不正确，管道的两端都需要是可运行的进程</li></ul><p>然后接着解析那些不是 shell 关键字或者路径的 token，shell 需要知道这些 token 的含义，所以 shell 会去根据下面几个部分去递归查找 token 引用的内容：</p><ul><li><strong>aliases</strong>：命令别名，通常用于缩写复杂的命令（例如 <code>alias ll=&quot;ls -lh&quot;</code> ）</li><li><strong>function</strong>：函数</li><li><strong>environment variables</strong>：环境变量</li><li><strong>builtins</strong>：shell 内嵌命令（例如 <code>cd</code> <code>pwd</code> <code>exit</code> <code>kill</code>）</li><li><strong>PATH executables</strong>：shell 可以找到(通过 <code>$PATH</code> 变量)并运行的外部命令</li></ul><p>我们可以通过 <code>type</code> 命令知道对应的类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]<span class="comment"># type ll</span></span><br><span class="line">ll 是 <span class="string">&#x27;ls -l --color=auto&#x27;</span> 的别名</span><br><span class="line"></span><br><span class="line">[root@minion1 ~]<span class="comment"># type cd</span></span><br><span class="line"><span class="built_in">cd</span> 是 shell 内嵌</span><br><span class="line"></span><br><span class="line">[root@minion1 ~]<span class="comment"># type python</span></span><br><span class="line">python 是 /usr/bin/python</span><br></pre></td></tr></table></figure><p>与 shell 内嵌命令不同的是，可执行命令是单独的程序或脚本文件，具有执行权限，可以作为单独的进程执行</p><p>当用户在 shell 中输入一个命令时，shell 会查找可执行文件的位置，并在找到后创建一个新的子进程来运行该可执行文件，并将相应的命令参数传递给这个新的子进程</p><p>我们可以通过 <code>pstree</code> 命令来查看进程之间的关系</p><h2 id="返回输出"><a href="#返回输出" class="headerlink" title="返回输出"></a>返回输出</h2><p>当 shell 执行完命令之后，把生成的输出写入到 PTY follower ，接着传到 line discipline 中，line discipline 不会处理这些输出，而是转发给 PTY leader，然后终端就会读取并显示到屏幕上</p><img src="/2024/04/29/%E5%BD%93%E4%BD%A0%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88-%EF%BC%88%E4%B8%8B%EF%BC%89/image-20231215110911110.png" class="" title="image-20231215110911110"><p>参考文章：<a href="https://www.warp.dev/blog/what-happens-when-you-open-a-terminal-and-enter-ls">https://www.warp.dev/blog/what-happens-when-you-open-a-terminal-and-enter-ls</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;我们先来大致回顾一下文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&amp;mid=2247487168&amp;idx=1&amp;sn=7d93f29e6fa1d89b74e14c37</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一行命令找出 Linux 中所有真实用户</title>
    <link href="https://xxxsalted.github.io/2024/04/29/%E4%B8%80%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%89%BE%E5%87%BA-Linux-%E4%B8%AD%E6%89%80%E6%9C%89%E7%9C%9F%E5%AE%9E%E7%94%A8%E6%88%B7/"/>
    <id>https://xxxsalted.github.io/2024/04/29/%E4%B8%80%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%89%BE%E5%87%BA-Linux-%E4%B8%AD%E6%89%80%E6%9C%89%E7%9C%9F%E5%AE%9E%E7%94%A8%E6%88%B7/</id>
    <published>2024-04-29T15:10:13.000Z</published>
    <updated>2024-04-29T15:10:27.410Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>接触过 Linux 的小伙伴们都知道在 Linux （或者说类 Unix）中，有三种类型的用户：</p><ul><li>超级用户（UID 为 0）：即 root 用户，拥有最高权限。</li><li>系统用户（UID 为 1~999）：系统内建用户，用于运行系统服务和守护进程。</li><li>普通用户（UID 为 1000~60000）：为了让使用者能够使用 Linux 系统资源而建立的，用户新建的账号一般就是普通账号。</li></ul><p>那么现在问题来了，如何快速找出 Linux 中的真实用户（root 用户和普通用户）？</p><p>正式开始之前，我们先介绍一个工具——<code>getent</code></p><h2 id="getent-命令"><a href="#getent-命令" class="headerlink" title="getent 命令"></a>getent 命令</h2><p>getent 其实是 <strong>“get entries”</strong> 的缩写，功能是用于查看系统数据库中（包括 <code>/etc/passwd</code>、<code>/etc/shadow</code>、<code>/etc/group</code>、<code>/etc/hosts</code> 等）的记录信息，它可以根据指定的数据库类型和键来检索条目。</p><p>1、查看本地的主机文件（<code>/etc/hosts</code>）中包含的指定域名信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># getent hosts 127.0.0.1</span></span><br><span class="line">127.0.0.1       localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br></pre></td></tr></table></figure><p>2、查看本地密码文件（<code>/etc/passwd</code>）中指定用户信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># getent passwd user1</span></span><br><span class="line">user1:x:1000:1000::/home/user1:/bin/bash</span><br></pre></td></tr></table></figure><p>3、从 <code>/etc/group</code> 数据库中检索指定组信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># getent group user1</span></span><br><span class="line">user1:x:1000:</span><br></pre></td></tr></table></figure><p>我们回到问题上来：如何快速找出 Linux 中的真实用户（root 用户和普通用户）？</p><p><strong>方法一：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getent passwd | awk -F: <span class="string">&#x27;$3 &gt;= 1000 &amp;&amp; $3 &lt; 65344 || $3 == 0 &#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>getent passwd</code> 用于检索 <code>/etc/passwd</code> 数据库中的所有用户信息</li><li><code>awk</code> 命令：<ul><li><code>-F:</code>：指定字段分隔符为冒号 (<code>:</code>)</li><li><code>$3 &gt;= 1000 &amp;&amp; \$3 &lt; 65344</code>：表示判断第三个字段（用户 ID）大于或等于 1000 且小于 65344。</li><li><code>\$3 == 0</code>：表示判断第三个字段（用户 ID）等于 0</li><li><code>&#123;print $1&#125;</code>：打印第一个字段（用户名）</li></ul></li></ul><p>总结一下：这条命令将检索 <code>/etc/passwd</code> 数据库中的所有用户信息，并打印出用户 ID 大于或等于 1000 且小于 65344，或者用户 ID 等于 0 的所有用户的用户名。</p><p>但是有的小伙伴看到这么一长串的命令就犯难了，”我文本三剑客掌握的不是很好，这条命令尤其是里面的判断看的我头都晕了，还有没有更简单的方法呢？”</p><p><strong>方法二：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getent passwd 0 &#123;1000..60000&#125; | awk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>getent passwd 0 &#123;1000..60000&#125;</code> 命令用于检索系统中用户 ID 为 0 以及范围从 1000 到 60000 的所有用户信息</li><li><code>awk -F: &#39;&#123;print $1&#125;</code>：表示对前面输出的内容进行处理——打印第一个字段</li></ul><p>这里补充一下：<code>getent passwd 0 &#123;1000..60000&#125;</code> 命令使用花括号扩展 (<code>&#123;1000..60000&#125;</code>) 来生成一个 0 和从 1000 到 60000 的数字序列。</p><p>然后，<code>getent passwd</code> 命令使用这些数字作为参数，以检索系统中用户 ID 为 0 和从 1000 到 60000 的用户信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;接触过 Linux 的小伙伴们都知道在 Linux （或者说类 Unix）中，有三种类型的用户：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超级用户（UID 为 0）：即 root 用户，拥有最高权限。&lt;/li&gt;
&lt;li&gt;系统用户（UID 为 1~99</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>通过 saltstack 批量更新 SSL 证书</title>
    <link href="https://xxxsalted.github.io/2024/04/29/%E9%80%9A%E8%BF%87-saltstack-%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0-SSL-%E8%AF%81%E4%B9%A6/"/>
    <id>https://xxxsalted.github.io/2024/04/29/%E9%80%9A%E8%BF%87-saltstack-%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0-SSL-%E8%AF%81%E4%B9%A6/</id>
    <published>2024-04-29T15:09:13.000Z</published>
    <updated>2024-04-29T15:09:47.545Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>之前写过两篇关于 SSL 过期巡检脚本的文章：</p><ol><li><a href="https://mp.weixin.qq.com/s/VQ5pX5VRPYQuPI5CmCq8FQ">SSL 证书过期巡检脚本</a></li><li><a href="https://mp.weixin.qq.com/s/lXQFayrbPslOvAnw-D6JLQ">SSL 证书过期巡检脚本(Python 版)</a></li></ol><p>这两篇文章都是讲如何通过脚本去<strong>自动检测 SSL 过期时间</strong>的，当我们发现某一域名的 SSL 证书过期之后，就要及时更换。</p><p>如果这个域名下有很多服务器，我们一台一台手动登录机器然后更新证书的话效率是非常低的，所以我们可以通过一些自动化运维工具去完成这些大量重复的工作。</p><p>像 ansible、puppet 这类工具也可以实现同样的效果，但是咸鱼这边主要用的还是 saltstack，所以今天介绍一些如何通过 saltstack 去批量更新 SSL 证书。</p><p>关于 saltstck 的介绍：</p><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247484377&idx=1&sn=86df86ed03a893ffc00013417dd7c25c&chksm=c293039df5e48a8b24e25bb0921bca0e7678b31aa0cc81691be0556e2a67762940a3a28d060f&token=1577823467&lang=zh_CN#rd">干货篇 | 自动化运维工具-<em>saltstack</em>（上）</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247484384&idx=1&sn=0dd3a65f7667d72d1b2ad5094861b13c&chksm=c29303a4f5e48ab253e46275fbd5481385a24fede02609e9737f52cdd1a4a52d4787cd2630c4&token=1577823467&lang=zh_CN#rd">干货篇 | 自动化运维工具-<em>saltstack</em>（中）</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247484390&idx=1&sn=a57f2ecddec8e78c2b9e7f95cc091e16&chksm=c29303a2f5e48ab4754458c0f77211c6953d983c99b4bf4a838b5cf65bcada11bead714011d6#rd">干货篇 | 自动化运维工具-<em>saltstack</em>（下）</a></li></ol><p>首先我们在 salt-master 的主目录下创建一个新的目录，用于存放 SSL 证书和脚本，我自己机器上的 master 主目录为 <code>/home/salt/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -pv /home/salt/ssl_update/ssl</span><br></pre></td></tr></table></figure><p>然后把 SSL 证书放在 <code>/home/salt/ssl_update/ssl</code> 目录下，如果有多个域名的话需要在下面创建多个对应的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># tree /home/salt/ssl_update/</span></span><br><span class="line">/home/salt/ssl_update</span><br><span class="line">├── rollback.sls</span><br><span class="line">├── update.sls</span><br><span class="line">├── ssl</span><br><span class="line">│   ├── domain1</span><br><span class="line">│   │   ├── server.key</span><br><span class="line">│   │   └── server.pem</span><br><span class="line">│   ├── domain2</span><br><span class="line">│   │   ├── server.key</span><br><span class="line">│   │   └── server.pem</span><br><span class="line">│   └── domain3</span><br><span class="line">        ├── server.key</span><br><span class="line">        └── server.pem</span><br></pre></td></tr></table></figure><p>接下来我们开始编写 saltstack 状态脚本：</p><ol><li><code>update.sls</code> 负责更新证书</li><li><code>rollback.sls </code> 负责回滚证书</li></ol><p>因为之前遇到过更新证书之后由于证书链不完整导致证书失效，然后不得不紧急手动还原之前的证书。</p><p>所以觉得有必要做一个回滚操作，这样新证书有问题的时候能够及时自动还原。</p><p>我们先来看一下负责更新证书的 <code>update.sls</code>，这个脚本分成了三个模块：</p><ol><li>SSL 证书备份</li><li>SSL 证书更新</li><li>Nginx 重启</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> domain = <span class="string">&#x27;doamin1&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ssl_dir = <span class="string">&#x27;/usr/local/nginx/ssl&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> dst_dir = ssl_dir + <span class="string">&#x27;/&#x27;</span> + domain %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bak_dir = <span class="string">&#x27;/opt/backup/ssl/&#x27;</span> + domain %&#125;</span><br><span class="line"></span><br><span class="line">backup_ssl:</span><br><span class="line">  cmd.run:</span><br><span class="line">      - name: <span class="string">&quot;year=<span class="subst">$(openssl x509 -in &#123;&#123; dst_dir &#125;&#125;/server.pem -noout -dates|grep Before|awk &#x27;&#123;print $4&#125;&#x27;)</span> &amp;&amp; mkdir -p &#123;&#123; bak_dir &#125;&#125;/<span class="variable">$&#123;year&#125;</span> &amp;&amp; \\cp &#123;&#123;dst_dir&#125;&#125;/* &#123;&#123; bak_dir &#125;&#125;/<span class="variable">$&#123;year&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">ssl_update:</span><br><span class="line">  file.recurse:</span><br><span class="line">    - <span class="built_in">source</span>: salt://ssl_check/ssl/&#123;&#123;domain&#125;&#125;</span><br><span class="line">    - name: &#123;&#123; dst_dir &#125;&#125;</span><br><span class="line">    - require:</span><br><span class="line">      - cmd: backup_ssl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx_reload:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: /usr/local/nginx/sbin/nginx -t &amp;&amp; /usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">    - require:</span><br><span class="line">      - file: ssl_update</span><br></pre></td></tr></table></figure><p>首先是变量的定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> domain = <span class="string">&#x27;doamin1&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ssl_dir = <span class="string">&#x27;/usr/local/nginx/ssl&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> dst_dir = ssl_dir + <span class="string">&#x27;/&#x27;</span> + domain %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bak_dir = <span class="string">&#x27;/opt/backup/ssl/&#x27;</span> + domain %&#125;</span><br></pre></td></tr></table></figure><ul><li><code>domain</code>: 设置域名为 <code>&#39;doamin1&#39;</code>。</li><li><code>ssl_dir</code>: 设置 SSL 证书存放目录为 <code>&#39;/usr/local/nginx/ssl&#39;</code>。</li><li><code>dst_dir</code>: 设置 SSL 证书实际存放路径为 <code>ssl_dir + &#39;/&#39; + domain</code>。</li><li><code>bak_dir</code>: 设置备份目录为 <code>&#39;/opt/backup/ssl/&#39; + domain</code>。</li></ul><p>然后就是 SSL 证书备份。首先创建名为 <code>backup_ssl</code> 的命令执行模块，通过 <code>cmd.run</code> 执行 shell 命令，这个命令通过 OpenSSL 获取证书的有效期限，然后将证书拷贝到备份目录，以年份为子目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backup_ssl:</span><br><span class="line">  cmd.run:</span><br><span class="line">      - name: <span class="string">&quot;year=<span class="subst">$(openssl x509 -in &#123;&#123; dst_dir &#125;&#125;/server.pem -noout -dates|grep Before|awk &#x27;&#123;print $4&#125;&#x27;)</span> &amp;&amp; mkdir -p &#123;&#123; bak_dir &#125;&#125;/<span class="variable">$&#123;year&#125;</span> &amp;&amp; \\cp &#123;&#123;dst_dir&#125;&#125;/* &#123;&#123; bak_dir &#125;&#125;/<span class="variable">$&#123;year&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>这条命令看着很长，其实可以拆解成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取证书有效期限然后赋值给 year 变量</span></span><br><span class="line">year=$(openssl x509 -<span class="keyword">in</span> &#123;&#123; dst_dir &#125;&#125;/server.pem -noout -dates|grep Before|awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带年份后缀的备份目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p &#123;&#123; bak_dir &#125;&#125;/<span class="variable">$&#123;year&#125;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 把当前的证书备份到备份目录中</span></span><br><span class="line"><span class="built_in">cp</span> &#123;&#123;dst_dir&#125;&#125;/* &#123;&#123; bak_dir &#125;&#125;/<span class="variable">$&#123;year&#125;</span></span><br></pre></td></tr></table></figure><p>接着我们开始更新 SSL 证书。创建名为 <code>ssl_update</code> 的文件递归模块，然后通过 <code>file.recurse</code> 把 salt-master 上的证书复制到指定服务器目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssl_update:</span><br><span class="line">  file.recurse:</span><br><span class="line">    - <span class="built_in">source</span>: salt://ssl_check/ssl/&#123;&#123;domain&#125;&#125;</span><br><span class="line">    - name: &#123;&#123; dst_dir &#125;&#125;</span><br><span class="line">    - require:</span><br><span class="line">      - cmd: backup_ssl</span><br></pre></td></tr></table></figure><p>更新完之后我们还要对指定服务器上的 Nginx 服务进行配置检查并重启一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx_reload:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: /usr/local/nginx/sbin/nginx -t &amp;&amp; /usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">    - require:</span><br><span class="line">      - file: ssl_update</span><br></pre></td></tr></table></figure><p>然后我们看一下负责回滚证书的 <code>rollback.sls</code>，这个脚本分成了两个个模块：</p><ol><li>证书回滚</li><li>Nginx 重启</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> domain = <span class="string">&#x27;doamin1&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ssl_dir = <span class="string">&#x27;/usr/local/nginx/ssl&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> dst_dir = ssl_dir + <span class="string">&#x27;/&#x27;</span> + domain %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bak_dir = <span class="string">&#x27;/opt/backup/ssl/&#x27;</span> + domain %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> year = salt[<span class="string">&#x27;pillar.get&#x27;</span>](<span class="string">&#x27;year&#x27;</span>) or salt[<span class="string">&#x27;cmd.run&#x27;</span>](<span class="string">&#x27;echo $(date +%Y) - 1| bc&#x27;</span>) %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rollback:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: <span class="string">&quot;cp &#123;&#123; bak_dir &#125;&#125;/<span class="subst">$((&#123;&#123; year &#125;&#125;)</span>)/* &#123;&#123; dst_dir &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: /usr/local/nginx/sbin/nginx -t &amp;&amp; /usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">    - require:</span><br><span class="line">      - cmd: rollback</span><br></pre></td></tr></table></figure><p>设置变量 year 的命令有点复杂，我们来看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> year = salt[<span class="string">&#x27;pillar.get&#x27;</span>](<span class="string">&#x27;year&#x27;</span>) or salt[<span class="string">&#x27;cmd.run&#x27;</span>](<span class="string">&#x27;echo $(date +%Y) - 1| bc&#x27;</span>) %&#125;</span><br></pre></td></tr></table></figure><ol><li><code>salt[&#39;pillar.get&#39;](&#39;year&#39;)</code>: 尝试从<code> Salt Pillar</code> 中获取名为 <code>year</code> 的变量的值。</li><li><code>or</code>: 如果前面的操作未成功（即 <code>year</code> 在 Pillar 中不存在），<code>or</code> 后面的表达式将会被执行。</li><li><code>salt[&#39;cmd.run&#39;](&#39;echo $(date +%Y) - 1| bc&#39;)</code>: 这部分代码使用 SaltStack 的 <code>cmd.run</code> 模块执行一个 shell 命令，该命令通过 <code>date</code> 命令获取当前年份，然后减去 1 得到前一年的年份。<code>bc</code> 是一个计算器工具，用于执行数学运算。</li><li>总结一下：首先从 <code>Salt Pillar</code> 中查找，如果找不到则使用 shell 命令获取前一年的年份，确保在没有 Pillar 配置的情况下也有一个默认的年份</li></ol><p>然后就是 SSL 证书回滚。创建名为 <code>rollback</code> 的命令执行模块，通过 <code>cmd.run</code> 执行 shell 命令</p><p>该命令通过将指定服务器备份目录中指定年份的证书拷贝到 SSL 证书目录实现回滚。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rollback:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: <span class="string">&quot;cp &#123;&#123; bak_dir &#125;&#125;/<span class="subst">$((&#123;&#123; year &#125;&#125;)</span>)/* &#123;&#123; dst_dir &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>回滚完之后对指定服务器上的 Nginx 服务进行配置检查并重启一下，上面内容有，这里就不再介绍了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;之前写过两篇关于 SSL 过期巡检脚本的文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/VQ5pX5VRPYQuPI5CmCq8FQ&quot;&gt;SSL 证书过期巡检脚本&lt;/a&gt;&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 HTTP 性能优化</title>
    <link href="https://xxxsalted.github.io/2024/04/29/%E8%81%8A%E8%81%8A-HTTP-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://xxxsalted.github.io/2024/04/29/%E8%81%8A%E8%81%8A-HTTP-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2024-04-29T15:08:05.000Z</published>
    <updated>2024-04-29T15:08:48.027Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>作为用户的我们在 “上网冲浪” 的时候总是希望快一点，尤其是抢演唱会门票的时候，但是现实并非如此，有时候我们会遇到页面加载缓慢、响应延迟的情况。</p><p>而 HTTP 协议作为互联网世界的基础，从网站打开速度到移动应用的响应时间，HTTP 性能的优化直接关系到我们在网络世界的舒适体验程度。</p><p>更快的响应时间和速度能够<strong>提供更好的用户体验</strong>，不但如此，还可以降低服务器和网络带宽的使用，从而<strong>节省相关的成本</strong>。</p><p>那么今天我们就来聊聊 <strong>HTTP 性能如何进行优化</strong>。</p><h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><p>随着互联网的发展，网路上传输的数据越来越大，随随便便一个文件几个 G 甚至上百 G，就算你是百兆、千兆带宽也扛不住。</p><p>如何能够在有限的带宽里传输更多的数据，常见的解决方式是<strong>数据压缩</strong>。</p><p>如果压缩率能有 50%，例如 100K 的数据能够压缩成 50K 的大小，那么就相当于在带宽不变的情况下网速提升了一倍，加速的效果是非常明显的。</p><p>使用常见的压缩算法（如 gzip 和 br ）对数据进行压缩，不但如此，我们可以对 HTTP 中传输的各种数据进行针对性地压缩，做到【对症下药】。</p><ul><li>HTML&#x2F;CSS&#x2F;JS</li></ul><p>对于这类纯文本格式数据，我们在进行压缩时通常会去除其中多余的空格、换行和注释等元素。尽管压缩后的文本可能看起来比较混乱，对人类可读性较差，但这对计算机并不影响流畅阅读。</p><ul><li>JPG&#x2F;JPEG&#x2F;PNG</li></ul><p>对于这类图片格式数据，虽然它本身已经被压缩过了，不能被 gzip、br 处理，但仍然有优化的空间。</p><p>例如，可以考虑去除图片中的拍摄时间、地点、机型等元数据，适度降低分辨率和缩小尺寸。</p><p>此外，尽量采用高压缩率的格式，有损格式可以选择 JPEG，而无损格式则可以考虑使用 webp 格式。</p><ul><li>小数据</li></ul><p>对于较小的数据，HTTP 中有一种被称为 “资源合并”（Concatenation）的优化方式，即将多个小资源合并成一个大资源，通过单个请求下载到客户端，随后由客户端使用 JavaScript、CSS 等进行拆分使用。</p><p>这种方式虽然减少了请求的次数，但是处理起来比较麻烦。</p><blockquote><p>需要注意的是，在数据压缩的时候应当注意选择适当的压缩率，不要追求最高压缩比，否则会耗费服务器的计算资源，增加响应时间，反而会“得不偿失”。</p></blockquote><p>上面讲的都是针对 HTTP 报文里的 body 的压缩方式，对于 header 的压缩在 HTTP&#x2F;1 里是没有的（HTTP&#x2F;2 才有）。</p><p>不过我们可以采取一些手段来减少 header 的大小，不必要的字段就尽量不发（例如 User-Agent、Server、X-Powered-By）</p><h2 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h2><p>数据 “千里迢迢” 从服务端到客户端，我们可以把这些 “来之不易” 的数据【暂时保存】起来，以便在下次请求时直接复用，从而避免多次请求带来的高昂成本。</p><p>比如说网站上访问量最高的网页、热点新闻，尤其是【读多写少】的数据，把它们缓存下来能够把巨大的流量挡在外面，减轻服务器的压力，对性能的改善是非常显著的。</p><p>HTTP 传输的每一个环节基本上都会有缓存，不过大致可以分成：</p><ul><li><p>浏览器端缓存</p></li><li><p>服务端缓存</p></li><li><p>中间传输缓存</p></li></ul><p>在浏览器端，通过与服务端协商相关的缓存策略，将一些资源缓存到本地，以便在下次访问时进行复用。</p><p>常见的缓存策略包括 HTTP 头中的 <code>Cache-Control</code>、<code>Expires</code> 以及 <code>ETag</code> 等，通过这些标识，浏览器可以判断是否需要从服务端重新获取资源，或者直接使用本地缓存。</p><p>在服务端，可以借助专门的缓存中间件，如 Memcache 或 Redis，将计算得到的中间结果和资源存储在内存或硬盘中。</p><p>这样，Web 服务器在处理请求时会首先检查缓存，如果找到相应的数据，就能够立即返回给客户端，避免了访问后端服务或数据库的时间开销。</p><p>而关于中间传输的缓存，常见的有 HTTP 代理缓存和 CDN（Content Delivery Network，内容分发网络）。</p><p>HTTP 代理缓存，通过使用增加了缓存功能的 HTTP 代理服务器（例如 Nginx），缓存源服务器的数据，分发给下游的客户端。</p><p>而使用 CDN 把源服务器的内容逐级缓存到网络中的每一个 CDN 节点中，这样用户在上网的时候就不直接访问源站，而是访问离它最近的一个 CDN 节点（其实就是缓存了源服务器内容的代理服务器）</p><img src="/2024/04/29/%E8%81%8A%E8%81%8A-HTTP-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20240229133017665.png" class="" title="image-20240229133017665"><h2 id="使用高性能-web-服务器"><a href="#使用高性能-web-服务器" class="headerlink" title="使用高性能 web 服务器"></a>使用高性能 web 服务器</h2><p>除了传输过程中对数据进行压缩和使用缓存，我们还可以在服务端下手。</p><p>首先我们应该选择高性能的 Web 服务器，最常见的应该就是 Nginx 了。</p><p>作为一款【高性能，轻量级】的 Web 服务器，【进程池+单线程】的工作模式让 Nginx 消耗较少的 CPU 和内存，非常轻量，而【I&#x2F;O 多路复用】又使得 Nginx 的工作效率大大提升。</p><p>我们还可以通过 Nginx 实现【动静分离】：把动态页面和静态页面交给不同的服务器来解析，来加快解析速度，提高请求的访问效率，降低原来单个服务器的压力。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx 动静分离配置例子</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span> ; </span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> <span class="regexp">~* \.(png)$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/images/png/;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> <span class="regexp">~* \.(php)$</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://php_back_end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不但如此，在配置 Nginx 的时候还应该<strong>开启 HTTP 长连接</strong>。</p><p>这样做可以平均握手成本到多次请求中，避免了每个请求都要进行 TCP 连接建立和断开的开销，从而提高了性能。连接的复用使得后续的请求不再需要进行完整的三次握手过程，减少了连接建立的延迟。</p><h2 id="升级-HTTP-2"><a href="#升级-HTTP-2" class="headerlink" title="升级 HTTP&#x2F;2"></a>升级 HTTP&#x2F;2</h2><p>除了上面的【数据压缩】、【使用缓存】、【使用高性能 web 服务器】，HTTP 性能优化还有一个选择，那就是【把协议由 HTTP&#x2F;1 升级到 HTTP&#x2F;2】</p><p>HTTP&#x2F;2 基于 Google 的 SPDY 协议，完全兼容 HTTP&#x2F;1，我们来看看它的一些优点。</p><ul><li>头部压缩</li></ul><p>报文 Header 一般会携带 “User Agent”、“Cookie”、“Accept”、“Server” 等许多固定的头字段，多达几百字节甚至上千字节，但 Body 却经常只有几十字节（比如 GET 请求）</p><p>更要命的是，成千上万的请求响应报文里有很多字段值都是重复的，非常浪费，导致大量带宽消耗在了这些冗余度极高的数据上。</p><p>为了压缩头部，HTTP&#x2F;2 开发了专门的 “<strong>HPACK</strong>” 算法：在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，还釆用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。</p><ul><li>二进制格式</li></ul><p>相较于 HTTP&#x2F;1 里纯文本形式的报文，HTTP&#x2F;2 全面采用二进制格式，既方便计算机解析，而且体积小、速度快，使性能大大提高。</p><p>除此之外，HTTP&#x2F;2 使用虚拟的流（stream）传输消息，解决了“队头阻塞”问题，同时实现了“多路复用”，提高连接的利用率；</p><img src="/2024/04/29/%E8%81%8A%E8%81%8A-HTTP-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20240229144445322.png" class="" title="image-20240229144445322"><p>今天这篇文章讲了 HTTP 性能优化的一些方法，希望能对你有帮助！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;作为用户的我们在 “上网冲浪” 的时候总是希望快一点，尤其是抢演唱会门票的时候，但是现实并非如此，有时候我们会遇到页面加载缓慢、响应延迟的情况。&lt;/p&gt;
&lt;p&gt;而 HTTP 协议作为互联网世界的基础，从网站打开速度到移动应用的响应时间，</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>服务器遭受攻击之后的常见思路及处理</title>
    <link href="https://xxxsalted.github.io/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%AD%E5%8F%97%E6%94%BB%E5%87%BB%E4%B9%8B%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%81%E6%80%9D%E8%B7%AF%E5%8F%8A%E5%A4%84%E7%90%86/"/>
    <id>https://xxxsalted.github.io/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%AD%E5%8F%97%E6%94%BB%E5%87%BB%E4%B9%8B%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%81%E6%80%9D%E8%B7%AF%E5%8F%8A%E5%A4%84%E7%90%86/</id>
    <published>2024-04-28T07:08:26.000Z</published>
    <updated>2024-04-28T07:08:57.844Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼</p><p>不知道大家有没有看过这么一部电影：</p><img src="/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%AD%E5%8F%97%E6%94%BB%E5%87%BB%E4%B9%8B%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%81%E6%80%9D%E8%B7%AF%E5%8F%8A%E5%A4%84%E7%90%86/image-20230419154559523.png" class="" title="image-20230419154559523"><p>这部电影讲述了男主是一个电脑极客，在计算机方面有着不可思议的天赋，男主所在的黑客组织凭借着超高的黑客技术去入侵各种国家机构的系统，并引起了德国秘密警察组织、欧洲刑警组织的重视</p><p>刚开始看的时候以为是一部讲述黑客的电影，到后面才发现其实是讲“社会工程学”</p><p>好了开始今天的正题——跟大家聊聊服务器安全相关的问题</p><p>我们需要知道，安全总是相对的，再安全的服务器也有可能遭受到攻击，所以我们需要尽量地做好系统安全防护、及时修复一些已知的漏洞；当服务器收到攻击的时候能够迅速有效地处理攻击行为，最大限度地降低攻击对系统产生的影响</p><p>服务器遭受攻击不是最可怕的，最可怕的是面对攻击时自己束手无策无从下手，今天咸鱼就来介绍一下服务器遭受攻击之后我们需要做些什么，让大家在遇到这种情况的时候能有个大概参考</p><h2 id="常见思路"><a href="#常见思路" class="headerlink" title="常见思路"></a>常见思路</h2><ul><li>切断网络</li></ul><p><strong>常见的攻击来自网络</strong></p><p>对于一些对外提供服务的服务器，在得知系统遭受到黑客的攻击之后，首先要做的就是断开服务器的网络连接，这样除了能切断攻击源之外，也能够保护服务器所在网络的其他主机不受攻击</p><ul><li>查找攻击源</li></ul><p>首先我们可以分析系统日志或者登录日志文件，去查看可疑信息</p><p>其次查看系统开启了哪些端口，运行了哪些进程（服务），在这个过程中去分析一下哪些是可疑的进程（系统平时运行什么进程心里多多少少都会有个大概）</p><ul><li>分析入侵途径和原因</li></ul><p>系统受到入侵，肯定是有多方原因的（可能是系统漏洞、可能是程序漏洞）</p><p>所以我们需要查清楚是哪个原因导致的，并且还要查清楚攻击的途径，找到攻击源</p><ul><li>备份重要数据</li></ul><p>在系统遭受攻击之后，需要立即备份服务器上的重要数据（例如用户数据），同时也要查看这些数据中是否隐藏着攻击源</p><p>如果攻击源在数据中，一定要彻底删除然后将数据备份到一个安全的地方</p><ul><li>重装系统</li></ul><p>不要抱有自己能够彻底清除攻击源的幻想，因为没有人能比黑客更了解攻击程序</p><p>在服务器遭受到攻击后，最安全也最简单的方法就是重装系统，因为大部分攻击程序都会依附在系统文件或者内核中</p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><p>下面咸鱼将跟大家分享一些关于服务器遭受攻击后的常见处理流程</p><ul><li>检查可疑用户</li></ul><p>在发现服务器遭受到攻击之后，首先要切断网络连接，但是有些情况下（无法马上切断网络连接），就必须上系统查看是否有可疑用户在登录</p><p>如果发现有可疑用户登录了系统，首先要将这个用户锁定，然后中断可疑用户的远程连接</p><p>首先查看可疑用户，执行 <code>w</code> 命令列出所有登陆过系统的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># w</span></span><br><span class="line"> 14:42:01 up 3 days,  6:03,  3 <span class="built_in">users</span>,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    192.168.149.129    14:39    1.00s  0.01s  0.00s w</span><br><span class="line">root     pts/1    192.168.149.6    14:41    9.00s  0.01s  0.01s -bash</span><br><span class="line">root     pts/2    192.168.149.20    14:41    9.00s  0.01s  0.00s top</span><br><span class="line">nobody   pts/3    122.21.149.129    14:39    1.00s  0.01s  0.00s -bash</span><br></pre></td></tr></table></figure><p>通过输出的内容可以检查出是否有可疑或者不熟悉的用户登录，同时还可以根据用户名（USER 字段）以及用户登录的源地址(FROM 字段)又或者它们正在运行的进程、执行的命令（WHAT 字段）来判断</p><ul><li>锁定可疑用户</li></ul><p>一旦发现可疑用户，就要马上将其锁定</p><p>例如通过上面的输出发现 nobody 用户应该是可疑用户（因为 nobody 用户默认情况下是没有登录权限的，不可能说执行 bash）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#锁定 nobody 用户</span></span><br><span class="line"><span class="comment">#-l 参数含义：锁定指名帐户的密码(仅限 root 用户操作)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># passwd -l nobody</span></span><br></pre></td></tr></table></figure><p>锁定之后，这个用户有可能还处于登录状态，我们需要把它踢下线，根据上面 <code>w</code> 的输出，即可获得该用户登录进行的 pid 值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -ef | grep [@]pts/3</span></span><br><span class="line">root       6633    975  0 14:41 ?        00:00:00 sshd: nobody@pts/3</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># kill -9 6633</span></span><br></pre></td></tr></table></figure><ul><li>查看用户登录日志</li></ul><p>last 命令记录了所有用户登录系统的命令，可以通过 last 命令来查找非法用户的登录事件</p><p>last 命令的输出结果来源于 <code>/var/log/wtmp</code> 文件中，稍微有点经验的黑客都会删掉这个文件以便清除自己的行踪</p><ul><li>查看系统日志</li></ul><p>查看系统日志是查找攻击源最好的办法</p><p>可以查看的系统日志有 <code>/var/log/messages</code> 和 <code>/var//log/secure</code> ，这两个日志文件可以记录系统的运行状态以及远程用户的登录状态</p><p>还可以查看每个用户目录下的 <code>.bash_history</code> 文件，尤其是 <code>/root</code> 目录下的，这个文件记录着用户执行的所有历史命令</p><ul><li>检查并关闭系统可疑进程</li></ul><p>检查可疑进程可以通过 <code>top</code>、<code>ps</code> 命令</p><p>但是在有些情况下我们只知道进程的名称不知道执行路径，可以通过  <code>pidof</code> 命令找到对应的 PID 号，知道了 PID 号我们再去对应路径去查看进程完整的执行路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取 PID 号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pidof &lt;可疑进程名字&gt;</span></span><br><span class="line">100</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看对应 PID 目录下的 exe 文件信息找到完整执行路径</span></span><br><span class="line">[root@localhost ~]<span class="comment">#ll /proc/100/exe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还能查看对应 PID 目录下的文件句柄</span></span><br><span class="line">[root@localhost ~]<span class="comment">#ll /proc/100/fd</span></span><br></pre></td></tr></table></figure><p>除此之外，我们还可以通过指定端口来找到进程的 PID，从而找到相关进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># netstat -an | grep &lt;端口号&gt;</span></span><br></pre></td></tr></table></figure><ul><li>检查文件系统的完整性</li></ul><p>检查文件属性是否发生变化是验证文件系统完好性完整性最简单最直接方法</p><p>例如可以比较被攻击服务器上 <code>/bin/ls</code> 文件的大小与正常服务器大小是否相同（或者比较 MD5 值）</p><p>，以此来验证文件是否被动过</p><p>但是这种方法比较耗时耗力，我们可以借助 Linux 上 RPM 工具来完成验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -Va</span></span><br><span class="line">S.5....T.  c /etc/bashrc</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config</span><br><span class="line">S.5....T.  c /etc/sysconfig/authconfig</span><br><span class="line">S.5....T.  c /etc/sysconfig/iptables</span><br><span class="line">SM5....T.  c /etc/rc.d/rc.local</span><br><span class="line">....L....  c /etc/pam.d/fingerprint-auth</span><br><span class="line">....L....  c /etc/pam.d/password-auth</span><br><span class="line">....L....  c /etc/pam.d/postlogin</span><br><span class="line">....L....  c /etc/pam.d/smartcard-auth</span><br><span class="line">....L....  c /etc/pam.d/system-auth</span><br><span class="line">S.5....T.  c /etc/security/limits.conf</span><br><span class="line">S.5....T.  c /etc/security/limits.d/20-nproc.conf</span><br><span class="line">.M.......    /usr/bin/pkexec</span><br><span class="line">S.5....T.  c /etc/sysctl.conf</span><br></pre></td></tr></table></figure><ul><li>S 表示文件长度发生了变化</li><li>M 表示文件的访问权限或文件类型发生了变化</li><li>5 表示文件的 MD5 校验值发生了变化</li><li>D 表示设备节点属性发生了变化</li><li>L 表示文件的符号链接发生了变化</li><li>U 表示文件子目录下的设备节点的 owner 发生了变化</li><li>G 表示文件子目录下的设备节点 group 发生了变化</li><li>T 表示文件最后一次的修改时间发生了变化</li></ul><p>一般来讲，如果输出结果中有 ‘M’ 标记出现，那么对应文件可能已经遭受到篡改或替换（注意！不一定是遭受攻击，只是说要你侧重在这些文件上排查）</p><p>不过这个命令有局限性，那就是只能检查通过 RPM 包方式安装的文件；而且如果 RPM 工具遭受攻击，那就不能用这种方法了，这时候你可以从正常的系统上去复制一个 RPM 工具来进行检测</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;不知道大家有没有看过这么一部电影：&lt;/p&gt;
&lt;img src=&quot;/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%AD%E5%8F%97%E6%94%BB%E5%87%BB%E4%B9%8B%E5</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>为什么有了 HTTP 还要 RPC</title>
    <link href="https://xxxsalted.github.io/2024/04/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%86-HTTP-%E8%BF%98%E8%A6%81-RPC/"/>
    <id>https://xxxsalted.github.io/2024/04/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%86-HTTP-%E8%BF%98%E8%A6%81-RPC/</id>
    <published>2024-04-28T07:00:51.000Z</published>
    <updated>2024-04-28T07:06:04.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么有了-HTTP-还要-RPC"><a href="#为什么有了-HTTP-还要-RPC" class="headerlink" title="为什么有了 HTTP 还要 RPC"></a>为什么有了 HTTP 还要 RPC</h1><p>哈喽大家好，我是咸鱼</p><p>随着互联网技术的发展，分布式架构越来越被人们所采用。在分布式架构下，<strong>为了实现复杂的业务逻辑，应用程序需要分布式通信实现远程调用</strong></p><p>而这时候就需要一种协议来支持远程过程调用，以便实现不同应用程序之间的数据交换和信息传递。其中常用的协议包括 HTTP 协议和 RPC 协议</p><p>HTTP 协议和 RPC 协议都是用于计算机之间进行通信的协议。那么小伙伴们有没有想过<strong>它们之间有什么区别呢？有了HTTP为什么还要RPC呢？</strong></p><p>为了解答上面的疑问，我们先从这两个协议的介绍开始</p><h2 id="HTTP-和-RPC"><a href="#HTTP-和-RPC" class="headerlink" title="HTTP 和 RPC"></a>HTTP 和 RPC</h2><ul><li>HTTP</li></ul><p>学过计算机网络的小伙伴们相信对下面这段话再熟悉不过了：</p><p><strong>HTTP（HyperText Transfer Protocol，超文本传输协议）协议</strong>，主要用于在 Web 浏览器和 Web 服务器（B&#x2F;S架构）之间传输超文本标记语言（HTML）文件，支持客户端和服务器之间的通信</p><p>HTTP 协议是网络传输协议中应用最为广泛的一种，HTTP 协议基于请求&#x2F;响应模型，通过在客户端和服务器之间交换请求和响应来传输数据。</p><p>它简单、灵活、可扩展，而且最重要的是——它是一种无状态协议，也就是说，每次客户端和服务器之间交换请求和响应时，HTTP协议都是一张白纸，不会记住之前的任何信息</p><p>而无状态协议重要的一点优势是可靠，即使某个请求失败或者丢失，也不会影响到其他请求的处理</p><p>HTTP 协议使用文本格式进行传输，方便开发人员去阅读和调试，又因具有可跨平台、可扩展、可缓存、可重用等优点被广泛应用于 Web 开发中，常用于网页访问、图片加载等场景</p><p>看到这里，小伙伴可能会想，<strong>HTTP 这么神，它真的就一点缺点没有吗？</strong>当然肯定是有的</p><p>前面我们说到 HTTP 协议是无状态的，也就是说每次请求和响应之间是没有关联的，服务器不会记住之前的任何信息，所以会导致每次请求都要重新建立连接</p><p>在处理一些长连接或高并发的场景时，每次请求都需要重新建立连接，而这个过程不但会增加了网络开销和延迟，还会消耗服务器的资源，从而降低了效率。如果使用有状态的协议，服务器可以记住之前的信息，避免了重复建立连接的过程</p><p>除此之外，因为 HTTP 协议最初设计的目的是为了在客户端和服务器之间传输 HTML 文档，即数据传输格式是基于文本的</p><p>所以说 HTTP 协议不支持类型化的数据传输和自定义协议扩展，请求和响应的格式是固定的，这就导致了它不能很好地支持自定义数据结构和复杂逻辑</p><p>简单来说，HTTP 协议有点“死板”</p><ul><li>RPC</li></ul><p><strong>RPC（Remote Procedure Call，远程过程调用）协议是一种进程间通信协议</strong>，用于实现分布式应用程序之间的远程调用，使得不同的应用程序可以像调用本地程序一样调用远程程序</p><p><strong>RPC 协议基于函数调用模型</strong>。在 RPC 协议中，客户端调用远程服务器上的函数时，会将参数打包成消息并发送给服务器，服务器接收到消息后，解包参数并执行相应的函数，最后将结果打包成消息并发送回客户端、</p><p>这这个过程对于客户端来说是透明的，就像调用本地函数一样，即 RPC 可以实现在不同的进程或不同的机器之间进行函数调用</p><p>它具有网络传输速度快、协议扩展性好等优点（因为采用了二进制数据传输格式，相对于HTTP等基于文本的协议，二进制格式传输数据更加高效）。不但如此，RPC 的设计初衷就是支持多种数据格式和传输协议，这使得它可以很好地支持复杂的数据结构和逻辑</p><p>此外，RPC 协议可以使用更高效的编码和传输协议，还可以使用异步调用来提高响应速度</p><p>我们常说，<strong>世上没有完美的东西，HTTP 如此，RPC 也是如此</strong></p><p>与 HTTP 相比，RPC 更加复杂。为了实现 RPC 协议的设计目标（高效、灵活和可扩展），它需要定义更多的接口和协议，同时需要更多的配置和管理。当然这会提高开发和运维的难度</p><p>为了支持跨语言、跨平台的远程调用，RPC 通常不包含安全机制。如果不采取额外的安全措施，就有可能存在身份伪造、数据篡改、拒绝服务等安全问题</p><p>为了保护网络安全，我们可以在 RPC 中实现额外的安全措施：</p><ol><li>例如使用SSL&#x2F;TLS协议进行加密通信</li><li>使用数字证书进行身份验证</li><li>使用访问控制列表进行授权</li><li>进行安全审计和漏洞扫描</li></ol><p>前面我们说到，RPC 通常采用二进制数据传输格式，而不是基于文本的格式。二进制格式虽然传输效率高，但是需要额外的计算资源来序列化和反序列化参数和返回值</p><blockquote><p> 在 RPC 中，客户端和服务器之间需要将参数和返回值打包成二进制数据，并在网络上传输。这个过程需要将参数和返回值转换为二进制格式，并进行压缩和编码，以减少数据传输量</p><p> 对于接收方，需要将接收到的二进制数据解码并转换为原始数据格式。这个过程需要消耗额外的计算资源</p><p> 因此，RPC需要额外的网络带宽和计算资源来序列化和反序列化参数和返回值</p></blockquote><h2 id="HTTP-和-RPC-的区别"><a href="#HTTP-和-RPC-的区别" class="headerlink" title="HTTP 和 RPC 的区别"></a>HTTP 和 RPC 的区别</h2><ol><li>目的不同</li></ol><p>HTTP 是一种无状态的协议，它的主要目的在客户端和服务器之间交换请求和响应来传输文本内容</p><p>RPC 是一种有状态的协议，它的主要目的是在客户端和服务器之间传递信息并调用远程函数</p><ol start="2"><li>传输方式不同</li></ol><p>HTTP 使用文本（如 HTML、XML、JSON等）作为载体，并且使用明文传输</p><p>RPC可以使用多种格式传输（例如二进制格式），并且可以使用额外的安全加密技术保证传输安全性</p><ol start="3"><li>通信方式不同</li></ol><p>HTTP 使用的是请求&#x2F;响应模型，客户端向服务器发送请求并等待响应。客户端发送一个请求，服务器返回一个响应</p><p>RPC 使用的是调用&#x2F;返回模型，客户端调用服务器上的远程函数并等待返回结果。RPC 支持多种不同的调用方式，如同步调用、异步调用、流式调用等</p><h2 id="有了-HTTP-为什么还要-RPC？"><a href="#有了-HTTP-为什么还要-RPC？" class="headerlink" title="有了 HTTP 为什么还要 RPC？"></a>有了 HTTP 为什么还要 RPC？</h2><p>虽然 HTTP 已经成为了网络通信的重要标准之一而且被广泛应用于互联网上的各种场景，但是在某些情况下，它并不能满足用户的需求</p><p>例如在一些复杂的分布式应用场景下（分布式系统中的服务调用、微服务架构中的服务间通信等），RPC 协议要比 HTTP 协议更适合</p><p>咸鱼将从以下几点来阐述一下 RPC 为什么更适合复杂的分布式应用场景</p><p><strong>从时效性度来看</strong></p><ul><li>HTTP 协议的数据格式有一定的局限性，比如只能传输文本，传输效率低下</li><li>HTTP协议是基于请求&#x2F;响应模型，每次请求都需要建立一个新的连接，这样会增加网络开销</li><li>相比于 HTTP 协议，RPC 协议通常使用二进制数据格式进行传输，通常<strong>具有更高的传输效率和更低的网络延迟</strong></li><li>相比于 HTTP 协议，RRPC协议还支持异步调用和批量调用等高级特性，可以提高系统的性能和吞吐量</li></ul><p><strong>从安全性来看</strong></p><ul><li>HTTP 是一种文本协议，数据传输使用的是明文，这样就容易被中间人窃听或者篡改数据（不过可以使用SSL&#x2F;TLS 协议对数据进行加密和认证）</li><li>相比于 HTTP 协议，RPC 支持传输各种类型的数据（比如二进制），<strong>可以更快灵活地传输大量数据</strong>，并且也可以加密传输以保证安全性</li></ul><p><strong>从场景复杂度来看</strong></p><ul><li>在复杂的业务逻辑和数据结构场景下，通常需要进行多次请求和响应操作，而 HTTP 作为无状态协议无法保持会话状态，每次请求和响应都需要重新建立连接和传输数据，这会导致网络延迟和性能下降</li><li>HTTP协议的请求和响应通常是基于文本或二进制数据格式，无法直接支持复杂的数据结构，例如对象、数组、枚举等</li><li>相比于 HTTP 协议，RPC 是一种有状态协议，而且 RPC 可以通过定义接口和方法来封装业务逻辑，使得客户端可以通过简单的调用来完成复杂的操作</li><li>相比于 HTTP 协议，RPC协议是一种面向对象的协议，它可以直接支持复杂的数据结构，例如对象、数组、枚举等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么有了-HTTP-还要-RPC&quot;&gt;&lt;a href=&quot;#为什么有了-HTTP-还要-RPC&quot; class=&quot;headerlink&quot; title=&quot;为什么有了 HTTP 还要 RPC&quot;&gt;&lt;/a&gt;为什么有了 HTTP 还要 RPC&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>socket 到底是个啥</title>
    <link href="https://xxxsalted.github.io/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/"/>
    <id>https://xxxsalted.github.io/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</id>
    <published>2024-04-28T06:52:25.000Z</published>
    <updated>2024-04-28T06:58:49.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket-到底是个啥"><a href="#socket-到底是个啥" class="headerlink" title="socket 到底是个啥"></a>socket 到底是个啥</h1><p>哈喽大家好，我是咸鱼</p><p>我相信大家在面试过程中或多或少都会被问到这样一个问题：<strong>你能解释一下什么是 socket 吗</strong></p><p>我记得我当初的回答很是浅显：socket 也叫套接字，用来负责不同主机程序之间的网络通信连接，socket 的表现方式由四元组（ip地址：端口）组成</p><p>那么今天，咸鱼将跟大家打开 socket 的神秘大门，不但要搞清楚 socket 的概念，最好还能够了解它的底层实现</p><p>我们首先查看一下 socket 的翻译</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411094900903.png" class="" title="image-20230411094900903"><p>我们看到，socket 可以翻译成插座、插头，那现在请想象这么一个场景：<strong>给手机充电时，你将充电插头插入电源插座里面，是不是意味着插座与充电插头连接起来了</strong></p><p>在计算机世界中，socket 翻译成套接字，通过 socket 我们可以与某台服务器进行连接，而建立连接的过程，你可以脑补成将充电插头插进插座的过程</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411100858598.png" class="" title="image-20230411100858598"><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411131125668.png" class="" title="image-20230411131125668"><h2 id="socket-使用场景"><a href="#socket-使用场景" class="headerlink" title="socket 使用场景"></a>socket 使用场景</h2><p>假设我们想要将数据从 A 电脑的某个进程传送到 B 电脑的某个进程（比如咸鱼用微信发信息给冰冰）</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411102834038.png" class="" title="image-20230411102834038"><p>那么在与对方聊天的过程中，其实就是这两台电脑中的微信进程相互传输数据的过程</p><p>在这个过程中，两台电脑各自调用 socket 方法，然后会得到一个 fd 句柄（socket_fd），这个 fd 句柄就相当于 socket 的身份证号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket_fd = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure><p>得到 fd 句柄之后：</p><ol><li>服务端执行 bind()、listen()、accept() 方法等待客户端建立连接的请求</li><li>客户端执行 connect() 方法向服务端发起连接</li><li>连接建立起来之后，两端都可以执行 send()、recv() 方法来互相传递数据</li></ol><p>PS：对于不同的传输层协议，上面这个过程是不一样的，详情可以查看我之前的文章《python 网络编程》</p><p><strong>TCP 协议</strong></p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230216084702695.png" class="" title="image-20230216084702695"><p><strong>UDP 协议</strong></p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230216090008989.png" class="" title="image-20230216090008989"><h2 id="socket-设计"><a href="#socket-设计" class="headerlink" title="socket 设计"></a>socket 设计</h2><p>我们知道了 socket 是用来实现网络传输功能的，它负责不同主机进程之间的网络通信连接</p><p>我将上面的问题改一下，把 <strong>”socket 是什么“</strong> 改成 <strong>”如果让你来实现一个网络传输功能，你会怎么设计“</strong></p><p>网络传输功能，简单点来讲就是两端服务器之间进行网络通信并互相收发数据，收发数据也就是读写数据</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411105543022.png" class="" title="image-20230411105543022"><p>首先我们会遇到第一个问题：<strong>茫茫互联网中你怎么能找到那台梦中情机</strong></p><p>聪明的你肯定会想到——ip地址！我们用 ip 地址来定位电脑</p><p>找到了你的梦中情机之后，你会发现，<strong>一台电脑上面这么多进程，我怎么才能找到与我通信的那个进程（比如说微信）</strong></p><p>聪明的你很快就想到了用端口号（port）</p><p>可以这么理解，ip 地址是用来定位街区的，而端口号 port 对应这个街区中的门牌号，通过 ip +port 的组合，你可以在茫茫互联网中找到属于你的梦中情机并且与之通信</p><p>所以<strong>你在设计网络传输功能初期，定义了一个数据结构 sock，sock 里面包含了 ip 和 port 字段（假设用 C 语言实现）</strong></p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411110520452.png" class="" title="image-20230411110520452"><p>在 Linux 中（以 CentOS 7举例），在头文件<code>/usr/include/netinet/in.h</code>可以看到负责套接字地址的 sock 结构体</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230412153930775.png" class="" title="image-20230412153930775"><blockquote><p><code>sin_family</code> 字段为 AF_INET，<code>sin_port</code> 表示端口号，<code>sin_addr</code> 表示 IPv4 地址，是一个 <code>struct in_addr</code> 类型的结构体</p><p><code>sin6_family</code> 字段为 AF_INET6，<code>sin6_port</code> 表示端口号，<code>sin6_addr</code> 表示 IPv6 地址，是一个 <code>struct in6_addr</code> 类型的结构体</p></blockquote><p>解决了定位问题之后，我们知道在计算机网络中有很多协议，这些协议规定了计算机之间的通信方式</p><p>比如你是选用可靠的 TCP 协议去进行网络通信，还是相对不可靠的 UDP 协议</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411111356888.png" class="" title="image-20230411111356888"><p>不同的网络协议还对应着不同的网络通信场景，如果你选择了 TCP协议，你还得考虑例如滑动窗口、超时重传这些场景</p><p>所以有了 ip 和 port 还不行，你还<strong>需要定义新的数据结构用来维护网络协议以及对应的网络场景</strong>。</p><p>又因为不同的网络协议中有一些功能相似的方法（例如收发数据），于是你决定将不同协议中的公共的部分提取出来，通过”继承“的方式来实现功能复用</p><p>所以可以先定义一个名为 sock 的数据结构，然后定义”继承“ sock 的各类 sock </p><p>**PS：Linux 内核是用 C 语言实现的，在 C 语言中没有继承这个概念，你可以简单将这个继承理解成 xx_sock 基于 sock 进行了扩展，xx_sock 是 sock 的进阶版 **</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411135249425.png" class="" title="image-20230411135249425"><ul><li><code>sock</code>：最基础的结构，用来维护任何网络协议都会用到的<strong>收发数据缓冲区</strong>（公用部分）</li><li><code>inet_sock</code>：负责网络传输功能的 sock，在 sock 基础上加了 TTL（网络生存时间）、ip 地址和端口号这些跟网络传输相关的字段信息</li><li><code>inet_connection_sock</code>：面向连接的 sock，在 <code>inet_sock</code> 基础上添加了面向连接的协议里相关字段，比如 accept 队列，数据包分片大小，握手失败，重试次数等；虽然我们现在提到面向连接的协议就是指 TCP，但从设计上 Linux 需要支持扩展其他面向连接的新协议，比如 SCTP 协议，所以说 <code>tcp_sock</code> 则是在这个基础上实现的真正的 TCP 协议专用 sock 结构</li></ul><p>上面例子中的这些 sock 都可以在系统上直接找到，以 CentOS 7 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#inet_sock</span></span><br><span class="line">/usr/src/kernels/内核版本.debug/include/net/inet_sock.h</span><br><span class="line"></span><br><span class="line"><span class="comment">#inet_connection_sock</span></span><br><span class="line">/usr/src/kernels/内核版本.debug/include/net/inet_connection_sock.h</span><br></pre></td></tr></table></figure><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411135728772.png" class="" title="image-20230411135728772"><p>现在你用代码实现了这一堆数据结构——sock，不同的 sock 分别实现自己职责内的功能（负责面向连接的数据结构 <code>inet_connection_sock</code>、负责 UDP 协议的数据结构 <code>udp_sock</code> 等等）</p><p>但是你需要这些 sock 去跟硬件网卡交互才能实现网络传输的功能，既然需要跟硬件交互，那就说明<strong>需要比较高的操作系统权限</strong></p><p>同时考虑到性能和安全，这套数据结构不能放在用户态，需要给它放<strong>到系统内核里面</strong></p><p>既然这套数据结构在内核里，处在用户态的程序想要用这套数据结构来实现网络传输功能该怎么办呢？</p><p>除此之外，处在用户态的程序并不关心也不知道你这套数据结构在底层内核是怎么操作的，功能是怎么实现的，它只关心结果</p><p>于是你想到了用接口调用的方式——你<strong>将一个个功能抽象一个个接口，以后别人只需要调用这些接口，就可以让内核中这一大堆复杂的数据结构去实现指定功能</strong></p><p>又因为在 <strong>Linux 中一切皆文件</strong>，你索性将这些 sock 封装成文件，当用户态的程序去调用你提供的接口时，需要先创建一个 sock 文件</p><p>这个新生成的 sock 文件有一个文件句柄 fd，用户态的程序只需要拿着这个 fd 就可以对内核中的 sock 进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sock 文件句柄 socket_fd</span></span><br><span class="line">socket_fd = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411143421572.png" class="" title="image-20230411143421572"><p>上面有说到，你将不同的数据结构（<code>inet_sock</code>、<code>tcp_sock</code> 等等）抽象成一个个 API 接口，以后别人只需要调用这些 API 接口就可以驱动我们写好的这一大堆复杂的数据结构去进行网络传输</p><p>下面列出了一些常见的接口：</p><ul><li>send</li><li>recv</li><li>bind</li><li>listen</li><li>connect</li></ul><p>到这里，整个网络传输功能就已经基本实现了。上面列举出来的这些方法，其实就是 socket 提供出来的接口</p><p>到这里，我们对 socket 有了一个更深的了解——socket 其实相当于一个接口层，它处在内核态和用户态之间：</p><ul><li>向上用户态<ul><li>为处在用户态的程序提供 API 接口，方便用户态程序实现网络传输功能</li></ul></li><li>向下内核态<ul><li>对网卡进行操作，负责网络传输工作</li></ul></li></ul><p>或者你也可以这么理解，<strong>处在用户态的程序通过 socket 提供的接口，将网络传输的这部分工作外包给了 Linux 内核</strong></p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411145643708.png" class="" title="image-20230411145643708"><p>我们以 tcp 协议为例子来看下 python 中是如何操作 socket 的</p><ul><li>客户端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个 socket 并获得 socket 文件的句柄</span></span><br><span class="line">socket_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用 connect 接口进行连接</span></span><br><span class="line">socket_fd.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用 send 接口进行数据传输</span></span><br><span class="line">socket_fd.send(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用 close 接口关闭 socket</span></span><br><span class="line">socket_fd.close()</span><br></pre></td></tr></table></figure><p>在客户端中，程序首先调用 socket 提供的 socket 方法创建一个 socket 文件来获得 socket 句柄，然后调用 connect 方法，这时候内核会根据 socket_fd 找到对应的 sock 文件</p><p>再根据文件里的信息找到处在内核的 sock 结构，通过 sock 结构与服务端进行三次握手建立连接</p><p>连接建立好之后，客户端调用 send 方法来进行数据传输，sock 中定义了一个发送缓冲区和接收缓冲区，其实就是一个链表，链表上面放着一个个等待发送或接收的数据</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们再次回到那个问题——socket 是什么？</p><p><strong>sock（或 socket）是操作系统内核提供的一种数据结构，用于实现网络传输功能</strong></p><p><strong>基于不同的网络协议以及应用场景，衍生了各种类型的 sock，每个网络层协议都有相应的 sock 结构体来管理该层协议的连接状态和数据传输。各类 sock 操作硬件网卡，就实现了网络传输的功能</strong></p><p><strong>为了将这些功能让处在用户态的应用程序使用，不但引入了 socket 层，还将各类功能的实现方式抽象成了 API 接口，供应用程序调用</strong></p><p><strong>同时将 sock 封装成文件，应用程序就可以在用户层通过文件句柄（socket fd）来操作内核中 sock 的网络传输功能</strong></p><p><strong>这个 socket fd 是一个 int 类型的数字，而 socket 中文翻译叫做套接字，结合这个 socket fd，你是不是可以将其理解成：一套用于连接的数字</strong></p><p><strong>而 socket 分 Internet socket 和 UNIX Domain socket，两者都可以用于不同主机进程间的通信和本机进程间的通信，只是前者采用的是基于 IP 协议的网络通信方式，而后者采用的是基于本地文件系统的通信方式</strong></p><p>关于 UNIX Domain socket，可以通过 <code>netstat -x</code> 查看</p><img src="/2024/04/28/socket-%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/image-20230411153429695.png" class="" title="image-20230411153429695">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;socket-到底是个啥&quot;&gt;&lt;a href=&quot;#socket-到底是个啥&quot; class=&quot;headerlink&quot; title=&quot;socket 到底是个啥&quot;&gt;&lt;/a&gt;socket 到底是个啥&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼&lt;/p&gt;
&lt;p&gt;我相信大家在面试过程中或</summary>
      
    
    
    
    
    <category term="网络" scheme="https://xxxsalted.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>博客添加评论功能及定制化样式</title>
    <link href="https://xxxsalted.github.io/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/"/>
    <id>https://xxxsalted.github.io/2024/04/28/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96%E6%A0%B7%E5%BC%8F/</id>
    <published>2024-04-28T02:56:16.000Z</published>
    <updated>2024-05-09T01:31:44.149Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>在搭建了博客并换了主题之后，发现有许多细节方面的东西还需要完善和定制化一下，比如说行距和引用的样式我不是很喜欢，以及没有评论功能。</p><p>于是决定自己动手，说干就干。</p><blockquote><p>PS：下文的修改操作仅限于博客主题（Klise），不同主题的配置文件可能会不一样，不过大体思路都是差不多的，即修改 <code>scss | config | ejs</code> 文件。</p></blockquote><h2 id="Valine-评论系统"><a href="#Valine-评论系统" class="headerlink" title="Valine 评论系统"></a>Valine 评论系统</h2><p>搜了网上的教程，决定采用 <a href="https://valine.js.org/">Valine </a>来实现博客评论功能。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240428085208682.png" alt="image-20240428085208682"></p><p>因为 Valine 的存储是基于 <a href="https://www.leancloud.cn/">LearnCloud</a> 的，所以我们要先注册一个 LeanCloud 账号。</p><p>登录之后进入【控制台】点击【创建应用】</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240428085716880.png" alt="image-20240428085716880"></p><p>应用创建好以后，进入刚刚创建的应用，选择左下角的【设置】 &gt; 【应用凭证】，然后就能看到你的 <code>APP ID</code> 和 <code>APP Key</code> 了：</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240428085934208.png" alt="image-20240428085934208"></p><p>进入到你的博客根目录，找到你对应主题的主配置文件 <code>_config.yml</code>，添加关于 Valine 的配置字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 开启评论系统</span></span><br><span class="line">  <span class="built_in">type</span>: valine <span class="comment"># 采用哪种评论系统</span></span><br><span class="line">  button: <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  appid: <span class="comment"># 从 LeanCloud 的应用中得到的 appKey</span></span><br><span class="line">  appkey: <span class="comment"># 从 LeanCloud 的应用中得到的 appId.</span></span><br><span class="line">  placeholder: <span class="string">&quot;说点什么吧！&quot;</span> <span class="comment"># 评论框占位提示符</span></span><br><span class="line">  path: window.location.pathname <span class="comment"># 当前文章页路径，用于区分不同的文章页，以保证正确读取该文章页下的评论列表。</span></span><br><span class="line">  avatar: /img/redcat.jpg <span class="comment"># Gravatar 头像</span></span><br><span class="line">  guest_info: nick,mail,<span class="built_in">link</span> </span><br><span class="line">  pageSize: 10 <span class="comment"># 评论列表分页，每页条数。</span></span><br><span class="line">  recordIP: <span class="literal">false</span> <span class="comment"># 是否记录评论者IP</span></span><br><span class="line">  serverURLs: <span class="comment"># 该配置适用于国内自定义域名用户, 海外版本会自动检测</span></span><br><span class="line">  emojiCDN: <span class="comment"># 设置表情包 CDN</span></span><br><span class="line">  enableQQ: <span class="literal">true</span> <span class="comment"># 是否启用昵称框自动获取QQ昵称和QQ头像, 默认关闭</span></span><br></pre></td></tr></table></figure><p>配置好之后进入 <code>Git bash</code> 窗口，重新生成一下静态文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>然后在本地测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>但是<strong>发现没有生效</strong>，一开始我还以为配置格式不对（yaml 格式要求比较严格），再三重复确认了格式没问题之后，还是没有生效。</p><p>我就在想是不是没有渲染出来，然后去到主题目录下的 <code>layout</code> 目录，发现了 <code>valine.ejs</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;博客根目录&gt;\Klise\layout\partials\_comments\valine.ejs</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240428092859252.png" alt="image-20240428092859252"></p><p>打开一看发现里面居然没有内容，然后网上搜了下资料，把相关内容复制粘贴了进去。</p><p>结果发现还是不行，是不是没有去调用这个 ejs 文件？</p><p>打开 <code>&lt;博客根目录&gt;\Klise\layout\partials\_comments\index.ejs</code> 文件查看验证一下，果然如此。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- <span class="title function_">partial</span>(<span class="string">&#x27;partials/_comments/waline&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure><p>因为我们用的是 Valine，所以把 <code>partials/_comments/waline</code> 改成 <code>partials/_comments/valine</code> 即可。</p><p>再试一下，成功了！</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240428093727334.png" alt="image-20240428093727334"></p><h2 id="样式定制化"><a href="#样式定制化" class="headerlink" title="样式定制化"></a>样式定制化</h2><p>正文默认的行间距我不是很满意，所以打算改一下，打开我们的博客网页然后点击 <code>F12</code> 查看网页元素。</p><p>发现正文内容的样式字段在 <code>post</code> 类下的 <code>p</code> 标签中，而且在 <code>main.css</code> 文件里面。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240428095758739.png" alt="image-20240428095758739"></p><p>但是这个 <code>main.css</code> 是动态生成的，即 hexo 生成 public 目录的时候会去找 <code>主题\source</code> 目录下的 sass 文件然后生成 <code>main.css</code> 文件。</p><p>所以我们想要修改样式，就必须找到标签样式对应的 sass 文件。</p><p>我们找到主题目录下的 <code>main.scss</code> 文件，发现他还引用了其他的 sass 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;博客根目录&gt;\themes\Klise\source\css\main.scss</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Import sass files</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;partials/fonts&quot;</span>,<span class="string">&quot;partials/base&quot;</span>,<span class="string">&quot;partials/layout&quot;</span>,<span class="string">&quot;partials/post&quot;</span>,<span class="string">&quot;partials/miscellaneous&quot;</span>,<span class="string">&quot;partials/dark&quot;</span>;</span><br></pre></td></tr></table></figure><p>然后一个一个去找，最后在 <code>_post.scss</code> 文件下发现了对应的配置字段。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p>接下来修改引用样式对应的配置，原本引用样式是两端对齐的方式，而且还是斜体，我不是很喜欢。</p><p>发现还是在 <code>_post.scss</code> 文件下，修改如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">blockquote</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后重新生成静态文件并在本地验证，没什么问题就把新修改的内容部署到 Git 上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;在搭建了博客并换了主题之后，发现有许多细节方面的东西还需要完善和定制化一下，比如说行距和引用的样式我不是很喜欢，以及没有评论功能。&lt;/p&gt;
&lt;p&gt;于是决定自己动手，说干就干。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：下文的修改操作</summary>
      
    
    
    
    
    <category term="博客" scheme="https://xxxsalted.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>又重新搭了个个人博客</title>
    <link href="https://xxxsalted.github.io/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xxxsalted.github.io/2024/04/28/%E5%8F%88%E9%87%8D%E6%96%B0%E6%90%AD%E4%BA%86%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-04-28T02:55:28.000Z</published>
    <updated>2024-05-09T01:30:48.856Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>前段时间看到一个学弟写了篇用 Hexo 搭建博客的教程，心中沉寂已久的激情重新被点燃起来。（以前搞过一个个人网站，但是因为种种原因最后不了了之）</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240426161141490.png" alt="image-20240426161141490"></p><p>于是花了一天时间参考教程搭了个博客网站，我的博客网址是：<a href="https://xxxsalted.github.io/">https://xxxsalted.github.io/</a></p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240426212343889.png" alt="image-20240426212343889"></p><p>下面是相关教程。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>俗话说：”工欲善其事必先利其器”，在搭建个人博客之前我们先要把环境准备好。</p><ul><li>Github 准备</li></ul><p>作为全球最大的程序员同性交友网站（<del>不是</del>），我们首先创建一个 Github 账号，官网地址：<a href="https://github.com/">https://github.com</a></p><p>然后我们下载并安装 Git，官网地址： <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>毕竟是国外地址，我们访问起来可能比较慢，这时候我们可以访问下面的地址来下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.42.0.windows.2/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424091054613.png" alt="image-20240424091054613"></p><ul><li>Node.js 准备</li></ul><p>Node.js 简单来讲是一个 JavaScript 的运行环境，让我们的 JavaScript 代码不需要在浏览器上也能运行。</p><p>下载安装 Nodejs：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><ul><li>环境配置</li></ul><p>下载安装好 Git 和 Node.js 之后，我们在键盘上按下 <code>win+R</code> 键，输入 <code>cmd</code>。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424091629558.png" alt="image-20240424091629558"></p><p>然后在弹出的 cmd 窗口中输入下面的命令，来检验是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line"></span><br><span class="line">npm version</span><br></pre></td></tr></table></figure><ul><li>下载 cnpm</li></ul><p>npm 是 Node.js 的安装包管理器，但是由于限制我们有时候通过 npm 下载东西会特别的慢，这时候我们就需要换一个国内的下载源并且使用 cnpm 来管理 Node.js。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><ul><li>安装 Hexo</li></ul><p>接下来我们要安装 Hexo ，还是在刚刚弹出的 cmd 窗口中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo</span><br></pre></td></tr></table></figure><ul><li>创建新文件夹</li></ul><p>我们在电脑任意位置创建一个新文件夹（最好别放在 C 盘下且文件名是英文），这个文件夹将用于储存你网站的静态文件。</p><p>比如说我的新建文件夹路径如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\myblog</span><br></pre></td></tr></table></figure><p>然后右键鼠标，打开<code>Git Bash Here</code>，并依次输入以下命令：</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424092443228.png" alt="image-20240424092443228"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 hexo</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网页文件</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到本地上</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424155016132.png" alt="image-20240424155016132"></p><p>在执行命令的时候出现权限相关问题（<code>npm ERR! &#123; Error: EPERM: operation not permitted, mkdir &#39;C:\Program Files\nodejs\node_cache\_locks&#39;</code>），可以参考下面这篇文章来解决：</p><p><a href="https://www.cnblogs.com/yinxiangzhenlihai/p/15936518.html">https://www.cnblogs.com/yinxiangzhenlihai/p/15936518.html</a></p><p>然后你会发现你的目录下面多了很多文件：</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424143956657.png" alt="image-20240424143956657"></p><p>接着打开下面网址验证一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424154951369.png" alt="image-20240424154951369"></p><p>如果你想停止运行，可以在上面的 bash 命令窗口中执行 <code>Ctrl+C</code> 命令。</p><p>到现在我们的个人博客就完成了一半了！</p><h2 id="托管至-GitHub"><a href="#托管至-GitHub" class="headerlink" title="托管至 GitHub"></a>托管至 GitHub</h2><ul><li>仓库创建</li></ul><p>我们登录自己的 Github ，然后在 Github 中新建一个仓库。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424093519086.png" alt="image-20240424093519086"></p><p><strong>注意</strong>: <code>Repository name</code>一定要按照图片上的格式填写，其他的默认即可。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424093601949.png" alt="image-20240424093601949"></p><ul><li>设置免密登录</li></ul><p>为了方便我们本地与 Github 互相通信，我们需要设置 SSH 免密登录。</p><p>首先找到你的 Github 邮箱和用户名，然后在你个人博客的文件夹下右键鼠标，打开<code>Git Bash Here</code>，并依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;github 用户名&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;github 邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后我们检验一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>接着我们在键盘上按下 <code>win+R</code> 键，输入 <code>cmd</code>，在 <code>cmd</code> 窗口里面输入下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查本机是否已经存在 SSH 密钥</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>如果提示：<code>No such file or directory</code> 则输入如下代码，生成 SSH 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;github 邮箱地址&quot;</span></span><br></pre></td></tr></table></figure><p>然后连续敲 3 次回车，最终会生成一个文件在“用户”目录下，打开 “用户” 目录（<code>C:\用户\用户名.ssh</code>）并找到<code>id_rsa.p ub</code>文件。</p><p>用“记事本”打开并复制里面的内容，在  Github 主页的右上角进入 <code>Setting</code> -&gt; 左侧菜单栏 “<code>SSH and GPG keys</code>” -&gt; <code>New SSH Key</code> -&gt; 填写你获得的 <code>SSH Key</code>。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424094409595.png" alt="image-20240424094409595"></p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424094435711.png" alt="image-20240424094435711"></p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424094523632.png" alt="image-20240424094523632"></p><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>到了这一步，我们就可以正式地把博客部署到 Git 上了，进入我们前面创建的博客文件夹，然后找到配置文件 <code>_config.yml</code>。</p><p><img src="https://raw.githubusercontent.com/xxxsalted/images/main/hexo/image-20240424112352199.png" alt="image-20240424112352199"></p><p>下面是我的配置文件的部分内容，大家可以参考一下</p><p>部署路径部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 你的 git 仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>网站相关部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Amoon<span class="string">&#x27;s blog</span></span><br><span class="line"><span class="string">subtitle: &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">description: &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">keywords:</span></span><br><span class="line"><span class="string">author: Ammon</span></span><br><span class="line"><span class="string">language: zh-CN</span></span><br><span class="line"><span class="string">timezone: &#x27;</span>Asia/shanghai<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;</span>https://username.github.io/project<span class="string">&#x27;</span></span><br><span class="line"><span class="string">url:https://xxxsalted.github.io </span></span><br><span class="line"><span class="string">root: /</span></span><br><span class="line"><span class="string">permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="string">permalink_defaults:</span></span><br><span class="line"><span class="string">pretty_urls:</span></span><br><span class="line"><span class="string">  trailing_index: true # Set to false to remove trailing &#x27;</span>index.html<span class="string">&#x27; from permalinks</span></span><br><span class="line"><span class="string">  trailing_html: true # Set to false to remove trailing &#x27;</span>.html<span class="string">&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>我们还需要安装一个插件，打开 Git bash 窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装自动部署工具</span></span><br><span class="line">cnpm install hexo-deployer-git --save </span><br></pre></td></tr></table></figure><p>然后依次执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除 public 缓存文件</span></span><br><span class="line">hexo clean </span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新的网站静态文件到默认设置的 public 文件夹，也可以用 hexo g 命令</span></span><br><span class="line">hexo generate </span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到 github，也可以用 hexo d 命令</span></span><br><span class="line">hexo deploy </span><br></pre></td></tr></table></figure><p>当然，在生成静态文件之后你可以使用 <code>hexo s</code> 命令生成一个本地的 hexo 网站来做相关检验和测试，如果没什么问题就使用 <code>hexo d</code> 命令将其部署到 git 上</p><p>最后我们就可以访问博客啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;前段时间看到一个学弟写了篇用 Hexo 搭建博客的教程，心中沉寂已久的激情重新被点燃起来。（以前搞过一个个人网站，但是因为种种原因最后不了了之）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubuserconten</summary>
      
    
    
    
    
    <category term="博客" scheme="https://xxxsalted.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>程序员购车指南</title>
    <link href="https://xxxsalted.github.io/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/"/>
    <id>https://xxxsalted.github.io/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/</id>
    <published>2024-04-26T09:59:02.000Z</published>
    <updated>2024-04-28T01:46:10.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序员购车指南"><a href="#程序员购车指南" class="headerlink" title="程序员购车指南"></a>程序员购车指南</h1><p>哈喽大家好，我是咸鱼。</p><p>爱车可以说是大部分男人的天性，而我对汽车的热情却远不及对手表的钟爱（痴迷劳力士）。以至于我的朋友掏出车钥匙指着上面的苹果树标志跟我介绍奔驰 AMG 系列的强劲性能和马力时，我只能尽量假装自己听懂不让他尴尬。</p><p>不过从今年开始，大数据就时不时给我推一些关于汽车的介绍和评测视频，加上打算给老爸买辆车。为了不被 4S 店忽悠，我逐渐开始了解一些选车和购车的基本知识。</p><p>在搜集了许多资料之后，我写出了这份程序员购车指南，希望对大家有所帮助。</p><h2 id="购车前"><a href="#购车前" class="headerlink" title="购车前"></a>购车前</h2><p>我们在选车的时候，除了考虑价格因素外，最重要的就是要关注车辆的配置参数。比如说油耗、轴距、车辆尺寸、发动机功率等等，那么我们就来看下选车时常见的一些参考参数。</p><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><p><strong>油耗</strong></p><p>首先就是大家最关心的油耗，我们在听到别人评论一辆车的油耗时，都会说”几个油“，意思是这辆车行驶了一百公里消耗了多少升油，也就是【百公里油耗】。</p><p>如果说一辆车百公里 9 个油，意思就是这辆车行驶了 100km，用掉了 9 升油，由此也可以推出每公里花费多少钱。</p><p>假设当前油价为 7元&#x2F;升，百公里 9 个油，那么每公里油钱为 0.63 元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 * 9 / 100 = 0.63（元）</span><br></pre></td></tr></table></figure><p>在不同的行驶环境下。油耗也会有不同，比如高速路和市区，油耗就会有较为明显的差别。</p><p><strong>车辆尺寸（单位：mm）</strong></p><p>车辆的长、宽、高是一部车的基本外形尺寸，其中：</p><ul><li>车身长度是指汽车长度方向两个极端点间的距离，即从前保险杠最凸出的位置到后保险杠最凸出的位置的距离。</li><li>车身宽度是指汽车宽度方向两个极端点间的距离，但是这里不包括外后视镜、转向灯、挡泥板以及轮胎与地面接触变形的部分。</li><li>车身高度是指从地面到汽车最高点的距离，这个最高点包含车顶行李架，但是不包括天线</li></ul><p>一般来讲，车辆尺寸越大表示内部空间越大，舒适性越高</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413095251545.png" class="" title="image-20240413095251545"><p><strong>轴距（单位：mm）</strong></p><p>轴距，就是通过车辆同一侧相邻两车轮的中点，并垂直于车辆纵向对称平面的二垂线之间的距离。简单地说，<strong>就是汽车前轴中心到后轴中心的距离</strong>。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240412134706009.png" class="" title="image-20240412134706009"><p>轴距的长短直接影响汽车的长度，进而影响车的内部使用空间。在车长确定的情况下，轴距是影响乘坐空间最重要的因素。长轴距使乘员的纵向空间增大，将大大增加影响车辆乘坐舒适性的脚部空间。</p><p>不但如此，轴距越长，车辆的抗俯仰和横摆性能越好，但是会导致车辆机动性下降。</p><p><strong>等级划分</strong></p><p>汽车等级的由来可以追溯到汽车行业内部的定位和市场竞争需求。随着汽车行业的发展和不断壮大，车型的种类和数量也逐渐增多，为了更好地满足消费者的需求，厂商开始对不同类型的汽车进行分类和定位。</p><ul><li>北美等级划分标准</li></ul><p>北美地区将车辆划分成以下几类：</p><ol><li>经济型轿车</li><li>次紧凑型车</li><li>紧凑型轿车</li><li>中型轿车</li><li>大型轿车</li><li>豪华轿车</li><li>加长轿车</li><li>敞篷车</li></ol><ul><li>欧洲等级划分标准</li></ul><p>欧洲地区分级采用的是大众汽车的分级方法。大众汽车通过车型平台的大小进行定位划分，分为 A00 级、A0 级、A 级、B 级、C 级和 D 级六个级别。这并非严格意义上的权威通用标准，而是大众品牌内部制定的一套分级方法，后来在德国和欧洲其他地区广泛应用，逐渐成为了欧洲汽车分级的标准</p><p>由于德国大众最先进入到国内与上海汽车厂合资成立上海大众汽车公司，因此我国一般使用大众汽车分级标准进行划分。汽车等级一般是<strong>根据汽车外部的尺寸、内部空间、轴距、排量等参数来进行划分的，其中最主要的判断标准就是轴距。</strong></p><p>汽车分级标准（以轴距为主要判断依据）：</p><ul><li>A00 级：轴距范围在 2 米至 2.3 米之间，发动机排量小于 1 升，例如奥拓。</li><li>A0 级：轴距范围在 2.3 米至 2.5 米之间，排量在 1 升至 1.5 升，例如飞度。</li><li>A 级：轴距范围在 2.5 米至 2.7 米之间，排量在 1.5 升至 2.0 升，例如卡罗拉。</li><li>B 级：轴距范围在 2.7 米至 2.9 米之间，排量在 1.8 升至 2.5 升，例如奥迪 A4、帕萨特。</li><li>C 级：轴距范围在 2.8 米至 3.0 米之间，排量在 2.3 升至 3.0 升，例如奥迪 A6。</li><li>D 级：轴距 3.0 米以上，排量 3.0 升以上，例如劳斯莱斯、宾利。</li></ul><p>汽车分级标准（以车长为主要判断依据）：</p><ul><li>A00 级：3.7 M 以内。</li><li>A0 级：3.7-4.3 M 之间。</li><li>A 级：4.3-4.6 M 之间。</li><li>B 级：4.6-4.9 M 之间。</li><li>C 级：4.9-5.1 M 之间。</li><li>D 级：5.1 M 以上。</li></ul><h3 id="发动机参数"><a href="#发动机参数" class="headerlink" title="发动机参数"></a>发动机参数</h3><p>众所周知，发动机是一辆油车的心脏，是油车的动力源泉。发动机的动力则来源于气缸内部，气缸就是一个把燃料的内能转化为动能的场所。</p><p>简单点来讲，燃料在气缸内燃烧产生的压力推动活塞上下运动，这些运动通过连杆传递给曲轴，最终将线性运动转化为旋转运动，然后，通过变速器和传动轴，将动力传递到驱动车轮上，从而推动汽车前进。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413100747090.png" class="" title="1990年保时捷3512一级方程式发动机"><p><strong>发动机排量（单位：mL）</strong></p><p>其中活塞上下运动过程中所通过的空间容积就叫做<strong>排量</strong>，又因为发动机都有多个气缸，所以发动机的排量就是所有气缸排量之和。</p><p>而根据气缸的排量方式和数量，产生出了不同的类型的发动机，例如直列发动机、V 型发动机、W 型发动机等等</p><p>比如说 V8 发动机就是 8 个气缸采用 V 型排列的发动机</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413134802502.png" class="" title="4.0 排量涡轮增压 V8 发动机"><p><strong>工作方式</strong></p><p>现在的发动机可分为自然吸气式（简称 L）和增压式（简称 T），其中增压式又可分为涡轮增压、机械增压、双增压。</p><p>现在市面上大部分车一般都是自吸式或者涡轮增压式，这里简单介绍下这两种。</p><ul><li>自然吸气</li></ul><p>在不通过任何增压器的情况下，让大气压将空气压入燃烧室的一种形式。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413110734828.png" class="" title="亚洲龙自吸发动机"><p>以四缸发动机为例，一个活塞完成一次工作循环需要经历四个阶段：</p><ol><li>进气行程：此时进气门打开，气缸内产生压力差，导致空气和燃油混合物被吸入气缸。</li><li>压缩行程：进气门关闭，混合气被压缩，活塞上升至最高点并点火。</li><li>燃烧行程：混合气燃烧产生膨胀，推动活塞向下运动，输出动力。</li><li>排气行程：此时排气门打开，废气被排出气缸。</li></ol><p>自然吸气是指在进气行程中，混合气利用气压差自然被吸入气缸；而增压系统则是通过增压器将空气压缩，提高气体压力和密度，使得在气门打开时气体自身的高压以及气压差的作用下增加进气量，从而提高发动机的功率。</p><p>优点：自然吸气发动机在动力输出上的平顺性与响应的直接性上，要远优于增压发动机</p><ul><li>涡轮增压</li></ul><p>涡轮增压发动机是指配备了涡轮增压器的发动机。涡轮增压器实质上是一种空气压缩设备，利用发动机排放的废气能量，通过冲击安装在排气系统中的涡轮，使其高速旋转，进而将增压后的空气压力强制送入气缸中。</p><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240413110531888.png" class="" title="奥迪 RS6 双涡轮增压 V8 发动机"><p>由于发动机功率与进气量成正比，因此采用涡轮增压发动机的汽车动力都比较足；而且整个增压过程基本不会消耗发动机本身的动力，因为它利用的是发动机排出的废气。</p><p>优点：动力足、省油、结构简单，安装方便，技术适应性广。</p><p><strong>最大功率（单位：kW）&#x2F; 最大扭矩（单位：N·m）</strong></p><p>最大功率是指一台发动机所能实现的最大动力输出，随着发动机转速的增加，功率也会相应提高。</p><p>一旦达到一定转速，功率就不再增加，因此标注最大功率时通常会同时标明相应的发动机转速。</p><p>通常，我们在谈论汽车功率时会使用另一个单位：马力（PS），例如我们会说某辆车有多少匹马力。</p><p>功率和马力的换算关系是：1 kW&#x3D;1.36 PS。</p><p><strong>简单来说，最大功率影响车辆能达到的最高速度。</strong></p><p>而扭矩则是指发动机在运转时从曲轴端输出的平均力矩。扭矩越大，发动机输出的“劲”越大，曲轴转速的变化也越快，汽车的爬坡能力、起步速度和加速性也越好。</p><p>然而，扭矩随着发动机转速的变化而不同。在某个转速区间内才会产生最大扭矩，这个区间通常在标注最大扭矩时给出。</p><p>举例来说，有些发动机可能在较低转速时就达到或接近最大扭矩，因此起步加速感觉特别强劲，且相对省油；而其他一些发动机则只能在转速较高的情况下达到最大扭矩，只能在超车时感受到加速的快感。</p><p><strong>简单来讲，最大扭矩影响车辆的加速性能。</strong></p><h2 id="购车时"><a href="#购车时" class="headerlink" title="购车时"></a>购车时</h2><p>在彻底了解心仪车型的配置参数和价格之后，我们就可以前往 4S 店进行试驾了。试驾是了解目标车辆的感受和体验的重要环节，绝对不要因为觉得不好意思而犹豫。</p><p>特别是对于家庭用车，最好带上家人一同前往试驾，让他们亲自感受一下后排空间是否足够舒适。</p><p>试驾后觉得不错的，让销售给你出一份报价单，千万别急着订车，一定要多跑几家店，充分了解一下车子的大概优惠行情。</p><p>试驾并了解优惠行情之后，我们就到了买车阶段，不知道大家有没有听过这个故事：买车如果是全款购买，销售全程黑脸，但如果是贷款买车，销售对你毕恭毕敬笑脸相迎，甚至提车仪式都给你搞得非常隆重。</p><p>为何同样是购车，销售的态度会有如此大的差别？这就需要介绍一下全款购车和贷款购车的区别了。</p><h3 id="全款买车"><a href="#全款买车" class="headerlink" title="全款买车"></a>全款买车</h3><p>全款买车只有下面四个费用：</p><ul><li>裸车价</li></ul><p>裸车价到底该怎么算？就是<strong>指导价减去现金优惠</strong>。一定是现金优惠，不是什么综合优惠。</p><p>裸车价尽量往少了谈，这关系到我们交的购置税。</p><ul><li>购置税</li></ul><p>购置税该怎么算？就是<strong>裸车价 ÷ 11.13</strong>。</p><p>注意一定是裸车价 ÷ 11.3，千万不能用指导价 ÷ 11.3。</p><ul><li>保险</li></ul><p>车辆保险只有四项：交强险、车损险、第三责任险和医保外责任用药险。</p><ul><li>上牌费</li></ul><p>4S 店帮你去上牌的费用。车管所的工本费一般是 120 块钱，如果 4S 店收你一两千上牌费的，纯属耍流氓，撑死给它 500 块，多一分都没有（记得让它给你个好看的牌照框）。</p><p>如果价格实在谈不下来，可以选择自己去车管所上牌，就是比较麻烦。</p><h3 id="贷款买车"><a href="#贷款买车" class="headerlink" title="贷款买车"></a>贷款买车</h3><p>一般分为厂家金融贷款和银行分期贷款。</p><ul><li>厂商金融贷款</li></ul><p>有些汽车厂商都会有免息贷款或者贴息贷款的政策（上汽金融、一汽金融等），都是面对自家车提供贷款，主要目的不是为了挣钱，而是以此来提高销量。</p><p>4S 销售顾问也会在电话里头跟你说我们店里现在有贴息甚至免息贷款的政策，实际上一旦你到店里了，销售就会说你资质不够走不了贷款，你只能做银行的分期贷款了。</p><p>因为厂商金融贷款的话 4S 店是赚不了钱的（没利息甚至贴息），所以先把你忽悠到店里，然后再给你推银行分期贷款。</p><ul><li>银行分期贷款</li></ul><p>对于银行分期贷款，可以说是 4S 店最大的收入来源了（银行会把一部分贷款利息返给 4S 店）。</p><p>现在最常见的就是 5 年分期的贷款，4S 店销售会跟你说 5 年分期贷款买车要比全款买车优惠，月供低、利率低，2 年后可以提前还，不收你违约金。乍一听感觉很划算，事实果真如此吗？</p><p>优惠是挺优惠的，但你能保证两年后一定能够存够钱提前还款吗？不会因为一些其他原因把钱花掉了？</p><p>银行和 4S 店就是抓住只有极少数消费者能够提前还款的事实，前期看似你赚了，实则是银行和 4S 店赚了。</p><p>因为大数据显示两年后能提前还款的人不到 40%，外面的消费诱惑大大了，极少有人能够按时提前还款，本以为自己 5 年分期贷款买车 2 年后提前还款能省下几万块钱，结果只能老老实实贷满 5 年还了 5 年的利息。</p><p>如果我们真的要通过银行分期贷款买车，首先最重要的就是自己要会<strong>算利息，确认好贷款利率</strong></p><p>假设我们贷款十万，5 年也就是分 60 期还，那月供就是 2500。那总还款就是 15 万 （2500 X 60 期 &#x3D; 150000）。</p><p>总利息就是 5 万（15万 - 10 万），月利息就是 833.33（5万 ÷ 60），月利率就是 0.83%（5万 ÷ 60 期 ÷ 10万），年利率接近 10%（0.83% X 12个月）。</p><p>可以看到这个利率是非常的高，最好贷款利率不要超过 4%，越低越好。</p><p>学会了算利息之后，我们还要知道<strong>还款的方式 ，一般分为等额本息和等额本金</strong></p><p><strong>等额本息：</strong>贷款总额和贷款利息之和分摊到每个还款月中，每月以相同的金额偿还贷款本息（即每月的总还款额一致，其中利息占比逐月递减，本金占比逐月增加），俗称先息后本。</p><p><strong>等额本金：</strong>每月偿还相同金额的本金，由于剩余本金减少，而利息则随计息本金的减少而逐月递减，所以每月还款额逐月递减，俗称等本等息。</p><p><strong>如果你有提前还款的打算，可以选择等额本金；如果是等额本息，就没必要提前还款了，因为等额本息前几年还的钱大部分是利息，后几年还的才是本金。</strong></p><p>最后一点就是我们要跟 4S 店谈清楚提前还款要不要交违约金，这个看你自己争取了。如果争取到不交违约金或者少交一点违约金，一定要写在合同里，并且是写在贷款合同而不是购车合同里。</p><blockquote><p>网上还有其他人说根本没有提前还款要交违约金这一说，如果有这种情况，可以直接拨打 12378 银保监会的电话</p></blockquote><p>我们再来看下贷款买车比全款买车额外产生的一些费用</p><ul><li>手续费（分情况付）</li></ul><p>如果要是做厂商金融贷款，有免息或者贴息政策的话，可以付这个手续费，一般是两到三千块钱。</p><p>如果你做的是银行分期贷款的话，这个手续费一分都不要出，因为 4S 店已经赚你的利息了。</p><ul><li>利息（要付）</li></ul><p>关于利息和利率的计算，前文有所提到。</p><ul><li>其他费用（不需要付）</li></ul><p>什么综合服务费、PDI 检测费、出库费、解押费等等，这些都是不需要自己付的，如果 4S 店跟你说这些钱你不付的话买不了车，那你转头就走，去另外一家店里买去。</p><table><thead><tr><th>全款买车费用</th><th>贷款买车费用</th></tr></thead><tbody><tr><td>裸车价</td><td>裸车价</td></tr><tr><td>购置税</td><td>购置税</td></tr><tr><td>保险（交强险、第三责任险、车损险、医保外责任用药险）</td><td>保险（交强险、第三责任险、车损险、医保外责任用药险）</td></tr><tr><td>上牌费</td><td>上牌费</td></tr><tr><td>❌</td><td>贷款手续费（看情况交）</td></tr><tr><td>❌</td><td>利息</td></tr></tbody></table><h2 id="购车后"><a href="#购车后" class="headerlink" title="购车后"></a>购车后</h2><p>确认买车后，我们会交定金并签订购车协议，协议上会明确提车日期。</p><p>提车的时候先别急着交钱，先把下面的步骤走好。因为如果交了钱出了 4S 店再发现汽车有问题，4S 店是不会负责的。</p><h3 id="提车前检查"><a href="#提车前检查" class="headerlink" title="提车前检查"></a>提车前检查</h3><p>参考链接：<a href="https://wanchemi.com/hao/tichezhuyi/">2023提车注意事项以及验车的步骤 新手必知！很详细！ - 玩车迷 (wanchemi.com)</a></p><ul><li>验车</li></ul><p>验车时应在光线充足的环境下，光线不足可以用手机自带的LED手电筒补光，一定要擦干水渍再验车，因为水渍会起到遮掩效果。验车时主要检查以下几个项目：</p><ol><li><strong>检查漆面有无明显划痕</strong>。重点检查前后杠这些重灾区。</li><li><strong>检查车辆是否重新补漆</strong>。用手背感受漆面，如感觉漆面发涩，不顺滑，很有可能是补过漆，这种感觉和原厂漆有很明显的区别。</li><li><strong>检查车辆内饰。</strong></li><li><strong>检查车辆生产日期</strong>。生产日期在车身铭牌处，名牌一般在副驾驶 A 柱下方。一般来讲，3 个月内的叫做近期车，6 个月以上称为库存车，如果销售提前告知你并且价格实惠，那么 6 个月以上库龄的车完全可以接受，如销售未提前告知你，建议换车。不然新车价格买库存车，说的就是你冤大头。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417221128988.png" class="" title="image-20240417221128988"><ol start="5"><li><strong>检查轮胎生产日期。</strong>轮胎生产日期由四个数字组成：前面2个数字代表星期，后面2个数字代表年份。比如说 1123 表示轮胎是 2023 年第 11 周生产的。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417220325957.png" class="" title="3906，说明轮胎出厂日期为：06 年第 39 个星期，即9月上旬左右"><ol start="6"><li><strong>检查玻璃生产日期</strong>。挡风玻璃上也有生产日期的标识，如下图，数字代表最近生产年份，点代表生产月份，点在数字左边，说明是上半年生产，用 7 减去黑点数，得出具体年份；如果点在数字右边，说明是下半年生产，用 13 减去黑点数，得出具体年份。如果车窗玻璃距离新车生产日期太远，一年或以上，那么很有可能是车窗玻璃被更换过。</li></ol><img src="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B4%AD%E8%BD%A6%E6%8C%87%E5%8D%97/image-20240417221437477.png" class="" title="image-20240417221437477"><ol start="7"><li><strong>检查公里数及各种随车工具。</strong>100 公里内都是正常的。</li><li><strong>检查发动机</strong>。启动车辆，检查发动机是否有明显杂音和异常抖动，最好打开前机盖看下有没有渗油漏油的现象。</li><li><strong>检查排气管内壁</strong>。摸一下内壁，如果特别黑的话说明有可能是试驾车。</li></ol><ul><li>付尾款并开发票上保险</li></ul><p>按照合同约定金额付款。在开发票上保险之后记得核对发票金额。</p><ul><li>清点材料</li></ul><p>4S 店需要给我们以下材料：</p><ol><li>购车发票（必须是购车专用发票，共三联）</li><li>车辆出厂合格证（原件）</li><li>保险单</li><li>车辆一致性证书</li><li>车辆三包凭证、使用说明书</li><li>购车合同、贷款合同（贷款买车前提下）</li><li>车钥匙</li><li>前期谈好的赠品</li></ol><ul><li>上牌</li></ul><p>上牌前先买购置税，车管所内部一般有自助缴费机，缴税后拿到完税证明即可办理上牌业务</p><p>上牌大致流程：先领取查验表填写车辆信息，填好查验表和合格证发票登记联放在一起，交给查验员就可以去验车了，验完车直接选号，牌照和行驶证登记证一般当天即出，实在等不及车管所也有牌照邮寄业务。</p><p>需要打临牌的同学记得在未选号之前办理，切记选号后是不能打临牌的。</p><h3 id="正式提车"><a href="#正式提车" class="headerlink" title="正式提车"></a>正式提车</h3><p>牌照到手后，我们就可以正式提车，开开心心地开车走人啦。最后祝大家都能买到自己心仪的汽车！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序员购车指南&quot;&gt;&lt;a href=&quot;#程序员购车指南&quot; class=&quot;headerlink&quot; title=&quot;程序员购车指南&quot;&gt;&lt;/a&gt;程序员购车指南&lt;/h1&gt;&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;爱车可以说是大部分男人的天性，而我对汽车的热情却远不及对手表的</summary>
      
    
    
    
    
    <category term="生活" scheme="https://xxxsalted.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux systemd 定时任务</title>
    <link href="https://xxxsalted.github.io/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://xxxsalted.github.io/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2024-04-25T11:39:59.000Z</published>
    <updated>2024-04-28T01:46:25.568Z</updated>
    
    <content type="html"><![CDATA[<p>哈喽大家好，我是咸鱼。</p><p>说到 Linux 定时任务，大家用得最多的就是 crond 服务，但其实 systemd 也有类似的功能。我们不但可以通过 systemd 来管理服务，还能设置定时任务，那就是 systemd timer。</p><p>与 crond 相比，systemd 定时任务具有以下优点：</p><ul><li>更高的精度：systemd 定时任务可以精确到秒，而 crond 只能精确到分钟。</li><li>可以限制资源使用：使用 systemd 定时任务可以设置内存和 CPU 的使用限制，比如最多使用 50% 的 CPU。</li><li>更灵活的配置：systemd 定时任务可以通过条件、依赖关系等进行配置，以控制任务的执行。相比之下，crond 的配置相对简单，灵活性较低。</li></ul><p>举个例子，假设我们要通过 crond 配置多个大文件的远程备份（使用 scp、rsync 或 ftp 的方式），但由于大文件的网络传输时间不确定，因此下一个文件的备份任务开始时间几乎都是按照经验估计的。</p><p>这可能导致上一个任务的网络传输尚未完成，下一个任务已经开始，同时占用网络带宽，然后又启动了下一个任务，形成恶性循环。</p><p>而使用 systemd timer 可以建立任务之间的依赖关系，例如在第一个备份任务完成后再启动第二个备份任务，以此类推。</p><h2 id="systemd-timer-原理"><a href="#systemd-timer-原理" class="headerlink" title="systemd timer 原理"></a>systemd timer 原理</h2><p>systemd 定时任务基于 systemd 的单元管理器。它使用两种类型的单元来管理定时任务：<code>.timer</code> 单元和 <code>.service</code> 单元。</p><ul><li><code>.timer</code> 单元：<ul><li><code>.timer</code> 单元定义了定时规则，包括启动时间、间隔时间等。</li><li>每个 <code>.timer</code> 单元都对应一个或多个关联的 <code>.service</code> 单元。</li></ul></li><li><code>.service</code> 单元：<ul><li><code>.service</code> 单元定义了要在计时器触发时运行的服务或命令。</li><li>当 <code>.timer</code> 触发时，相关联的 <code>.service</code> 单元将被启动。</li></ul></li></ul><p>systemd 定时任务原理是：<strong>systemd 定期检查每个 <code>.timer</code> 单元中定义的定时规则，以确定是否触发相应的定时器。一旦定时器触发，systemd 将启动与该定时器关联的 <code>.service</code> 单元，从而执行预定的任务。</strong></p><p>在正式介绍 systemd 定时任务之前，我们先要了解什么是单元（unit）</p><h2 id="systemd-单元"><a href="#systemd-单元" class="headerlink" title="systemd 单元"></a>systemd 单元</h2><p>简单来讲，单元就是 systemd 的最小管理单位，是单个进程的描述。一个个单元相互调用和依赖，组成一个庞大的任务管理系统。</p><p>systemd 中的 unit 有很多类型，下面是一些常见的 unit 类型：</p><ul><li><code>.service</code>：service 单元，也就是我们常说的系统服务</li><li><code>.target</code>：target 单元，其实就是一堆 unit 的集合，比如常见的 <code>multi-user.target</code></li><li><code>.timer</code>：timer 单元，负责定时任务。</li><li><code>.slice</code>：slice 单元，负责资源的分配。</li></ul><p>每个 unit 都有一个描述文件（unit 负责干什么、怎么干…），它们分散在三个目录。</p><ul><li><code>/lib/systemd/system</code>：系统默认的 unit 文件</li><li><code>/etc/systemd/system</code>：包含用户自定义的 unit 文件，如果设置了开机自启动，则该目录下的 unit 描述文件会创建一个符号链接。</li><li><code>/usr/lib/systemd/system</code>：用户自己定义的 unit 文件，也会包含一些系统默认的 unit 文件</li></ul><blockquote><p>大多数 linux 发行版中 <code>/lib</code> 是  <code>/usr/lib</code>的软链接，所以 1 和 3 其实是同一目录，作用自然应该是相同的。</p></blockquote><p>其实可以简单分成两类：</p><ul><li><code>/etc/systemd/system</code>：用户自定义的 unit 文件</li><li><code>/usr/lib/systemd/system</code>：系统默认的 unit 文件和用户安装软件的 unit 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有 unit</span></span><br><span class="line">$ systemctl list-unit-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 Service unit</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 Timer unit</span></span><br><span class="line">$ systemctl list-unit-files --<span class="built_in">type</span> timer</span><br></pre></td></tr></table></figure><p>关于 systemd unit 相关的内容这里就不细讲了，大家可以看我之前的文章：《<a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI1MzE2Mw==&mid=2247485486&idx=1&sn=fafbbf884603e63308d085d99e5f77e0&chksm=c293086af5e4817cf3c4cea6136cbbbf7689a6b91e32f17259d5f1b23e067fd15ea382891401&token=1980629016&lang=zh_CN#rd">systemctl 命令设置开机自启动失败 </a>》</p><img src="/2024/04/25/Linux-systemd-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/1.jpg" class="" title="image"><h2 id="设置-systemd-定时任务"><a href="#设置-systemd-定时任务" class="headerlink" title="设置 systemd 定时任务"></a>设置 systemd 定时任务</h2><p>有一个检查 https 证书是否过期的脚本 <code>check_https.sh</code>，我们现在需要系统定期执行这个脚本，除此之外，系统在开机之后也会执行这个脚本。</p><p><strong>首先创建一个 service unit</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/lib/systemd/system/check-https.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=check https certificates</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=check_https.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><code>Type=oneshot</code> 表示 service 以一次性（Oneshot）方式运行。这意味着当启动 service 时，它将执行一次，并在完成后退出。</p><p><strong>然后我们创建一个 timer unit</strong></p><p>Service unit 只是定义了如何执行任务，要定时执行这个 Service，还必须定义 Timer unit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/lib/systemd/system/check-https.timer</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Runs check https every day</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnUnitActiveSec=24h</span><br><span class="line">Unit=check-https.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>我们着重来看下 [Timer] 部分：</p><ul><li><code>OnActiveSec</code>：定时任务生效后，多少时间开始执行任务</li><li><code>OnBootSec</code>：系统启动后，多少时间开始执行任务</li><li><code>OnStartupSec</code>：Systemd 进程启动后，多少时间开始执行任务</li><li><code>OnUnitActiveSec</code>：该 unit 上次执行后，等多少时间再次执行</li><li><code>OnUnitInactiveSec</code>： 定时任务上次关闭后多少时间，再次执行</li><li><code>OnCalendar</code>：基于绝对时间，而不是相对时间执行</li><li><code>AccuracySec</code>：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒</li><li><code>Unit</code>：真正要执行的任务，默认是同名的带有<code>.service</code> 后缀的 unit</li><li><code>Persistent</code>：如果设置了该字段，即使定时任务到时没有启动，也会自动执行相应的 unit</li><li><code>WakeSystem</code>：如果系统休眠，是否自动唤醒系统</li></ul><p>上面的 timer 文件里，<code>OnUnitActiveSec=24h</code> 表示 24 小时执行一次任务。</p><p>下面是其他的写法：</p><p>1、在系统启动 15 分钟后执行，并在系统运行时，每周执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnBootSec=15min</span><br><span class="line">OnUnitActiveSec=1w</span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>2、每周周一执行，如果到时定时任务没有启动，会立即执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnCalendar=weekly</span><br><span class="line">Persistent=<span class="literal">true</span></span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>3、每周日凌晨三点执行（时间格式：<code>Year-Month-Day Hour:Minute:Second</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Timer]</span><br><span class="line">OnCalendar=Sun *-*-* 03:00:00</span><br><span class="line">Unit=check-https.service</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html">https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html</a></p><p>然后我们启动这个定时任务，并设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl  daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl start check-https.timer</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> check-https.timer</span><br></pre></td></tr></table></figure><p>其他一些定时任务命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有正在运行的定时任务</span></span><br><span class="line">systemctl list-timers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭定时任务</span></span><br><span class="line">systemctl stop check-https.timer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看定时任务状态</span></span><br><span class="line">systemctl status check-https.timer</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哈喽大家好，我是咸鱼。&lt;/p&gt;
&lt;p&gt;说到 Linux 定时任务，大家用得最多的就是 crond 服务，但其实 systemd 也有类似的功能。我们不但可以通过 systemd 来管理服务，还能设置定时任务，那就是 systemd timer。&lt;/p&gt;
&lt;p&gt;与 crond</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://xxxsalted.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
